{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "dev-assets/component-preview.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ComponentPreview",
          "members": [
            {
              "kind": "method",
              "name": "_onThemeSelectorButtonClick",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onToggleFullscreenButtonClick"
            },
            {
              "kind": "method",
              "name": "_runOperationOnEachThemeSelector",
              "parameters": [
                {
                  "name": "command"
                },
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_applyTheme",
              "parameters": [
                {
                  "name": "themeName"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_elThemeSelector"
            },
            {
              "kind": "field",
              "name": "_elButtons"
            },
            {
              "kind": "field",
              "name": "_elToggleFullscreen"
            },
            {
              "kind": "field"
            },
            {
              "kind": "field",
              "name": "_onThemeSelectorButtonClickBound"
            },
            {
              "kind": "field",
              "name": "_onToggleFullscreenButtonClickBound"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "component-preview",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "component-preview",
          "declaration": {
            "name": "ComponentPreview",
            "module": "dev-assets/component-preview.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/main.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeButton",
          "declaration": {
            "name": "VscodeButton",
            "module": "./vscode-button"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckbox",
          "declaration": {
            "name": "VscodeCheckbox",
            "module": "./vscode-checkbox"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckboxGroup",
          "declaration": {
            "name": "VscodeCheckboxGroup",
            "module": "./vscode-checkbox-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCollapsible",
          "declaration": {
            "name": "VscodeCollapsible",
            "module": "./vscode-collapsible"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenuItem",
          "declaration": {
            "name": "VscodeContextMenuItem",
            "module": "./vscode-context-menu-item"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenu",
          "declaration": {
            "name": "VscodeContextMenu",
            "module": "./vscode-context-menu"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormContainer",
          "declaration": {
            "name": "VscodeFormContainer",
            "module": "./vscode-form-container"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormControl",
          "declaration": {
            "name": "VscodeFormControl",
            "module": "./vscode-form-control"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormDescription",
          "declaration": {
            "name": "VscodeFormDescription",
            "module": "./vscode-form-description"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormItem",
          "declaration": {
            "name": "VscodeFormItem",
            "module": "./vscode-form-item"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormLabel",
          "declaration": {
            "name": "VscodeFormLabel",
            "module": "./vscode-form-label"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormGroup",
          "declaration": {
            "name": "VscodeFormGroup",
            "module": "./vscode-form-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormHelper",
          "declaration": {
            "name": "VscodeFormHelper",
            "module": "./vscode-form-helper"
          }
        },
        {
          "kind": "js",
          "name": "VscodeIcon",
          "declaration": {
            "name": "VscodeIcon",
            "module": "./vscode-icon"
          }
        },
        {
          "kind": "js",
          "name": "VscodeInputbox",
          "declaration": {
            "name": "VscodeInputbox",
            "module": "./vscode-inputbox"
          }
        },
        {
          "kind": "js",
          "name": "VscodeLabel",
          "declaration": {
            "name": "VscodeLabel",
            "module": "./vscode-label"
          }
        },
        {
          "kind": "js",
          "name": "VscodeMultiSelect",
          "declaration": {
            "name": "VscodeMultiSelect",
            "module": "./vscode-multi-select"
          }
        },
        {
          "kind": "js",
          "name": "VscodeOption",
          "declaration": {
            "name": "VscodeOption",
            "module": "./vscode-option"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadio",
          "declaration": {
            "name": "VscodeRadio",
            "module": "./vscode-radio"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadioGroup",
          "declaration": {
            "name": "VscodeRadioGroup",
            "module": "./vscode-radio-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSingleSelect",
          "declaration": {
            "name": "VscodeSingleSelect",
            "module": "./vscode-single-select"
          }
        },
        {
          "kind": "js",
          "name": "VscodeScrollable",
          "declaration": {
            "name": "VscodeScrollable",
            "module": "./vscode-scrollable"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSplitLayout",
          "declaration": {
            "name": "VscodeSplitLayout",
            "module": "./vscode-split-layout"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTable",
          "declaration": {
            "name": "VscodeTable",
            "module": "./vscode-table"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableBody",
          "declaration": {
            "name": "VscodeTableBody",
            "module": "./vscode-table-body"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableCell",
          "declaration": {
            "name": "VscodeTableCell",
            "module": "./vscode-table-cell"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeader",
          "declaration": {
            "name": "VscodeTableHeader",
            "module": "./vscode-table-header"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeaderCell",
          "declaration": {
            "name": "VscodeTableHeaderCell",
            "module": "./vscode-table-header-cell"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableRow",
          "declaration": {
            "name": "VscodeTableRow",
            "module": "./vscode-table-row"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTabs",
          "declaration": {
            "name": "VscodeTabs",
            "module": "./vscode-tabs"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTree",
          "declaration": {
            "name": "VscodeTree",
            "module": "./vscode-tree"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-button.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeButton",
          "default": "class VscodeButton extends VscElement {\r\n    constructor() {\r\n        super();\r\n        this.tabindex = 0;\r\n        this.secondary = false;\r\n        this.role = 'button';\r\n        this.disabled = false;\r\n        /**\r\n         * A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) before the label\r\n         */\r\n        this.icon = '';\r\n        /**\r\n         * A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) after the label\r\n         */\r\n        this.iconAfter = '';\r\n        this.focused = false;\r\n        this._prevTabindex = 0;\r\n        this._handleFocusBound = this._handleFocus.bind(this);\r\n        this._handleBlurBound = this._handleBlur.bind(this);\r\n        this.addEventListener('keydown', this._handleKeyDown.bind(this));\r\n        this.addEventListener('click', this._handleClick.bind(this));\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener('focus', this._handleFocusBound);\r\n        this.addEventListener('blur', this._handleBlurBound);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('focus', this._handleFocusBound);\r\n        this.removeEventListener('blur', this._handleBlurBound);\r\n    }\r\n    attributeChangedCallback(name, oldVal, newVal) {\r\n        super.attributeChangedCallback(name, oldVal, newVal);\r\n        if (name === 'disabled' && this.hasAttribute('disabled')) {\r\n            this._prevTabindex = this.tabindex;\r\n            this.tabindex = -1;\r\n        }\r\n        else if (name === 'disabled' && !this.hasAttribute('disabled')) {\r\n            this.tabindex = this._prevTabindex;\r\n        }\r\n    }\r\n    _handleKeyDown(event) {\r\n        if ((event.key === 'Enter' || event.key === ' ') &&\r\n            !this.hasAttribute('disabled')) {\r\n            this.dispatchEvent(new CustomEvent('vsc-click', {\r\n                detail: {\r\n                    originalEvent: new MouseEvent('click'),\r\n                },\r\n            }));\r\n        }\r\n    }\r\n    _handleClick(event) {\r\n        if (!this.hasAttribute('disabled')) {\r\n            this.dispatchEvent(new CustomEvent('vsc-click', {\r\n                detail: {\r\n                    originalEvent: event,\r\n                },\r\n            }));\r\n        }\r\n    }\r\n    _handleFocus() {\r\n        this.focused = true;\r\n    }\r\n    _handleBlur() {\r\n        this.focused = false;\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\n        :host {\n          align-items: center;\n          background-color: var(--vscode-button-background);\n          border: 0;\n          border-radius: 2px;\n          box-sizing: border-box;\n          color: var(--vscode-button-foreground);\n          cursor: pointer;\n          display: inline-flex;\n          font-size: var(--vscode-font-size);\n          font-weight: var(--vscode-font-weight);\n          line-height: 1.4em;\n          padding: 2px 14px;\n          user-select: none;\n        }\n\n        :host([secondary]) {\n          color: var(--vscode-button-secondaryForeground);\n          background-color: var(--vscode-button-secondaryBackground);\n        }\n\n        :host([disabled]) {\n          cursor: default;\n          opacity: 0.4;\n          pointer-events: none;\n        }\n\n        :host(:hover) {\n          background-color: var(--vscode-button-hoverBackground);\n        }\n\n        :host([disabled]:hover) {\n          background-color: var(--vscode-button-background);\n        }\n\n        :host([secondary]:hover) {\n          background-color: var(--vscode-button-secondaryHoverBackground);\n        }\n\n        :host([secondary][disabled]:hover) {\n          background-color: var(--vscode-button-secondaryBackground);\n        }\n\n        :host(:focus),\n        :host(:active) {\n          outline: none;\n        }\n\n        :host(:focus) {\n          background-color: var(--vscode-button-hoverBackground);\n          outline: 1px solid var(--vscode-focusBorder);\n          outline-offset: 2px;\n        }\n\n        :host([disabled]:focus) {\n          background-color: var(--vscode-button-background);\n          outline: 0;\n        }\n\n        :host([secondary]:focus) {\n          background-color: var(--vscode-button-secondaryHoverBackground);\n        }\n\n        :host([secondary][disabled]:focus) {\n          background-color: var(--vscode-button-secondaryBackground);\n        }\n\n        .wrapper {\n          align-items: center;\n          box-sizing: border-box;\n          display: flex;\n          justify-content: center;\n          position: relative;\n          width: 100%;\n        }\n\n        .wrapper.has-icon-before {\n          padding-left: 21px;\n        }\n\n        .wrapper.has-icon-after {\n          padding-right: 21px;\n        }\n\n        .icon {\n          color: var(--vscode-button-foreground);\n          left: 0;\n          position: absolute;\n        }\n\n        .icon-after {\n          color: var(--vscode-button-foreground);\n          position: absolute;\n          right: 0;\n        }\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const hasIcon = this.icon !== '';\r\n        const hasIconAfter = this.iconAfter !== '';\r\n        const wrapperClasses = {\r\n            wrapper: true,\r\n            'has-icon-before': hasIcon,\r\n            'has-icon-after': hasIconAfter,\r\n        };\r\n        const iconElem = hasIcon\r\n            ? html `<vscode-icon name=\"${this.icon}\" class=\"icon\"></vscode-icon>`\r\n            : nothing;\r\n        const iconAfterElem = hasIconAfter\r\n            ? html `<vscode-icon\n          name=\"${this.iconAfter}\"\n          class=\"icon-after\"\n        ></vscode-icon>`\r\n            : nothing;\r\n        return html `\n      <span class=\"${classMap(wrapperClasses)}\">\n        ${iconElem}\n        <slot></slot>\n        ${iconAfterElem}\n      </span>\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeButton",
          "declaration": {
            "name": "VscodeButton",
            "module": "dist/vscode-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-checkbox-group.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeCheckboxGroup",
          "default": "class VscodeCheckboxGroup extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.variant = 'horizontal';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        .wrapper {\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n        }\r\n\r\n        :host([variant='vertical']) .wrapper {\r\n          display: block;\r\n        }\r\n\r\n        ::slotted(vscode-checkbox) {\r\n          margin-right: 20px;\r\n        }\r\n\r\n        ::slotted(vscode-checkbox:last-child) {\r\n          margin-right: 0;\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-checkbox) {\r\n          display: block;\r\n          margin-bottom: 15px;\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-checkbox:last-child) {\r\n          margin-bottom: 0;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCheckboxGroup",
          "declaration": {
            "name": "VscodeCheckboxGroup",
            "module": "dist/vscode-checkbox-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-checkbox.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeCheckbox",
          "default": "class VscodeCheckbox extends FormButtonWidgetBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.checked = false;\r\n        this.label = '';\r\n        this.value = '';\r\n        this.disabled = false;\r\n        this.isSlotEmpty = true;\r\n    }\r\n    _handleClick() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this.checked = !this.checked;\r\n        this.dispatchEvent(new CustomEvent('vsc-change', {\r\n            detail: {\r\n                checked: this.checked,\r\n                label: this.label,\r\n                value: this.value,\r\n            },\r\n            bubbles: true,\r\n            composed: true,\r\n        }));\r\n    }\r\n    _handleKeyDown(event) {\r\n        if (!this.disabled && (event.key === 'Enter' || event.key === ' ')) {\r\n            this.checked = !this.checked;\r\n        }\r\n    }\r\n    _handleSlotChange() {\r\n        this.isSlotEmpty = this.innerHTML === '';\r\n    }\r\n    static get styles() {\r\n        return [super.styles, baseStyles, checkboxStyles, formHelperTextStyles];\r\n    }\r\n    render() {\r\n        const isLabelEmpty = !this.label && this.isSlotEmpty;\r\n        const iconClasses = classMap({\r\n            icon: true,\r\n            checked: this.checked,\r\n            'before-empty-label': isLabelEmpty,\r\n        });\r\n        const labelInnerClasses = classMap({\r\n            'label-inner': true,\r\n            empty: isLabelEmpty,\r\n        });\r\n        const icon = html `<svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      viewBox=\"0 0 16 16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"currentColor\"\r\n    >\r\n      <path\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n        d=\"M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z\"\r\n      />\r\n    </svg>`;\r\n        const check = this.checked ? icon : nothing;\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <input\r\n          id=\"${this._uid}\"\r\n          class=\"checkbox\"\r\n          type=\"checkbox\"\r\n          ?checked=\"${this.checked}\"\r\n          value=\"${this.value}\"\r\n          tabindex=\"-1\"\r\n        />\r\n        <div class=\"${iconClasses}\">${check}</div>\r\n        <label for=\"${this._uid}\" class=\"label\" @click=\"${this._handleClick}\">\r\n          <span class=\"${labelInnerClasses}\">\r\n            <slot @slotchange=\"${this._handleSlotChange}\">${this.label}</slot>\r\n          </span>\r\n        </label>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCheckbox",
          "declaration": {
            "name": "VscodeCheckbox",
            "module": "dist/vscode-checkbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-collapsible.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeCollapsible",
          "default": "class VscodeCollapsible extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.title = '';\r\n        this.open = false;\r\n    }\r\n    _onHeaderClick() {\r\n        this.open = !this.open;\r\n    }\r\n    _onHeaderKeyDown(event) {\r\n        if (event.key === 'Enter') {\r\n            this.open = !this.open;\r\n        }\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        .collapsible {\r\n          background-color: var(--vscode-sideBar-background);\r\n        }\r\n\r\n        .collapsible-header {\r\n          align-items: center;\r\n          background-color: var(--vscode-sideBarSectionHeader-background);\r\n          cursor: pointer;\r\n          display: flex;\r\n          height: 22px;\r\n          line-height: 22px;\r\n          user-select: none;\r\n        }\r\n\r\n        .collapsible-header:focus {\r\n          opacity: 1;\r\n          outline-offset: -1px;\r\n          outline-style: solid;\r\n          outline-width: 1px;\r\n          outline-color: var(--vscode-focusBorder);\r\n        }\r\n\r\n        .collapsible-header h3 {\r\n          color: var(--vscode-sideBarTitle-foreground);\r\n          font-size: 11px;\r\n          font-weight: 700;\r\n          margin: 0;\r\n          text-transform: uppercase;\r\n        }\r\n\r\n        .header-icon {\r\n          color: var(--vscode-icon-foreground);\r\n          display: block;\r\n          margin: 0 3px;\r\n        }\r\n\r\n        .collapsible.open .header-icon {\r\n          transform: rotate(90deg);\r\n        }\r\n\r\n        .actions {\r\n          display: none;\r\n          margin-left: auto;\r\n          margin-right: 4px;\r\n        }\r\n\r\n        .collapsible.open .actions {\r\n          display: block;\r\n        }\r\n\r\n        slot[name='actions']::slotted(div) {\r\n          align-items: center;\r\n          display: flex;\r\n        }\r\n\r\n        .collapsible-body {\r\n          display: none;\r\n          overflow: hidden;\r\n        }\r\n\r\n        .collapsible.open .collapsible-body {\r\n          display: block;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const classes = classMap({ collapsible: true, open: this.open });\r\n        const icon = html `<svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      viewBox=\"0 0 16 16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"currentColor\"\r\n      class=\"header-icon\"\r\n    >\r\n      <path\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n        d=\"M10.072 8.024L5.715 3.667l.618-.62L11 7.716v.618L6.333 13l-.618-.619 4.357-4.357z\"\r\n      />\r\n    </svg>`;\r\n        return html `\r\n      <div class=\"${classes}\">\r\n        <div\r\n          class=\"collapsible-header\"\r\n          tabindex=\"0\"\r\n          title=\"${this.title}\"\r\n          @click=\"${this._onHeaderClick}\"\r\n          @keydown=\"${this._onHeaderKeyDown}\"\r\n        >\r\n          ${icon}\r\n          <h3 class=\"title\">${this.title}</h3>\r\n          <div class=\"actions\"><slot name=\"actions\"></slot></div>\r\n        </div>\r\n        <div class=\"collapsible-body\">\r\n          <div>\r\n            <slot name=\"body\"></slot>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCollapsible",
          "declaration": {
            "name": "VscodeCollapsible",
            "module": "dist/vscode-collapsible.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-context-menu-item.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeContextMenuItem",
          "default": "class VscodeContextMenuItem extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.label = '';\r\n        this.keybinding = '';\r\n        this.value = '';\r\n        this.separator = false;\r\n        this.tabindex = 0;\r\n    }\r\n    onItemClick() {\r\n        this.dispatchEvent(new CustomEvent('vsc-click', {\r\n            detail: {\r\n                label: this.label,\r\n                keybinding: this.keybinding,\r\n                value: this.value || this.label,\r\n                separator: this.separator,\r\n                tabindex: this.tabindex,\r\n            },\r\n            bubbles: true,\r\n            composed: true,\r\n        }));\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: var(--vscode-font-weight);\r\n          line-height: 1.4em;\r\n          outline: none;\r\n          position: relative;\r\n        }\r\n\r\n        .context-menu-item {\r\n          background-color: var(--vscode-menu-background);\r\n          color: var(--vscode-menu-foreground);\r\n          border: 1px solid transparent;\r\n          display: flex;\r\n          user-select: none;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        .rule {\r\n          border-bottom: 1px solid var(--vscode-menu-separatorBackground);\r\n          display: block;\r\n          margin: 0 0.8em 0.2em;\r\n          opacity: 0.4;\r\n          padding-top: 0.2em;\r\n          width: 100%;\r\n        }\r\n\r\n        .context-menu-item a {\r\n          align-items: center;\r\n          color: var(--vscode-menu-foreground);\r\n          cursor: default;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          height: 2em;\r\n          outline: none;\r\n          position: relative;\r\n          text-decoration: inherit;\r\n        }\r\n\r\n        .context-menu-item a:hover,\r\n        :host-context(:focus) .context-menu-item a {\r\n          background-color: var(--vscode-menu-selectionBackground);\r\n          color: var(--vscode-menu-selectionForeground);\r\n        }\r\n\r\n        .label {\r\n          background: none;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          font-size: 12px;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-decoration: none;\r\n        }\r\n\r\n        .keybinding {\r\n          display: block;\r\n          flex: 2 1 auto;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-align: right;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      ${this.separator\r\n            ? html `\r\n            <div class=\"context-menu-item separator\">\r\n              <span class=\"rule\"></span>\r\n            </div>\r\n          `\r\n            : html `\r\n            <div class=\"context-menu-item\">\r\n              <a @click=\"${this.onItemClick}\">\r\n                ${this.label\r\n                ? html `<span class=\"label\">${this.label}</span>`\r\n                : nothing}\r\n                ${this.keybinding\r\n                ? html `<span class=\"keybinding\">${this.keybinding}</span>`\r\n                : nothing}\r\n              </a>\r\n            </div>\r\n          `}\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeContextMenuItem",
          "declaration": {
            "name": "VscodeContextMenuItem",
            "module": "dist/vscode-context-menu-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-context-menu.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeContextMenu",
          "default": "class VscodeContextMenu extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /** <pre><code>interface MenuItemData {\r\n         * &nbsp;&nbsp;label: string;\r\n         * &nbsp;&nbsp;keybinding?: string;\r\n         * &nbsp;&nbsp;value?: string;\r\n         * &nbsp;&nbsp;separator?: boolean;\r\n         * &nbsp;&nbsp;tabindex?: number;\r\n         * }</code></pre>\r\n         */\r\n        this.data = [];\r\n        // TODO: hide on item click\r\n        this.show = false;\r\n    }\r\n    onItemClick(event) {\r\n        const { detail } = event;\r\n        this.dispatchEvent(new CustomEvent('vsc-select', {\r\n            detail,\r\n            bubbles: true,\r\n            composed: true,\r\n        }));\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: var(--vscode-font-weight);\r\n          line-height: 1.4em;\r\n          position: relative;\r\n        }\r\n\r\n        .context-menu {\r\n          background-color: var(--vscode-menu-background);\r\n          box-shadow: 0 2px 8px var(--vscode-widget-shadow);\r\n          color: var(--vscode-menu-foreground);\r\n          padding: 0.5em 0;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        .context-menu-item {\r\n          border: 1px solid transparent;\r\n          display: flex;\r\n          user-select: none;\r\n        }\r\n\r\n        .rule {\r\n          border-bottom: 1px solid var(--vscode-menu-separatorBackground);\r\n          display: block;\r\n          margin: 0 0.8em 0.2em;\r\n          opacity: 0.4;\r\n          padding-top: 0.2em;\r\n          width: 100%;\r\n        }\r\n\r\n        .context-menu-item a {\r\n          align-items: center;\r\n          color: var(--vscode-menu-foreground);\r\n          cursor: default;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          height: 2em;\r\n          outline: none;\r\n          position: relative;\r\n          text-decoration: inherit;\r\n        }\r\n\r\n        .context-menu-item a:hover,\r\n        .context-menu-item a:focus {\r\n          background-color: var(--vscode-menu-selectionBackground);\r\n          color: var(--vscode-menu-selectionForeground);\r\n        }\r\n\r\n        .label {\r\n          background: none;\r\n          display: flex;\r\n          flex: 1 1 auto;\r\n          font-size: 12px;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-decoration: none;\r\n        }\r\n\r\n        .keybinding {\r\n          display: block;\r\n          flex: 2 1 auto;\r\n          line-height: 1;\r\n          padding: 0 2em;\r\n          text-align: right;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const menu = html `\r\n      <div class=\"context-menu\">\r\n        ${this.data\r\n            ? this.data.map(({ label = '', keybinding = '', value = '', separator = false, tabindex = 0, }) => html `\r\n                <vscode-context-menu-item\r\n                  label=\"${label}\"\r\n                  keybinding=\"${keybinding}\"\r\n                  value=\"${value}\"\r\n                  ?separator=\"${separator}\"\r\n                  tabindex=\"${tabindex}\"\r\n                  @vsc-click=\"${this.onItemClick}\"\r\n                ></vscode-context-menu-item>\r\n              `)\r\n            : html `<slot></slot>`}\r\n      </div>\r\n    `;\r\n        return html ` ${this.show ? menu : nothing} `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeContextMenu",
          "declaration": {
            "name": "VscodeContextMenu",
            "module": "dist/vscode-context-menu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-container.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormContainer",
          "default": "class VscodeFormContainer extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.breakpoint = 490;\r\n        this._responsive = false;\r\n        this._firstUpdateComplete = false;\r\n        this._resizeObserverCallbackBound = this._resizeObserverCallback.bind(this);\r\n    }\r\n    set responsive(isResponsive) {\r\n        this._responsive = isResponsive;\r\n        if (this._firstUpdateComplete) {\r\n            if (isResponsive) {\r\n                this._activateResponsiveLayout();\r\n            }\r\n            else {\r\n                this._deactivateResizeObserver();\r\n            }\r\n        }\r\n    }\r\n    get responsive() {\r\n        return this._responsive;\r\n    }\r\n    get data() {\r\n        return this._collectFormData();\r\n    }\r\n    _collectFormData() {\r\n        const query = [\r\n            'vscode-inputbox',\r\n            'vscode-single-select',\r\n            'vscode-multi-select',\r\n            'vscode-checkbox',\r\n            'vscode-radio',\r\n        ].join(',');\r\n        const vscFormWidgets = this.querySelectorAll(query);\r\n        const data = {};\r\n        vscFormWidgets.forEach((widget) => {\r\n            if (!widget.hasAttribute('name')) {\r\n                return;\r\n            }\r\n            const name = widget.getAttribute('name');\r\n            if (!name) {\r\n                return;\r\n            }\r\n            if (isCheckbox(widget) && widget.checked) {\r\n                data[name] = Array.isArray(data[name])\r\n                    ? [...data[name], widget.value]\r\n                    : [widget.value];\r\n            }\r\n            else if (isMultiSelect(widget)) {\r\n                data[name] = widget.value;\r\n            }\r\n            else if (isCheckbox(widget) && !widget.checked) {\r\n                data[name] = Array.isArray(data[name]) ? data[name] : [];\r\n            }\r\n            else if ((isRadio(widget) && widget.checked) ||\r\n                isInputbox(widget) ||\r\n                isSingleSelect(widget)) {\r\n                data[name] = widget.value;\r\n            }\r\n            else if (isRadio(widget) && !widget.checked) {\r\n                data[name] = data[name] ? data[name] : '';\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n    _toggleCompactLayout(layout) {\r\n        const formGroups = this._assignedNodes.filter((el) => el.matches && el.matches('vscode-form-group'));\r\n        formGroups.forEach((group) => {\r\n            if (!group.dataset.originalVariant) {\r\n                group.dataset.originalVariant = group.variant;\r\n            }\r\n            const oVariant = group.dataset.originalVariant;\r\n            if (layout === FormGroupLayout.VERTICAL && oVariant === 'horizontal') {\r\n                group.variant = 'vertical';\r\n            }\r\n            else {\r\n                group.variant = oVariant;\r\n            }\r\n            const checkboxOrRadioGroup = group.querySelectorAll('vscode-checkbox-group, vscode-radio-group');\r\n            checkboxOrRadioGroup.forEach((widgetGroup) => {\r\n                if (!widgetGroup.dataset.originalVariant) {\r\n                    widgetGroup.dataset.originalVariant = widgetGroup.variant;\r\n                }\r\n                const originalVariant = widgetGroup.dataset.originalVariant;\r\n                if (layout === FormGroupLayout.HORIZONTAL &&\r\n                    originalVariant === FormGroupLayout.HORIZONTAL) {\r\n                    widgetGroup.variant = 'horizontal';\r\n                }\r\n                else {\r\n                    widgetGroup.variant = 'vertical';\r\n                }\r\n            });\r\n        });\r\n    }\r\n    _resizeObserverCallback(entries) {\r\n        let wrapperWidth = 0;\r\n        for (const entry of entries) {\r\n            wrapperWidth = entry.contentRect.width;\r\n        }\r\n        const nextLayout = wrapperWidth < this.breakpoint\r\n            ? FormGroupLayout.VERTICAL\r\n            : FormGroupLayout.HORIZONTAL;\r\n        if (nextLayout !== this._currentFormGroupLayout) {\r\n            this._toggleCompactLayout(nextLayout);\r\n            this._currentFormGroupLayout = nextLayout;\r\n        }\r\n    }\r\n    _activateResponsiveLayout() {\r\n        this._resizeObserver = new ResizeObserver(this._resizeObserverCallbackBound);\r\n        this._resizeObserver.observe(this._wrapperElement);\r\n    }\r\n    _deactivateResizeObserver() {\r\n        var _a;\r\n        (_a = this._resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\r\n        this._resizeObserver = null;\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          max-width: 727px;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    firstUpdated() {\r\n        this._firstUpdateComplete = true;\r\n        if (this._responsive) {\r\n            this._activateResponsiveLayout();\r\n        }\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormContainer",
          "declaration": {
            "name": "VscodeFormContainer",
            "module": "dist/vscode-form-container.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-control.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormControl",
          "default": "class VscodeFormControl extends VscElement {\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          margin-top: 9px;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormControl",
          "declaration": {
            "name": "VscodeFormControl",
            "module": "dist/vscode-form-control.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-description.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormDescription",
          "default": "class VscodeFormDescription extends VscElement {\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          color: var(--vscode-foreground);\r\n          cursor: default;\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          line-height: 1.4;\r\n          margin: 3px 0;\r\n          opacity: 0.9;\r\n          overflow: hidden;\r\n          user-select: text;\r\n        }\r\n\r\n        ::slotted(a),\r\n        ::slotted(a:visited) {\r\n          color: var(--vscode-textLink-foreground);\r\n          text-decoration: none;\r\n        }\r\n\r\n        ::slotted(a:hover),\r\n        ::slotted(a:active) {\r\n          color: var(--vscode-textLink-activeForeground);\r\n          text-decoration: underline;\r\n        }\r\n\r\n        ::slotted(code) {\r\n          color: var(--vscode-textPreformat-foreground);\r\n        }\r\n\r\n        ::slotted(p) {\r\n          line-height: 1.4;\r\n          margin-bottom: 9px;\r\n          margin-top: 9px;\r\n        }\r\n\r\n        ::slotted(p:first-child) {\r\n          margin-top: 0;\r\n        }\r\n\r\n        ::slotted(p:last-child) {\r\n          margin-bottom: 0;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormDescription",
          "declaration": {
            "name": "VscodeFormDescription",
            "module": "dist/vscode-form-description.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-group.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormGroup",
          "default": "class VscodeFormGroup extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.variant = 'horizontal';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          --label-right-margin: 14px;\r\n          --label-default-width: 150px;\r\n\r\n          display: block;\r\n          margin: 15px 0;\r\n        }\r\n\r\n        :host([variant='settings-group']) {\r\n          margin: 0;\r\n          padding: 12px 14px 18px;\r\n          max-width: 727px;\r\n        }\r\n\r\n        .wrapper {\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n        }\r\n\r\n        :host([variant='vertical']) .wrapper,\r\n        :host([variant='settings-group']) .wrapper {\r\n          display: block;\r\n        }\r\n\r\n        :host([variant='horizontal']) ::slotted(vscode-checkbox-group),\r\n        :host([variant='horizontal']) ::slotted(vscode-radio-group) {\r\n          width: calc(\r\n            100% -\r\n              calc(\r\n                var(--vsc-inline-label-width, var(--label-default-width)) +\r\n                  var(--label-right-margin)\r\n              )\r\n          );\r\n        }\r\n\r\n        :host([variant='horizontal']) ::slotted(vscode-label) {\r\n          margin-right: var(--label-right-margin);\r\n          text-align: right;\r\n          width: var(--vsc-inline-label-width, var(--label-default-width));\r\n        }\r\n\r\n        :host([variant='settings-group']) ::slotted(vscode-label) {\r\n          height: 18px;\r\n          line-height: 18px;\r\n          margin-bottom: 4px;\r\n          margin-right: 0;\r\n        }\r\n\r\n        ::slotted(vscode-form-helper) {\r\n          margin-left: calc(\r\n            var(--vsc-inline-label-width, var(--label-default-width)) +\r\n              var(--label-right-margin)\r\n          );\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-form-helper),\r\n        :host([variant='settings-group']) ::slotted(vscode-form-helper) {\r\n          display: block;\r\n          margin-left: 0;\r\n        }\r\n\r\n        :host([variant='settings-group']) ::slotted(vscode-form-helper) {\r\n          margin-bottom: 0;\r\n          margin-top: 0;\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-label),\r\n        :host([variant='settings-group']) ::slotted(vscode-label) {\r\n          display: block;\r\n          margin-left: 0;\r\n          text-align: left;\r\n        }\r\n\r\n        :host([variant='settings-group']) ::slotted(vscode-inputbox),\r\n        :host([variant='settings-group']) ::slotted(vscode-single-select),\r\n        :host([variant='settings-group']) ::slotted(vscode-multi-select) {\r\n          margin-top: 9px;\r\n        }\r\n\r\n        ::slotted(vscode-button:first-child) {\r\n          margin-left: calc(\r\n            var(--vsc-inline-label-width, var(--label-default-width)) +\r\n              var(--label-right-margin)\r\n          );\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-button) {\r\n          margin-left: 0;\r\n        }\r\n\r\n        ::slotted(vscode-button) {\r\n          margin-right: 4px;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormGroup",
          "declaration": {
            "name": "VscodeFormGroup",
            "module": "dist/vscode-form-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-helper.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormHelper",
          "default": "class VscodeFormHelper extends VscElement {\r\n    constructor() {\r\n        super();\r\n        applyForegroundRGBA();\r\n    }\r\n    static get styles() {\r\n        const baseStyles = css `\r\n      :host {\r\n        color: var(--vsc-foreground-translucent);\r\n        display: block;\r\n        margin-bottom: 4px;\r\n        margin-top: 4px;\r\n        max-width: 720px;\r\n      }\r\n\r\n      :host([vertical]) {\r\n        margin-left: 0;\r\n      }\r\n    `;\r\n        return [super.styles, baseStyles, formHelperTextStyles];\r\n    }\r\n    render() {\r\n        return html `<slot></slot>`;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormHelper",
          "declaration": {
            "name": "VscodeFormHelper",
            "module": "dist/vscode-form-helper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-item.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormItem",
          "default": "class VscodeFormItem extends VscElement {\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          padding: 12px 0 18px;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormItem",
          "declaration": {
            "name": "VscodeFormItem",
            "module": "dist/vscode-form-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-form-label.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeFormLabel",
          "default": "class VscodeFormLabel extends VscElement {\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          color: var(--vscode-foreground);\r\n          cursor: default;\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: 600;\r\n          line-height: 1.4;\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          user-select: text;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        ::slotted(b) {\r\n          font-weight: 600;\r\n          opacity: 0.9;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormLabel",
          "declaration": {
            "name": "VscodeFormLabel",
            "module": "dist/vscode-form-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-icon.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeIcon",
          "default": "class VscodeIcon extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * @attr name\r\n         * Codicon icon name. @see https://microsoft.github.io/vscode-codicons/dist/codicon.html\r\n         */\r\n        this.name = '';\r\n        /**\r\n         * Icon size in pixels\r\n         */\r\n        this.size = 16;\r\n        /**\r\n         * Enable rotation animation\r\n         */\r\n        this.spin = false;\r\n        /**\r\n         * Animation duration in seconds\r\n         */\r\n        this.spinDuration = 1.5;\r\n        this._actionIcon = false;\r\n    }\r\n    set actionIcon(val) {\r\n        this._actionIcon = val;\r\n        if (val) {\r\n            if (!this.hasAttribute('role')) {\r\n                this.setAttribute('role', 'button');\r\n            }\r\n        }\r\n        else {\r\n            if (this.hasAttribute('role') && this.getAttribute('role') === 'button') {\r\n                this.removeAttribute('role');\r\n            }\r\n        }\r\n    }\r\n    get actionIcon() {\r\n        return this._actionIcon;\r\n    }\r\n    _getStylesheetConfig() {\r\n        const linkElement = document.getElementById('vscode-codicon-stylesheet');\r\n        const href = (linkElement === null || linkElement === void 0 ? void 0 : linkElement.getAttribute('href')) || undefined;\r\n        const nonce = (linkElement === null || linkElement === void 0 ? void 0 : linkElement.getAttribute('nonce')) || undefined;\r\n        return { nonce, href };\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\n        :host {\n          color: var(--vscode-icon-foreground);\n          display: inline-block;\n        }\n\n        .codicon[class*='codicon-'] {\n          display: block;\n        }\n\n        .wrapper {\n          display: block;\n        }\n\n        :host([action-icon]) .wrapper {\n          border-radius: 5px;\n          cursor: pointer;\n          padding: 3px;\n        }\n\n        :host([action-icon]) .wrapper:hover {\n          background-color: var(--vscode-toolbar-hoverBackground);\n        }\n\n        :host([action-icon]) .wrapper:active {\n          background-color: var(--vscode-toolbar-activeBackground);\n        }\n\n        :host([action-icon]:focus) {\n          outline: none;\n        }\n\n        :host([action-icon]:focus-visible) {\n          outline: 1px solid var(--vscode-focusBorder);\n          outline-offset: -1px;\n        }\n\n        @keyframes icon-spin {\n          100% {\n            transform: rotate(360deg);\n          }\n        }\n\n        .spin {\n          animation-name: icon-spin;\n          animation-timing-function: linear;\n          animation-iteration-count: infinite;\n        }\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const { href, nonce } = this._getStylesheetConfig();\r\n        return html `\n      <link\n        rel=\"stylesheet\"\n        href=\"${ifDefined(href)}\"\n        nonce=\"${ifDefined(nonce)}\"\n      />\n      <span class=\"wrapper\">\n        <span\n          class=\"${classMap({\r\n            codicon: true,\r\n            ['codicon-' + this.name]: true,\r\n            spin: this.spin,\r\n        })}\"\n          style=\"${styleMap({\r\n            animationDuration: String(this.spinDuration) + 's',\r\n            fontSize: this.size + 'px',\r\n            height: this.size + 'px',\r\n            width: this.size + 'px',\r\n        })}\"\n        ></span>\n      </span>\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeIcon",
          "declaration": {
            "name": "VscodeIcon",
            "module": "dist/vscode-icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-inputbox.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeInputbox",
          "default": "class VscodeInputbox extends VscElement {\r\n    constructor() {\r\n        super();\r\n        this.label = '';\r\n        this.multiline = false;\r\n        this.message = '';\r\n        /**\r\n         * @deprecated\r\n         * @attr panelInput\r\n         */\r\n        this.panelInput = false;\r\n        /**\r\n         * Text-like input types\r\n         * @attr type\r\n         * @type {\"color\"|\"date\"|\"datetime-local\"|\"email\"|\"file\"|\"month\"|\"number\"|\"password\"|\"tel\"|\"text\"|\"time\"|\"url\"|\"week\"}\r\n         */\r\n        this.type = 'text';\r\n        this.focused = false;\r\n        this.value = '';\r\n        this.placeholder = '';\r\n        this.lines = 2;\r\n        this.maxLines = 5;\r\n        this.min = undefined;\r\n        this.minLength = undefined;\r\n        this.max = undefined;\r\n        this.maxLength = undefined;\r\n        this.multiple = false;\r\n        this.readonly = false;\r\n        this.step = undefined;\r\n        this._textareaHeight = 0;\r\n        this._textareaDefaultCursor = false;\r\n        this.onInputFocus = () => {\r\n            this.focused = true;\r\n        };\r\n        this.onInputBlur = () => {\r\n            this.focused = false;\r\n        };\r\n        this.onInputInput = (event) => {\r\n            const eventTarget = event.target;\r\n            this.value = eventTarget.value;\r\n            this.dispatchEvent(new CustomEvent('vsc-input', {\r\n                detail: eventTarget.value,\r\n                bubbles: true,\r\n                composed: true,\r\n            }));\r\n            this.resizeTextareaIfRequired();\r\n        };\r\n        this.onInputChange = (event) => {\r\n            const eventTarget = event.target;\r\n            this.dispatchEvent(new CustomEvent('vsc-change', {\r\n                detail: eventTarget.value,\r\n                bubbles: true,\r\n                composed: true,\r\n            }));\r\n        };\r\n        this.onTextareaMouseMove = (event) => {\r\n            const br = this.getBoundingClientRect();\r\n            const x = event.clientX;\r\n            const SCROLLBAR_WIDTH = 10;\r\n            this._textareaDefaultCursor =\r\n                x <= br.left + br.width &&\r\n                    x >= br.left + br.width - SCROLLBAR_WIDTH - BORDER_WIDTH * 2;\r\n            this.requestUpdate();\r\n        };\r\n        this.resizeTextareaIfRequired = () => {\r\n            if (!this._measurerEl || !this.multiline) {\r\n                return;\r\n            }\r\n            const { height } = this._measurerEl.getBoundingClientRect();\r\n            if (height === 0) {\r\n                this._textareaHeight = calcHeightFromLines(this.lines);\r\n                this._measurerEl.style.minHeight = `${calcHeightFromLines(this.lines)}px`;\r\n            }\r\n            else {\r\n                this._textareaHeight = height;\r\n            }\r\n        };\r\n        this._severity = Severity.DEFAULT;\r\n    }\r\n    set severity(val) {\r\n        const oldVal = this._severity;\r\n        switch (val) {\r\n            case Severity.INFO:\r\n            case Severity.WARNING:\r\n            case Severity.ERROR:\r\n                this._severity = val;\r\n                break;\r\n            default:\r\n                this._severity = Severity.DEFAULT;\r\n        }\r\n        this.requestUpdate('messageSeverity', oldVal);\r\n    }\r\n    get severity() {\r\n        return this._severity;\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.resizeTextareaIfRequired();\r\n    }\r\n    updated(changedProperties) {\r\n        if (changedProperties.has('value')) {\r\n            this.resizeTextareaIfRequired();\r\n        }\r\n    }\r\n    get focusElement() {\r\n        return this._inputElement;\r\n    }\r\n    focus() {\r\n        this._inputElement.focus();\r\n    }\r\n    toString() {\r\n        return '[object VscodeInputbox]';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: inline-block;\r\n          max-width: 100%;\r\n          width: 320px;\r\n        }\r\n\r\n        :host([size-variant='narrow']) {\r\n          width: 200px;\r\n        }\r\n\r\n        :host([size-variant='wide']) {\r\n          width: 500px;\r\n        }\r\n\r\n        .container {\r\n          position: relative;\r\n        }\r\n\r\n        .cursor-default {\r\n          cursor: default;\r\n        }\r\n\r\n        textarea {\r\n          left: 0;\r\n          overflow: visible;\r\n          position: absolute;\r\n          resize: none;\r\n          top: 0;\r\n        }\r\n\r\n        .content-measurer::-webkit-scrollbar,\r\n        textarea::-webkit-scrollbar {\r\n          cursor: default;\r\n          width: 10px;\r\n        }\r\n\r\n        .content-measurer::-webkit-scrollbar-button,\r\n        textarea::-webkit-scrollbar-button {\r\n          display: none;\r\n        }\r\n\r\n        textarea::-webkit-scrollbar-track {\r\n          background-color: transparent;\r\n          width: 10px;\r\n        }\r\n\r\n        .content-measurer::-webkit-scrollbar-track {\r\n          width: 10px;\r\n        }\r\n\r\n        textarea::-webkit-scrollbar-thumb {\r\n          background-color: transparent;\r\n        }\r\n\r\n        textarea:hover::-webkit-scrollbar-thumb {\r\n          background-color: var(--vscode-scrollbarSlider-background);\r\n        }\r\n\r\n        textarea:hover::-webkit-scrollbar-thumb:hover {\r\n          background-color: var(--vscode-scrollbarSlider-hoverBackground);\r\n        }\r\n\r\n        textarea:hover::-webkit-scrollbar-thumb:active {\r\n          background-color: var(--vscode-scrollbarSlider-activeBackground);\r\n        }\r\n\r\n        input,\r\n        textarea {\r\n          background-color: var(--vscode-input-background);\r\n          border-color: var(\r\n            --vscode-settings-textInputBorder,\r\n            rgba(0, 0, 0, 0)\r\n          );\r\n          border-style: solid;\r\n          border-width: 1px;\r\n          box-sizing: border-box;\r\n          color: var(--vscode-input-foreground);\r\n          display: block;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          line-height: ${INPUT_LINE_HEIGHT_RATIO};\r\n          outline: none;\r\n          padding: 4px;\r\n          width: 100%;\r\n        }\r\n\r\n        input::placeholder,\r\n        textarea::placeholder {\r\n          color: var(--vscode-input-placeholderForeground);\r\n        }\r\n\r\n        input::selection,\r\n        textarea::selection {\r\n          background-color: var(--vscode-editor-selectionBackground);\r\n        }\r\n\r\n        input:focus,\r\n        textarea:focus {\r\n          border-color: var(--vscode-focusBorder);\r\n        }\r\n\r\n        .container.panel-input input,\r\n        .container.panel-input textarea {\r\n          border-color: var(--vscode-panelInput-border);\r\n        }\r\n\r\n        .container.default input,\r\n        .container.default textarea,\r\n        .container.panel-input.default input,\r\n        .container.panel-input.default textarea {\r\n          border-color: var(--vscode-focusBorder);\r\n        }\r\n\r\n        .container.info input,\r\n        .container.info textarea,\r\n        .container.panel-input.info input,\r\n        .container.panel-input.info textarea {\r\n          border-color: var(--vscode-inputValidation-infoBorder);\r\n        }\r\n\r\n        .container.warning input,\r\n        .container.warning textarea,\r\n        .container.panel-input.warning input,\r\n        .container.panel-input.warning textarea {\r\n          border-color: var(--vscode-inputValidation-warningBorder);\r\n        }\r\n\r\n        .container.error input,\r\n        .container.error textarea,\r\n        .container.panel-input.error input,\r\n        .container.panel-input.error textarea {\r\n          border-color: var(--vscode-inputValidation-errorBorder);\r\n        }\r\n\r\n        .message {\r\n          border-style: solid;\r\n          border-width: 1px;\r\n          box-sizing: border-box;\r\n          display: none;\r\n          font-size: 12px;\r\n          line-height: 17px;\r\n          margin-top: -1px;\r\n          overflow: hidden;\r\n          padding: 0.4em;\r\n          position: absolute;\r\n          user-select: none;\r\n          top: 100%;\r\n          text-align: left;\r\n          width: 100%;\r\n          word-wrap: break-word;\r\n        }\r\n\r\n        .focused:not(.default) .message {\r\n          display: block;\r\n        }\r\n\r\n        .message.default {\r\n          background-color: var(--vscode-editor-background);\r\n          border-color: var(--vscode-focusBorder);\r\n        }\r\n\r\n        .message.info {\r\n          background-color: var(--vscode-inputValidation-infoBackground);\r\n          border-color: var(--vscode-inputValidation-infoBorder);\r\n        }\r\n\r\n        .message.warning {\r\n          background-color: var(--vscode-inputValidation-warningBackground);\r\n          border-color: var(--vscode-inputValidation-warningBorder);\r\n        }\r\n\r\n        .message.error {\r\n          background-color: var(--vscode-inputValidation-errorBackground);\r\n          border-color: var(--vscode-inputValidation-errorBorder);\r\n        }\r\n\r\n        .content-measurer {\r\n          background-color: green;\r\n          border: 1px solid transparent;\r\n          box-sizing: border-box;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          left: 0;\r\n          line-height: ${INPUT_LINE_HEIGHT_RATIO};\r\n          overflow: auto;\r\n          padding: 4px;\r\n          text-align: left;\r\n          top: 0;\r\n          visibility: hidden;\r\n          word-break: break-all;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const minHeight = calcHeightFromLines(this.lines);\r\n        const maxHeight = calcHeightFromLines(this.maxLines);\r\n        const measurerStyles = styleMap({\r\n            minHeight: `${minHeight}px`,\r\n            maxHeight: `${maxHeight}px`,\r\n        });\r\n        const textareaStyles = styleMap({\r\n            height: `${this._textareaHeight}px`,\r\n        });\r\n        const containerClasses = classMap({\r\n            container: true,\r\n            severity: this.severity !== Severity.DEFAULT,\r\n            focused: this.focused,\r\n        });\r\n        const measurerContent = this.value\r\n            ? this.value\r\n                .split('\\n')\r\n                .map((line) => line ? html `<div>${line}</div>` : html `<div>&nbsp;</div>`)\r\n            : html `&nbsp;`;\r\n        const textarea = html `\r\n      <textarea\r\n        @focus=\"${this.onInputFocus}\"\r\n        @blur=\"${this.onInputBlur}\"\r\n        @input=\"${this.onInputInput}\"\r\n        @change=\"${this.onInputChange}\"\r\n        @mousemove=\"${this.onTextareaMouseMove}\"\r\n        class=\"${classMap({\r\n            'cursor-default': this._textareaDefaultCursor,\r\n            'input-element': true,\r\n        })}\"\r\n        minlength=\"${ifDefined(this.minLength)}\"\r\n        maxlength=\"${ifDefined(this.maxLength)}\"\r\n        placeholder=\"${this.placeholder}\"\r\n        ?readonly=\"${this.readonly}\"\r\n        style=\"${textareaStyles}\"\r\n        .value=\"${this.value}\"\r\n      ></textarea>\r\n      <div class=\"content-measurer\" style=\"${measurerStyles}\">\r\n        ${measurerContent}\r\n      </div>\r\n    `;\r\n        const input = html `\r\n      <input\r\n        type=\"${this.type}\"\r\n        @focus=\"${this.onInputFocus}\"\r\n        @blur=\"${this.onInputBlur}\"\r\n        @input=\"${this.onInputInput}\"\r\n        @change=\"${this.onInputChange}\"\r\n        placeholder=\"${this.placeholder}\"\r\n        min=\"${ifDefined(this.min)}\"\r\n        minlength=\"${ifDefined(this.minLength)}\"\r\n        max=\"${ifDefined(this.max)}\"\r\n        maxlength=\"${ifDefined(this.maxLength)}\"\r\n        ?multiple=\"${this.multiple}\"\r\n        ?readonly=\"${this.readonly}\"\r\n        step=\"${ifDefined(this.step)}\"\r\n        .value=\"${this.value}\"\r\n        class=\"input-element\"\r\n      />\r\n    `;\r\n        const message = html `\r\n      <div class=\"message ${this.severity}\">${this.message}</div>\r\n    `;\r\n        return html `\r\n      <div class=\"${containerClasses}\">\r\n        <div class=\"helper\"><slot name=\"helper\"></slot></div>\r\n        <div class=\"input-wrapper\">\r\n          ${this.multiline ? textarea : input} ${this.message ? message : ''}\r\n        </div>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeInputbox",
          "declaration": {
            "name": "VscodeInputbox",
            "module": "dist/vscode-inputbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-label.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeLabel",
          "default": "class VscodeLabel extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.for = '';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          cursor: default;\r\n          display: block;\r\n        }\r\n\r\n        .wrapper {\r\n          color: var(--vscode--settings-headerForeground);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: 600;\r\n          line-height: ${INPUT_LINE_HEIGHT_RATIO};\r\n          padding: 5px 0;\r\n        }\r\n\r\n        :host-context(vscode-form-group[variant='settings-group']) .wrapper {\r\n          line-height: 18px;\r\n          padding: 0;\r\n        }\r\n\r\n        ::slotted(.normal) {\r\n          font-weight: normal;\r\n        }\r\n\r\n        ::slotted(.lightened) {\r\n          color: var(--vscode-foreground);\r\n          opacity: 0.9;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    _handleClick() {\r\n        let target;\r\n        if (this.for) {\r\n            const root = this.getRootNode({ composed: false });\r\n            if (root) {\r\n                target = root.querySelector(`#${this.for}`);\r\n                if (target && 'focus' in target) {\r\n                    target.focus();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\" @click=${this._handleClick}><slot></slot></div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeLabel",
          "declaration": {
            "name": "VscodeLabel",
            "module": "dist/vscode-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-multi-select.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeMultiSelect",
          "default": "class VscodeMultiSelect extends VscodeSelectBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._multiple = true;\r\n    }\r\n    set selectedIndexes(val) {\r\n        this._selectedIndexes = val;\r\n    }\r\n    get selectedIndexes() {\r\n        return this._selectedIndexes;\r\n    }\r\n    set value(val) {\r\n        this._values = val;\r\n        const valMap = {};\r\n        this._options.forEach(({ value }, index) => {\r\n            valMap[value] = index;\r\n        });\r\n        this._selectedIndexes = [];\r\n        val.forEach((v) => {\r\n            if (valMap[v]) {\r\n                this._selectedIndexes.push(valMap[v]);\r\n            }\r\n        });\r\n    }\r\n    get value() {\r\n        return this._values;\r\n    }\r\n    _onOptionClick(ev) {\r\n        const composedPath = ev.composedPath();\r\n        const optEl = composedPath.find((et) => {\r\n            if ('matches' in et) {\r\n                return et.matches('li.option');\r\n            }\r\n            return false;\r\n        });\r\n        if (!optEl) {\r\n            return;\r\n        }\r\n        const index = Number(optEl.dataset.index);\r\n        if (this._options[index]) {\r\n            this._options[index].selected = !this._options[index].selected;\r\n        }\r\n        this._selectedIndexes = [];\r\n        this._values = [];\r\n        this._options.forEach((op) => {\r\n            if (op.selected) {\r\n                this._selectedIndexes.push(op.index);\r\n                this._values.push(op.value);\r\n            }\r\n        });\r\n        this._dispatchChangeEvent();\r\n    }\r\n    _onMultiAcceptClick() {\r\n        this._toggleDropdown(false);\r\n    }\r\n    _onMultiDeselectAllClick() {\r\n        this._selectedIndexes = [];\r\n        this._values = [];\r\n        this._options = this._options.map((op) => ({ ...op, selected: false }));\r\n        this._dispatchChangeEvent();\r\n    }\r\n    _onMultiSelectAllClick() {\r\n        this._selectedIndexes = [];\r\n        this._values = [];\r\n        this._options = this._options.map((op) => ({ ...op, selected: true }));\r\n        this._options.forEach((op, index) => {\r\n            this._selectedIndexes.push(index);\r\n            this._values.push(op.value);\r\n            this._dispatchChangeEvent();\r\n        });\r\n    }\r\n    _renderLabel() {\r\n        switch (this._selectedIndexes.length) {\r\n            case 0:\r\n                return html `<span class=\"select-face-badge no-item\"\r\n          >No items selected</span\r\n        >`;\r\n            case 1:\r\n                return html `<span class=\"select-face-badge\">1 item selected</span>`;\r\n            default:\r\n                return html `<span class=\"select-face-badge\"\r\n          >${this._selectedIndexes.length} items selected</span\r\n        >`;\r\n        }\r\n    }\r\n    _renderSelectFace() {\r\n        return html `\r\n      <div class=\"select-face multiselect\" @click=\"${this._onFaceClick}\">\r\n        ${this._renderLabel()} ${chevronDownIcon}\r\n      </div>\r\n    `;\r\n    }\r\n    _renderComboboxFace() {\r\n        const inputVal = this._selectedIndex > -1 ? this._options[this._selectedIndex].label : '';\r\n        return html `\r\n      <div class=\"combobox-face\">\r\n        ${this._renderLabel()}\r\n        <input\r\n          class=\"combobox-input\"\r\n          spellcheck=\"false\"\r\n          type=\"text\"\r\n          .value=\"${inputVal}\"\r\n          @focus=\"${this._onComboboxInputFocus}\"\r\n          @input=\"${this._onComboboxInputInput}\"\r\n        />\r\n        <button\r\n          class=\"combobox-button\"\r\n          type=\"button\"\r\n          @click=\"${this._onComboboxButtonClick}\"\r\n          @keydown=\"${this._onComboboxButtonKeyDown}\"\r\n        >\r\n          ${chevronDownIcon}\r\n        </button>\r\n      </div>\r\n    `;\r\n    }\r\n    _renderOptions() {\r\n        const list = this.combobox ? this._filteredOptions : this._options;\r\n        return html `\r\n      <ul\r\n        class=\"options\"\r\n        @click=\"${this._onOptionClick}\"\r\n        @mouseover=\"${this._onOptionMouseOver}\"\r\n      >\r\n        ${repeat(list, (op) => op.index, (op, index) => {\r\n            const selected = this._selectedIndexes.includes(op.index);\r\n            const optionClasses = classMap({\r\n                active: index === this._activeIndex,\r\n                option: true,\r\n                selected,\r\n            });\r\n            const checkboxClasses = classMap({\r\n                'checkbox-icon': true,\r\n                checked: selected,\r\n            });\r\n            return html `\r\n              <li\r\n                class=\"${optionClasses}\"\r\n                data-index=\"${op.index}\"\r\n                data-filtered-index=\"${index}\"\r\n              >\r\n                <span class=\"${checkboxClasses}\"></span>\r\n                <span class=\"option-label\">${op.label}</span>\r\n              </li>\r\n            `;\r\n        })}\r\n      </ul>\r\n    `;\r\n    }\r\n    _renderDropdownControls() {\r\n        return html `\r\n      <div class=\"dropdown-controls\">\r\n        <button\r\n          type=\"button\"\r\n          @click=\"${this._onMultiSelectAllClick}\"\r\n          title=\"Select all\"\r\n          class=\"action-icon\"\r\n        >\r\n          <vscode-icon name=\"checklist\"></vscode-icon>\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          @click=\"${this._onMultiDeselectAllClick}\"\r\n          title=\"Deselect all\"\r\n          class=\"action-icon\"\r\n        >\r\n          <vscode-icon name=\"clear-all\"></vscode-icon>\r\n        </button>\r\n        <vscode-button @click=\"${this._onMultiAcceptClick}\">OK</vscode-button>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeMultiSelect",
          "declaration": {
            "name": "VscodeMultiSelect",
            "module": "dist/vscode-multi-select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-option.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeOption",
          "default": "class VscodeOption extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.value = '';\r\n        this.description = '';\r\n        this.selected = false;\r\n        this.disabled = false;\r\n    }\r\n    static get styles() {\r\n        return [super.styles];\r\n    }\r\n    render() {\r\n        return html `<slot></slot>`;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeOption",
          "declaration": {
            "name": "VscodeOption",
            "module": "dist/vscode-option.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-radio-group.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeRadioGroup",
          "default": "class VscodeRadioGroup extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.variant = 'horizontal';\r\n        this.inline = false;\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        .wrapper {\r\n          display: flex;\r\n          flex-wrap: wrap;\r\n        }\r\n\r\n        :host([variant='vertical']) .wrapper {\r\n          display: block;\r\n        }\r\n\r\n        ::slotted(vscode-radio) {\r\n          margin-right: 20px;\r\n        }\r\n\r\n        ::slotted(vscode-radio:last-child) {\r\n          margin-right: 0;\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-radio) {\r\n          display: block;\r\n          margin-bottom: 15px;\r\n        }\r\n\r\n        :host([variant='vertical']) ::slotted(vscode-radio:last-child) {\r\n          margin-bottom: 0;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeRadioGroup",
          "declaration": {
            "name": "VscodeRadioGroup",
            "module": "dist/vscode-radio-group.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-radio.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeRadio",
          "default": "class VscodeRadio extends FormButtonWidgetBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.label = '';\r\n        this.name = '';\r\n        this.value = '';\r\n        this.disabled = false;\r\n        this._checked = false;\r\n        this.isSlotEmpty = true;\r\n    }\r\n    set checked(val) {\r\n        this._checked = val;\r\n    }\r\n    get checked() {\r\n        return this._checked;\r\n    }\r\n    _checkButton() {\r\n        const root = this.getRootNode({ composed: true });\r\n        if (!root) {\r\n            return;\r\n        }\r\n        const radios = root.querySelectorAll(`vscode-radio[name=\"${this.name}\"]`);\r\n        this._checked = true;\r\n        radios.forEach((r) => {\r\n            if (r !== this) {\r\n                r.checked = false;\r\n            }\r\n        });\r\n    }\r\n    _handleClick() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        this._checkButton();\r\n        this.dispatchEvent(new CustomEvent('vsc-change', {\r\n            detail: {\r\n                checked: this.checked,\r\n                label: this.label,\r\n                value: this.value,\r\n            },\r\n            bubbles: true,\r\n            composed: true,\r\n        }));\r\n    }\r\n    _handleKeyDown(event) {\r\n        if (!this.disabled && (event.key === 'Enter' || event.key === ' ')) {\r\n            this.checked = true;\r\n        }\r\n    }\r\n    _handleSlotChange() {\r\n        this.isSlotEmpty = this.innerHTML === '';\r\n    }\r\n    static get styles() {\r\n        return [super.styles, baseStyles, radioStyles, formHelperTextStyles];\r\n    }\r\n    render() {\r\n        const isLabelEmpty = !this.label && this.isSlotEmpty;\r\n        const iconClasses = classMap({\r\n            icon: true,\r\n            checked: this.checked,\r\n            'before-empty-label': isLabelEmpty,\r\n        });\r\n        const labelInnerClasses = classMap({\r\n            'label-inner': true,\r\n            empty: isLabelEmpty,\r\n        });\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <input\r\n          id=\"${this._uid}\"\r\n          class=\"radio\"\r\n          type=\"checkbox\"\r\n          ?checked=\"${this.checked}\"\r\n          value=\"${this.value}\"\r\n          tabindex=\"-1\"\r\n        />\r\n        <div class=\"${iconClasses}\"></div>\r\n        <label for=\"${this._uid}\" class=\"label\" @click=\"${this._handleClick}\">\r\n          <span class=\"${labelInnerClasses}\">\r\n            <slot @slotchange=\"${this._handleSlotChange}\">${this.label}</slot>\r\n          </span>\r\n        </label>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeRadio",
          "declaration": {
            "name": "VscodeRadio",
            "module": "dist/vscode-radio.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-scrollable.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeScrollable",
          "default": "class VscodeScrollable extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.shadow = true;\r\n        this.scrolled = false;\r\n        this._isDragging = false;\r\n        this._thumbHeight = 0;\r\n        this._thumbY = 0;\r\n        this._thumbVisible = false;\r\n        this._thumbFade = false;\r\n        this._thumbActive = false;\r\n        this._scrollThumbStartY = 0;\r\n        this._mouseStartY = 0;\r\n        this._scrollbarVisible = true;\r\n        this._scrollbarTrackZ = 0;\r\n        this._resizeObserverCallbackBound = this._resizeObserverCallback.bind(this);\r\n        this._onScrollThumbMouseMoveBound = this._onScrollThumbMouseMove.bind(this);\r\n        this._onScrollThumbMouseUpBound = this._onScrollThumbMouseUp.bind(this);\r\n        this._onComponentMouseOverBound = this._onComponentMouseOver.bind(this);\r\n        this._onComponentMouseOutBound = this._onComponentMouseOut.bind(this);\r\n    }\r\n    set scrollPos(val) {\r\n        this._scrollableContainer.scrollTop = val;\r\n    }\r\n    get scrollPos() {\r\n        return this._scrollableContainer.scrollTop;\r\n    }\r\n    get scrollMax() {\r\n        return this._scrollableContainer.scrollHeight;\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this._resizeObserver = new ResizeObserver(this._resizeObserverCallbackBound);\r\n        this.requestUpdate();\r\n        this.updateComplete.then(() => {\r\n            this._scrollableContainer.addEventListener('scroll', this._onScrollableContainerScroll.bind(this));\r\n            this._resizeObserver.observe(this._contentElement);\r\n        });\r\n        this.addEventListener('mouseover', this._onComponentMouseOverBound);\r\n        this.addEventListener('mouseout', this._onComponentMouseOutBound);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this._resizeObserver.unobserve(this);\r\n        this._resizeObserver.disconnect();\r\n        this.removeEventListener('mouseover', this._onComponentMouseOverBound);\r\n        this.removeEventListener('mouseout', this._onComponentMouseOutBound);\r\n    }\r\n    _resizeObserverCallback() {\r\n        this._updateScrollbar();\r\n    }\r\n    _updateScrollbar() {\r\n        const compCr = this.getBoundingClientRect();\r\n        const contentCr = this._contentElement.getBoundingClientRect();\r\n        if (compCr.height >= contentCr.height) {\r\n            this._scrollbarVisible = false;\r\n        }\r\n        else {\r\n            this._scrollbarVisible = true;\r\n            this._thumbHeight = compCr.height * (compCr.height / contentCr.height);\r\n        }\r\n        this.requestUpdate();\r\n    }\r\n    _zIndexFix() {\r\n        let highestZ = 0;\r\n        this._assignedNodes.forEach((n) => {\r\n            if ('style' in n) {\r\n                const computedZIndex = window.getComputedStyle(n).zIndex;\r\n                const isNumber = /([0-9-])+/g.test(computedZIndex);\r\n                if (isNumber) {\r\n                    highestZ =\r\n                        Number(computedZIndex) > highestZ\r\n                            ? Number(computedZIndex)\r\n                            : highestZ;\r\n                }\r\n            }\r\n        });\r\n        this._scrollbarTrackZ = highestZ + 1;\r\n        this.requestUpdate();\r\n    }\r\n    _onSlotChange() {\r\n        this._updateScrollbar();\r\n        this._zIndexFix();\r\n    }\r\n    _onScrollThumbMouseDown(event) {\r\n        const cmpCr = this.getBoundingClientRect();\r\n        const thCr = this._scrollThumbElement.getBoundingClientRect();\r\n        this._mouseStartY = event.screenY;\r\n        this._scrollThumbStartY = thCr.top - cmpCr.top;\r\n        this._isDragging = true;\r\n        this._thumbActive = true;\r\n        document.addEventListener('mousemove', this._onScrollThumbMouseMoveBound);\r\n        document.addEventListener('mouseup', this._onScrollThumbMouseUpBound);\r\n    }\r\n    _onScrollThumbMouseMove(event) {\r\n        const predictedPos = this._scrollThumbStartY + (event.screenY - this._mouseStartY);\r\n        let nextPos = 0;\r\n        const cmpH = this.getBoundingClientRect().height;\r\n        const thumbH = this._scrollThumbElement.getBoundingClientRect().height;\r\n        const contentH = this._contentElement.getBoundingClientRect().height;\r\n        if (predictedPos < 0) {\r\n            nextPos = 0;\r\n        }\r\n        else if (predictedPos > cmpH - thumbH) {\r\n            nextPos = cmpH - thumbH;\r\n        }\r\n        else {\r\n            nextPos = predictedPos;\r\n        }\r\n        this._thumbY = nextPos;\r\n        this._scrollableContainer.scrollTop =\r\n            (nextPos / (cmpH - thumbH)) * (contentH - cmpH);\r\n    }\r\n    _onScrollThumbMouseUp(event) {\r\n        this._isDragging = false;\r\n        this._thumbActive = false;\r\n        const cr = this.getBoundingClientRect();\r\n        const { x, y, width, height } = cr;\r\n        const { pageX, pageY } = event;\r\n        if (pageX > x + width || pageX < x || pageY > y + height || pageY < y) {\r\n            this._thumbFade = true;\r\n            this._thumbVisible = false;\r\n        }\r\n        document.removeEventListener('mousemove', this._onScrollThumbMouseMoveBound);\r\n        document.removeEventListener('mouseup', this._onScrollThumbMouseUpBound);\r\n    }\r\n    _onScrollableContainerScroll() {\r\n        const scrollTop = this._scrollableContainer.scrollTop;\r\n        this.scrolled = scrollTop > 0;\r\n        const cmpH = this.getBoundingClientRect().height;\r\n        const thumbH = this._scrollThumbElement.getBoundingClientRect().height;\r\n        const contentH = this._contentElement.getBoundingClientRect().height;\r\n        const overflown = contentH - cmpH;\r\n        const ratio = scrollTop / overflown;\r\n        this._thumbY = ratio * (cmpH - thumbH);\r\n    }\r\n    _onComponentMouseOver() {\r\n        this._thumbVisible = true;\r\n        this._thumbFade = false;\r\n    }\r\n    _onComponentMouseOut() {\r\n        if (!this._thumbActive) {\r\n            this._thumbVisible = false;\r\n            this._thumbFade = true;\r\n        }\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          position: relative;\r\n        }\r\n\r\n        .scrollable-container {\r\n          height: 100%;\r\n          overflow: auto;\r\n        }\r\n\r\n        .scrollable-container::-webkit-scrollbar {\r\n          cursor: default;\r\n          width: 0;\r\n        }\r\n\r\n        .shadow {\r\n          box-shadow: var(--vscode-scrollbar-shadow) 0 6px 6px -6px inset;\r\n          display: none;\r\n          height: 3px;\r\n          left: 0;\r\n          pointer-events: none;\r\n          position: absolute;\r\n          top: 0;\r\n          z-index: 1;\r\n          width: 100%;\r\n        }\r\n\r\n        .shadow.visible {\r\n          display: block;\r\n        }\r\n\r\n        .scrollbar-track {\r\n          height: 100%;\r\n          position: absolute;\r\n          right: 0;\r\n          top: 0;\r\n          width: 10px;\r\n          z-index: 100;\r\n        }\r\n\r\n        .scrollbar-track.hidden {\r\n          display: none;\r\n        }\r\n\r\n        .scrollbar-thumb {\r\n          background-color: transparent;\r\n          min-height: var(--min-thumb-height, 20px);\r\n          opacity: 0;\r\n          position: absolute;\r\n          right: 0;\r\n          width: 10px;\r\n        }\r\n\r\n        .scrollbar-thumb.visible {\r\n          background-color: var(--vscode-scrollbarSlider-background);\r\n          opacity: 1;\r\n          transition: opacity 100ms;\r\n        }\r\n\r\n        .scrollbar-thumb.fade {\r\n          background-color: var(--vscode-scrollbarSlider-background);\r\n          opacity: 0;\r\n          transition: opacity 800ms;\r\n        }\r\n\r\n        .scrollbar-thumb.visible:hover {\r\n          background-color: var(--vscode-scrollbarSlider-hoverBackground);\r\n        }\r\n\r\n        .scrollbar-thumb.visible.active,\r\n        .scrollbar-thumb.visible.active:hover {\r\n          background-color: var(--vscode-scrollbarSlider-activeBackground);\r\n        }\r\n\r\n        .content {\r\n          overflow: hidden;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div\r\n        class=\"scrollable-container\"\r\n        style=\"${styleMap({\r\n            'user-select': this._isDragging ? 'none' : 'auto',\r\n        })}\"\r\n      >\r\n        <div class=\"${classMap({ shadow: true, visible: this.scrolled })}\"></div>\r\n        <div\r\n          class=\"${classMap({\r\n            'scrollbar-track': true,\r\n            hidden: !this._scrollbarVisible,\r\n        })}\"\r\n          style=\"${styleMap({\r\n            'z-index': String(this._scrollbarTrackZ),\r\n        })}\"\r\n        >\r\n          <div\r\n            class=\"${classMap({\r\n            'scrollbar-thumb': true,\r\n            visible: this._thumbVisible,\r\n            fade: this._thumbFade,\r\n            active: this._thumbActive,\r\n        })}\"\r\n            style=\"${styleMap({\r\n            height: `${this._thumbHeight}px`,\r\n            top: `${this._thumbY}px`,\r\n        })}\"\r\n            @mousedown=${this._onScrollThumbMouseDown}\r\n          ></div>\r\n        </div>\r\n        <div class=\"content\">\r\n          <slot @slotchange=\"${this._onSlotChange}\"></slot>\r\n        </div>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeScrollable",
          "declaration": {
            "name": "VscodeScrollable",
            "module": "dist/vscode-scrollable.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-single-select.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeSingleSelect",
          "default": "class VscodeSingleSelect extends VscodeSelectBase {\r\n    constructor() {\r\n        super();\r\n        this.role = 'listbox';\r\n        this._labelText = '';\r\n        this._multiple = false;\r\n    }\r\n    set selectedIndex(val) {\r\n        this._selectedIndex = val;\r\n        this._value = this._options[this._selectedIndex]\r\n            ? this._options[this._selectedIndex].value\r\n            : '';\r\n        this._labelText = this._options[this._selectedIndex]\r\n            ? this._options[this._selectedIndex].label\r\n            : '';\r\n    }\r\n    get selectedIndex() {\r\n        return this._selectedIndex;\r\n    }\r\n    set value(val) {\r\n        if (this._options[this._selectedIndex]) {\r\n            this._options[this._selectedIndex].selected = false;\r\n        }\r\n        this._selectedIndex = this._options.findIndex((op) => op.value === val);\r\n        if (this._selectedIndex > -1) {\r\n            this._options[this._selectedIndex].selected = true;\r\n            this._labelText = this._options[this._selectedIndex].label;\r\n            this._value = val;\r\n        }\r\n        else {\r\n            this._labelText = '';\r\n            this._value = '';\r\n        }\r\n    }\r\n    get value() {\r\n        var _a;\r\n        if (this._options[this._selectedIndex]) {\r\n            return (_a = this._options[this._selectedIndex]) === null || _a === void 0 ? void 0 : _a.value;\r\n        }\r\n        return '';\r\n    }\r\n    updateInputValue() {\r\n        if (!this.combobox) {\r\n            return;\r\n        }\r\n        const input = this.renderRoot.querySelector('.combobox-input');\r\n        if (input) {\r\n            input.value = this._options[this._selectedIndex]\r\n                ? this._options[this._selectedIndex].label\r\n                : '';\r\n        }\r\n    }\r\n    _onSlotChange() {\r\n        super._onSlotChange();\r\n        if (this._selectedIndex > -1) {\r\n            this._labelText = this._options[this._selectedIndex].label;\r\n        }\r\n    }\r\n    _onArrowUpKeyDown() {\r\n        super._onArrowUpKeyDown();\r\n        if (this._showDropdown || this._selectedIndex <= 0) {\r\n            return;\r\n        }\r\n        this._filterPattern = '';\r\n        this._selectedIndex -= 1;\r\n        this._activeIndex = this._selectedIndex;\r\n        this._labelText = this._options[this._selectedIndex].label;\r\n        this._value = this._options[this._selectedIndex].value;\r\n        this._dispatchChangeEvent();\r\n    }\r\n    _onArrowDownKeyDown() {\r\n        super._onArrowDownKeyDown();\r\n        if (this._showDropdown || this._selectedIndex >= this._options.length) {\r\n            return;\r\n        }\r\n        this._filterPattern = '';\r\n        this._selectedIndex += 1;\r\n        this._activeIndex = this._selectedIndex;\r\n        this._labelText = this._options[this._selectedIndex].label;\r\n        this._value = this._options[this._selectedIndex].value;\r\n        this._dispatchChangeEvent();\r\n    }\r\n    _onEnterKeyDown() {\r\n        super._onEnterKeyDown();\r\n        if (this._selectedIndex > -1) {\r\n            this._labelText = this._options[this._selectedIndex].label;\r\n        }\r\n        this.updateInputValue();\r\n    }\r\n    _onOptionClick(ev) {\r\n        const composedPath = ev.composedPath();\r\n        const optEl = composedPath.find((et) => { var _a; return (_a = et) === null || _a === void 0 ? void 0 : _a.matches('li.option'); });\r\n        if (!optEl || optEl.matches('.disabled')) {\r\n            return;\r\n        }\r\n        this._selectedIndex = Number(optEl.dataset.index);\r\n        this._value = this._options[this._selectedIndex].value;\r\n        if (this._selectedIndex > -1) {\r\n            this._labelText = this._options[this._selectedIndex].label;\r\n        }\r\n        this._toggleDropdown(false);\r\n        this._dispatchChangeEvent();\r\n    }\r\n    _renderLabel() {\r\n        const labelContent = this._labelText || html `<span class=\"empty-label-placeholder\"></span>`;\r\n        return html `<span class=\"text\">${labelContent}</span>`;\r\n    }\r\n    _renderSelectFace() {\r\n        return html `\r\n      <div class=\"select-face\" @click=\"${this._onFaceClick}\">\r\n        ${this._renderLabel()} ${chevronDownIcon}\r\n      </div>\r\n    `;\r\n    }\r\n    _renderComboboxFace() {\r\n        const inputVal = this._selectedIndex > -1 ? this._options[this._selectedIndex].label : '';\r\n        return html `\r\n      <div class=\"combobox-face\">\r\n        <input\r\n          class=\"combobox-input\"\r\n          spellcheck=\"false\"\r\n          type=\"text\"\r\n          .value=\"${inputVal}\"\r\n          @focus=\"${this._onComboboxInputFocus}\"\r\n          @input=\"${this._onComboboxInputInput}\"\r\n        />\r\n        <button\r\n          class=\"combobox-button\"\r\n          type=\"button\"\r\n          @click=\"${this._onComboboxButtonClick}\"\r\n          @keydown=\"${this._onComboboxButtonKeyDown}\"\r\n        >\r\n          ${chevronDownIcon}\r\n        </button>\r\n      </div>\r\n    `;\r\n    }\r\n    _renderOptions() {\r\n        const list = this.combobox ? this._filteredOptions : this._options;\r\n        const options = list.map((op, index) => {\r\n            const classes = classMap({\r\n                option: true,\r\n                active: index === this._activeIndex && !op.disabled,\r\n                disabled: op.disabled,\r\n            });\r\n            return html `\r\n        <li\r\n          class=\"${classes}\"\r\n          data-index=\"${op.index}\"\r\n          data-filtered-index=\"${index}\"\r\n        >\r\n          ${op.label}\r\n        </li>\r\n      `;\r\n        });\r\n        return html `\r\n      <ul\r\n        class=\"options\"\r\n        @mouseover=\"${this._onOptionMouseOver}\"\r\n        @click=\"${this._onOptionClick}\"\r\n      >\r\n        ${options}\r\n      </ul>\r\n    `;\r\n    }\r\n}",
          "description": "## Types\r\n\r\n```typescript\r\ninterface Option {\r\n label: string;\r\n value: string;\r\n description: string;\r\n selected: boolean;\r\n disabled: boolean;\r\n}\r\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSingleSelect",
          "declaration": {
            "name": "VscodeSingleSelect",
            "module": "dist/vscode-single-select.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-split-layout.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeSplitLayout",
          "default": "class VscodeSplitLayout extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.split = 'vertical';\r\n        this.resetOnDblClick = false;\r\n        this.initialPos = '50%';\r\n        this._startPaneRight = 0;\r\n        this._startPaneBottom = 0;\r\n        this._endPaneTop = 0;\r\n        this._endPaneLeft = 0;\r\n        this._handleLeft = 0;\r\n        this._handleTop = 0;\r\n        this._isDragActive = false;\r\n        this._hover = false;\r\n        this._hide = false;\r\n        this._boundRect = new DOMRect();\r\n        this._handleOffset = 0;\r\n        this._handleMouseUpBound = this._handleMouseUp.bind(this);\r\n        this._handleMouseMoveBound = this._handleMouseMove.bind(this);\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this._boundRect = this.getBoundingClientRect();\r\n        this._initPosition();\r\n    }\r\n    _initPosition() {\r\n        const { height, width } = this._boundRect;\r\n        const maxPos = this.split === 'vertical' ? width : height;\r\n        const matches = /(^[0-9.]+)(%{0,1})$/.exec(this.initialPos);\r\n        let pos = 0;\r\n        let numericVal = 0;\r\n        if (matches) {\r\n            numericVal = parseFloat(matches[1]);\r\n        }\r\n        if (matches && matches[2] === '%') {\r\n            pos = Math.min(maxPos, (maxPos / 100) * numericVal);\r\n        }\r\n        else if (matches && matches[2] !== '%') {\r\n            pos = Math.min(numericVal, maxPos);\r\n        }\r\n        else {\r\n            pos = maxPos / 2;\r\n        }\r\n        if (this.split === 'vertical') {\r\n            this._startPaneRight = maxPos - pos;\r\n            this._endPaneLeft = pos;\r\n            this._handleLeft = pos;\r\n        }\r\n        if (this.split === 'horizontal') {\r\n            this._startPaneBottom = maxPos - pos;\r\n            this._endPaneTop = pos;\r\n            this._handleTop = pos;\r\n        }\r\n    }\r\n    _handleMouseOver() {\r\n        this._hover = true;\r\n        this._hide = false;\r\n    }\r\n    _handleMouseOut(event) {\r\n        if (event.buttons !== 1) {\r\n            this._hover = false;\r\n            this._hide = true;\r\n        }\r\n    }\r\n    _handleMouseDown(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        const mouseXLocal = event.clientX - this._boundRect.left;\r\n        const mouseYLocal = event.clientY - this._boundRect.top;\r\n        if (this.split === 'vertical') {\r\n            this._handleOffset = mouseXLocal - this._handleLeft;\r\n        }\r\n        if (this.split === 'horizontal') {\r\n            this._handleOffset = mouseYLocal - this._handleTop;\r\n        }\r\n        this._boundRect = this.getBoundingClientRect();\r\n        this._isDragActive = true;\r\n        window.addEventListener('mouseup', this._handleMouseUpBound);\r\n        window.addEventListener('mousemove', this._handleMouseMoveBound);\r\n    }\r\n    _handleMouseUp() {\r\n        this._isDragActive = false;\r\n        window.removeEventListener('mouseup', this._handleMouseUpBound);\r\n        window.removeEventListener('mousemove', this._handleMouseMoveBound);\r\n    }\r\n    _handleMouseMove(event) {\r\n        const { clientX, clientY } = event;\r\n        const { left, top, height, width } = this._boundRect;\r\n        if (this.split === 'vertical') {\r\n            const mouseXLocal = clientX - left;\r\n            this._handleLeft = Math.max(0, Math.min(mouseXLocal - this._handleOffset, width));\r\n            this._startPaneRight = Math.max(0, width - this._handleLeft);\r\n            this._endPaneLeft = this._handleLeft;\r\n        }\r\n        if (this.split === 'horizontal') {\r\n            const mouseYLocal = clientY - top;\r\n            this._handleTop = Math.max(0, Math.min(mouseYLocal - this._handleOffset, height));\r\n            this._startPaneBottom = Math.max(0, height - this._handleTop);\r\n            this._endPaneTop = this._handleTop;\r\n        }\r\n    }\r\n    _handleDblClick() {\r\n        if (!this.resetOnDblClick) {\r\n            return;\r\n        }\r\n        this._initPosition();\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          overflow: hidden;\r\n          position: relative;\r\n        }\r\n\r\n        .start {\r\n          left: 0;\r\n          top: 0;\r\n          overflow: hidden;\r\n          position: absolute;\r\n        }\r\n\r\n        .end {\r\n          bottom: 0;\r\n          overflow: hidden;\r\n          position: absolute;\r\n          right: 0;\r\n        }\r\n\r\n        .handle-overlay {\r\n          display: none;\r\n          height: 100%;\r\n          left: 0;\r\n          position: absolute;\r\n          top: 0;\r\n          width: 100%;\r\n          z-index: 1;\r\n        }\r\n\r\n        .handle-overlay.active {\r\n          display: block;\r\n        }\r\n\r\n        .handle-overlay.split-vertical {\r\n          cursor: ew-resize;\r\n        }\r\n\r\n        .handle-overlay.split-horizontal {\r\n          cursor: ns-resize;\r\n        }\r\n\r\n        .handle {\r\n          position: absolute;\r\n          z-index: 2;\r\n        }\r\n\r\n        .handle.hover {\r\n          background-color: var(--vscode-sash-hoverBorder);\r\n          transition: background-color 100ms linear 300ms;\r\n        }\r\n\r\n        .handle.hide {\r\n          background-color: transparent;\r\n          transition: background-color 100ms linear;\r\n        }\r\n\r\n        .handle.split-vertical {\r\n          cursor: ew-resize;\r\n          height: 100%;\r\n        }\r\n\r\n        .handle.split-horizontal {\r\n          cursor: ns-resize;\r\n          width: 100%;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const startPaneStyles = styleMap({\r\n            bottom: `${this._startPaneBottom}px`,\r\n            right: `${this._startPaneRight}px`,\r\n        });\r\n        const endPaneStyles = styleMap({\r\n            left: `${this._endPaneLeft}px`,\r\n            top: `${this._endPaneTop}px`,\r\n        });\r\n        const handleStylesPropObj = {\r\n            left: `${this._handleLeft}px`,\r\n            top: `${this._handleTop}px`,\r\n        };\r\n        if (this.split === 'vertical') {\r\n            handleStylesPropObj.marginLeft = `${0 - HANDLE_SIZE / 2}px`;\r\n            handleStylesPropObj.width = `${HANDLE_SIZE}px`;\r\n        }\r\n        if (this.split === 'horizontal') {\r\n            handleStylesPropObj.height = `${HANDLE_SIZE}px`;\r\n            handleStylesPropObj.marginTop = `${0 - HANDLE_SIZE / 2}px`;\r\n        }\r\n        const handleStyles = styleMap(handleStylesPropObj);\r\n        const handleOverlayClasses = classMap({\r\n            'handle-overlay': true,\r\n            active: this._isDragActive,\r\n            'split-vertical': this.split === 'vertical',\r\n            'split-horizontal': this.split === 'horizontal',\r\n        });\r\n        const handleClasses = classMap({\r\n            handle: true,\r\n            hover: this._hover,\r\n            hide: this._hide,\r\n            'split-vertical': this.split === 'vertical',\r\n            'split-horizontal': this.split === 'horizontal',\r\n        });\r\n        return html `\r\n      <div class=\"start\" style=\"${startPaneStyles}\">\r\n        <slot name=\"start\"></slot>\r\n      </div>\r\n      <div class=\"end\" style=\"${endPaneStyles}\">\r\n        <slot name=\"end\"></slot>\r\n      </div>\r\n      <div class=\"${handleOverlayClasses}\"></div>\r\n      <div\r\n        class=\"${handleClasses}\"\r\n        style=\"${handleStyles}\"\r\n        @mouseover=\"${this._handleMouseOver}\"\r\n        @mouseout=\"${this._handleMouseOut}\"\r\n        @mousedown=\"${this._handleMouseDown}\"\r\n        @dblclick=\"${this._handleDblClick}\"\r\n      ></div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSplitLayout",
          "declaration": {
            "name": "VscodeSplitLayout",
            "module": "dist/vscode-split-layout.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table-body.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTableBody",
          "default": "class VscodeTableBody extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'rowgroup';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: table;\r\n          table-layout: fixed;\r\n          width: 100%;\r\n        }\r\n\r\n        :host-context(vscode-table[zebra])\r\n          ::slotted(vscode-table-row:nth-child(even)) {\r\n          background-color: rgba(130, 130, 130, 0.04);\r\n        }\r\n\r\n        :host-context(vscode-table[zebra-odd])\r\n          ::slotted(vscode-table-row:nth-child(odd)) {\r\n          background-color: rgba(130, 130, 130, 0.04);\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableBody",
          "declaration": {
            "name": "VscodeTableBody",
            "module": "dist/vscode-table-body.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table-cell.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTableCell",
          "default": "class VscodeTableCell extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'cell';\r\n        /**\r\n         * Cell label in the compact view of the responsive mode. For internal use only.\r\n         */\r\n        this.columnLabel = '';\r\n        /**\r\n         * Enable compact view in the responsive mode. For internal use only.\r\n         */\r\n        this.compact = false;\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          box-sizing: border-box;\r\n          display: table-cell;\r\n          height: 24px;\r\n          overflow: hidden;\r\n          padding-left: 10px;\r\n          text-overflow: ellipsis;\r\n          vertical-align: middle;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        :host([compact]) {\r\n          display: block;\r\n          height: auto;\r\n          padding-bottom: 5px;\r\n          width: 100% !important;\r\n        }\r\n\r\n        :host([compact]:first-child) {\r\n          padding-top: 10px;\r\n        }\r\n\r\n        :host-context(vscode-table[bordered][compact]) {\r\n          border: 0;\r\n        }\r\n\r\n        :host([compact]:last-child) {\r\n          padding-bottom: 10px;\r\n        }\r\n\r\n        :host-context(vscode-table[bordered]) {\r\n          border-bottom: 1px solid var(--vscode-editorGroup-border);\r\n        }\r\n\r\n        .wrapper {\r\n          overflow: inherit;\r\n          text-overflow: inherit;\r\n          white-space: inherit;\r\n          width: 100%;\r\n        }\r\n\r\n        .column-label {\r\n          font-weight: bold;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const columnLabelElement = this.columnLabel\r\n            ? html `<div class=\"column-label\" role=\"presentation\">\r\n          ${this.columnLabel}\r\n        </div>`\r\n            : nothing;\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        ${columnLabelElement}\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableCell",
          "declaration": {
            "name": "VscodeTableCell",
            "module": "dist/vscode-table-cell.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table-header-cell.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTableHeaderCell",
          "default": "class VscodeTableHeaderCell extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'columnheader';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          box-sizing: border-box;\r\n          display: table-cell;\r\n          font-family: var(--vscode-font-style);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: bold;\r\n          line-height: 20px;\r\n          overflow: hidden;\r\n          padding-bottom: 5px;\r\n          padding-left: 10px;\r\n          padding-right: 0;\r\n          padding-top: 5px;\r\n          text-overflow: ellipsis;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        .wrapper {\r\n          box-sizing: inherit;\r\n          overflow: inherit;\r\n          text-overflow: inherit;\r\n          white-space: inherit;\r\n          width: 100%;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"wrapper\">\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableHeaderCell",
          "declaration": {
            "name": "VscodeTableHeaderCell",
            "module": "dist/vscode-table-header-cell.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table-header.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTableHeader",
          "default": "class VscodeTableHeader extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'rowgroup';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          background-color: rgba(130, 130, 130, 0.04);\r\n          display: table;\r\n          table-layout: fixed;\r\n          width: 100%;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableHeader",
          "declaration": {
            "name": "VscodeTableHeader",
            "module": "dist/vscode-table-header.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table-row.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTableRow",
          "default": "class VscodeTableRow extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'row';\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: table-row;\r\n          width: 100%;\r\n        }\r\n\r\n        :host-context(vscode-table[compact]) {\r\n          display: block;\r\n        }\r\n\r\n        :host-context(vscode-table[compact][bordered]) {\r\n          border-top: 1px solid var(--vscode-editorGroup-border);\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html ` <slot></slot> `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableRow",
          "declaration": {
            "name": "VscodeTableRow",
            "module": "dist/vscode-table-row.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTable",
          "default": "class VscodeTable extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.role = 'table';\r\n        this.resizable = false;\r\n        this.responsive = false;\r\n        this.breakpoint = 300;\r\n        /**\r\n         * Minimum column width. Valid values are:\r\n         * - number\r\n         * - string-type number (ex.: \"100\")\r\n         * - px value (ex.: \"100px\")\r\n         * - percentage value (ex.: \"50%\")\r\n         * - percentage value (ex.: \"50%\")\r\n         * - \"auto\" keyword\r\n         */\r\n        this.minColumnWidth = '50px';\r\n        this.delayedResizing = false;\r\n        /**\r\n         * For internal use only\r\n         */\r\n        this.compact = false;\r\n        /**\r\n         * Sash positions in percentage\r\n         */\r\n        this._sashPositions = [];\r\n        this._isDragging = false;\r\n        /**\r\n         * Sash hover state flags, used in the render.\r\n         */\r\n        this._sashHovers = [];\r\n        this._columns = [];\r\n        this._activeSashElementIndex = -1;\r\n        this._activeSashCursorOffset = 0;\r\n        this._componentX = 0;\r\n        this._componentH = 0;\r\n        this._componentW = 0;\r\n        /**\r\n         * Cached querySelectorAll result. Updated when the header slot changes.\r\n         * It shouldn't be used directly, check the \"_getHeaderCells\" function.\r\n         */\r\n        this._headerCells = [];\r\n        /**\r\n         * Cached querySelectorAll result. Updated when the body slot changes.\r\n         * It shouldn't be used directly, check the \"_getCellsOfFirstRow\" function.\r\n         */\r\n        this._cellsOfFirstRow = [];\r\n        this._prevHeaderHeight = 0;\r\n        this._prevComponentHeight = 0;\r\n        this._componentResizeObserverCallbackBound = this._componentResizeObserverCallback.bind(this);\r\n        this._headerResizeObserverCallbackBound = this._headerResizeObserverCallback.bind(this);\r\n        this._onResizingMouseMoveBound = this._onResizingMouseMove.bind(this);\r\n        this._onResizingMouseUpBound = this._onResizingMouseUp.bind(this);\r\n    }\r\n    /**\r\n     * Initial column sizes in a JSON-encoded array.\r\n     * Accepted values are:\r\n     * - number\r\n     * - string-type number (ex.: \"100\")\r\n     * - px value (ex.: \"100px\")\r\n     * - percentage value (ex.: \"50%\")\r\n     * - percentage value (ex.: \"50%\")\r\n     * - \"auto\" keyword\r\n     */\r\n    set columns(val) {\r\n        this._columns = val;\r\n        if (this.isConnected) {\r\n            this._initDefaultColumnSizes();\r\n        }\r\n    }\r\n    get columns() {\r\n        return this._columns;\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this._memoizeComponentDimensions();\r\n        this._initDefaultColumnSizes();\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this._componentResizeObserver.unobserve(this);\r\n        this._componentResizeObserver.disconnect();\r\n    }\r\n    _px2Percent(px) {\r\n        return (px / this._componentW) * 100;\r\n    }\r\n    _percent2Px(percent) {\r\n        return (this._componentW * percent) / 100;\r\n    }\r\n    _memoizeComponentDimensions() {\r\n        const cr = this.getBoundingClientRect();\r\n        this._componentH = cr.height;\r\n        this._componentW = cr.width;\r\n        this._componentX = cr.x;\r\n    }\r\n    _queryHeaderCells() {\r\n        const headers = this._assignedHeaderElements;\r\n        if (!(headers && headers[0])) {\r\n            return [];\r\n        }\r\n        return Array.from(headers[0].querySelectorAll('vscode-table-header-cell'));\r\n    }\r\n    /**\r\n     * Get cached header cells\r\n     */\r\n    _getHeaderCells() {\r\n        if (!this._headerCells.length) {\r\n            this._headerCells = this._queryHeaderCells();\r\n        }\r\n        return this._headerCells;\r\n    }\r\n    _queryCellsOfFirstRow() {\r\n        const assignedBodyElements = this._assignedBodyElements;\r\n        if (!(assignedBodyElements && assignedBodyElements[0])) {\r\n            return [];\r\n        }\r\n        return Array.from(assignedBodyElements[0].querySelectorAll('vscode-table-row:first-child vscode-table-cell'));\r\n    }\r\n    /**\r\n     * Get cached cells of first row\r\n     */\r\n    _getCellsOfFirstRow() {\r\n        if (!this._cellsOfFirstRow.length) {\r\n            this._cellsOfFirstRow = this._queryCellsOfFirstRow();\r\n        }\r\n        return this._cellsOfFirstRow;\r\n    }\r\n    _initResizeObserver() {\r\n        this._componentResizeObserver = new ResizeObserver(this._componentResizeObserverCallbackBound);\r\n        this._componentResizeObserver.observe(this);\r\n        this._headerResizeObserver = new ResizeObserver(this._headerResizeObserverCallbackBound);\r\n        this._headerResizeObserver.observe(this._headerElement);\r\n    }\r\n    _componentResizeObserverCallback() {\r\n        this._memoizeComponentDimensions();\r\n        this._updateScrollpaneSize();\r\n        if (this.responsive) {\r\n            this._toggleCompactView();\r\n        }\r\n    }\r\n    _headerResizeObserverCallback() {\r\n        this._updateScrollpaneSize();\r\n    }\r\n    _calcColWidthPercentages() {\r\n        const numCols = this._getHeaderCells().length;\r\n        let cols = this.columns.slice(0, numCols);\r\n        const numAutoCols = cols.filter((c) => c === 'auto').length + numCols - cols.length;\r\n        let availablePercent = 100;\r\n        cols = cols.map((col) => {\r\n            const percentage = rawValueToPercentage(col, this._componentW);\r\n            if (percentage === null) {\r\n                return 'auto';\r\n            }\r\n            availablePercent -= percentage;\r\n            return percentage;\r\n        });\r\n        if (cols.length < numCols) {\r\n            for (let i = cols.length; i < numCols; i++) {\r\n                cols.push('auto');\r\n            }\r\n        }\r\n        cols = cols.map((col) => {\r\n            if (col === 'auto') {\r\n                return availablePercent / numAutoCols;\r\n            }\r\n            return col;\r\n        });\r\n        return cols;\r\n    }\r\n    _initHeaderCellSizes(colWidths) {\r\n        this._getHeaderCells().forEach((cell, index) => {\r\n            cell.style.width = `${colWidths[index]}%`;\r\n        });\r\n    }\r\n    _initBodyColumnSizes(colWidths) {\r\n        this._getCellsOfFirstRow().forEach((cell, index) => {\r\n            cell.style.width = `${colWidths[index]}%`;\r\n        });\r\n    }\r\n    _initSashes(colWidths) {\r\n        const l = colWidths.length;\r\n        let prevHandlerPos = 0;\r\n        this._sashPositions = [];\r\n        colWidths.forEach((collW, index) => {\r\n            if (index < l - 1) {\r\n                const pos = prevHandlerPos + collW;\r\n                this._sashPositions.push(pos);\r\n                prevHandlerPos = pos;\r\n            }\r\n        });\r\n    }\r\n    _initDefaultColumnSizes() {\r\n        const colWidths = this._calcColWidthPercentages();\r\n        this._initHeaderCellSizes(colWidths);\r\n        this._initBodyColumnSizes(colWidths);\r\n        this._initSashes(colWidths);\r\n    }\r\n    _updateScrollpaneSize() {\r\n        const headerCr = this._headerElement.getBoundingClientRect();\r\n        if (headerCr.height === this._prevHeaderHeight &&\r\n            this._componentH === this._prevComponentHeight) {\r\n            return;\r\n        }\r\n        this._prevHeaderHeight = headerCr.height;\r\n        this._prevComponentHeight = this._componentH;\r\n        const scrollableH = this._componentH - headerCr.height;\r\n        this._scrollableElement.style.height = `${scrollableH}px`;\r\n        this._sashVisibleElements.forEach((el) => {\r\n            el.style.height = `${scrollableH}px`;\r\n            el.style.top = `${headerCr.height}px`;\r\n        });\r\n    }\r\n    _applyCompactViewColumnLabels() {\r\n        const headerCells = this._getHeaderCells();\r\n        const labels = headerCells.map((c) => c.innerText);\r\n        const rows = this.querySelectorAll('vscode-table-row');\r\n        rows.forEach((r) => {\r\n            const cells = r.querySelectorAll('vscode-table-cell');\r\n            cells.forEach((c, i) => {\r\n                c.columnLabel = labels[i];\r\n                c.compact = true;\r\n            });\r\n        });\r\n    }\r\n    _clearCompactViewColumnLabels() {\r\n        this.querySelectorAll('vscode-table-cell').forEach((c) => {\r\n            c.columnLabel = '';\r\n            c.compact = false;\r\n        });\r\n    }\r\n    _toggleCompactView() {\r\n        const cr = this.getBoundingClientRect();\r\n        const nextCompactView = cr.width < this.breakpoint;\r\n        if (this.compact !== nextCompactView) {\r\n            this.compact = nextCompactView;\r\n            if (nextCompactView) {\r\n                this._applyCompactViewColumnLabels();\r\n            }\r\n            else {\r\n                this._clearCompactViewColumnLabels();\r\n            }\r\n        }\r\n    }\r\n    _onHeaderSlotChange() {\r\n        this._headerCells = this._queryHeaderCells();\r\n    }\r\n    _onBodySlotChange() {\r\n        this._initDefaultColumnSizes();\r\n        this._initResizeObserver();\r\n    }\r\n    _onSashMouseOver(event) {\r\n        if (this._isDragging) {\r\n            return;\r\n        }\r\n        const target = event.currentTarget;\r\n        const index = Number(target.dataset.index);\r\n        this._sashHovers[index] = true;\r\n        this.requestUpdate();\r\n    }\r\n    _onSashMouseOut(event) {\r\n        event.stopPropagation();\r\n        if (this._isDragging) {\r\n            return;\r\n        }\r\n        const target = event.currentTarget;\r\n        const index = Number(target.dataset.index);\r\n        this._sashHovers[index] = false;\r\n        this.requestUpdate();\r\n    }\r\n    _onSashMouseDown(event) {\r\n        event.stopPropagation();\r\n        const { pageX, currentTarget } = event;\r\n        const el = currentTarget;\r\n        const index = Number(el.dataset.index);\r\n        const cr = el.getBoundingClientRect();\r\n        const elX = cr.x;\r\n        this._isDragging = true;\r\n        this._activeSashElementIndex = index;\r\n        this._sashHovers[this._activeSashElementIndex] = true;\r\n        this._activeSashCursorOffset = this._px2Percent(pageX - elX);\r\n        const headerCells = this._getHeaderCells();\r\n        this._headerCellsToResize = [];\r\n        this._headerCellsToResize.push(headerCells[index]);\r\n        if (headerCells[index + 1]) {\r\n            this._headerCellsToResize[1] = headerCells[index + 1];\r\n        }\r\n        const tbody = this._bodySlot.assignedElements()[0];\r\n        const cells = tbody.querySelectorAll('vscode-table-row:first-child > vscode-table-cell');\r\n        this._cellsToResize = [];\r\n        this._cellsToResize.push(cells[index]);\r\n        if (cells[index + 1]) {\r\n            this._cellsToResize.push(cells[index + 1]);\r\n        }\r\n        document.addEventListener('mousemove', this._onResizingMouseMoveBound);\r\n        document.addEventListener('mouseup', this._onResizingMouseUpBound);\r\n    }\r\n    _updateActiveSashPosition(mouseX) {\r\n        const { prevSashPos, nextSashPos } = this._getSashPositions();\r\n        let minColumnWidth = rawValueToPercentage(this.minColumnWidth, this._componentW);\r\n        if (minColumnWidth === null) {\r\n            minColumnWidth = 0;\r\n        }\r\n        const minX = prevSashPos ? prevSashPos + minColumnWidth : minColumnWidth;\r\n        const maxX = nextSashPos\r\n            ? nextSashPos - minColumnWidth\r\n            : COMPONENT_WIDTH_PERCENTAGE - minColumnWidth;\r\n        let newX = this._px2Percent(mouseX - this._componentX - this._percent2Px(this._activeSashCursorOffset));\r\n        newX = Math.max(newX, minX);\r\n        newX = Math.min(newX, maxX);\r\n        this._sashPositions[this._activeSashElementIndex] = newX;\r\n        this.requestUpdate();\r\n    }\r\n    _getSashPositions() {\r\n        const sashPos = this._sashPositions[this._activeSashElementIndex];\r\n        const prevSashPos = this._sashPositions[this._activeSashElementIndex - 1] || 0;\r\n        const nextSashPos = this._sashPositions[this._activeSashElementIndex + 1] ||\r\n            COMPONENT_WIDTH_PERCENTAGE;\r\n        return {\r\n            sashPos,\r\n            prevSashPos,\r\n            nextSashPos,\r\n        };\r\n    }\r\n    _resizeColumns(resizeBodyCells = true) {\r\n        const { sashPos, prevSashPos, nextSashPos } = this._getSashPositions();\r\n        const prevColW = sashPos - prevSashPos;\r\n        const nextColW = nextSashPos - sashPos;\r\n        const prevColCss = `${prevColW}%`;\r\n        const nextColCss = `${nextColW}%`;\r\n        this._headerCellsToResize[0].style.width = prevColCss;\r\n        if (this._headerCellsToResize[1]) {\r\n            this._headerCellsToResize[1].style.width = nextColCss;\r\n        }\r\n        if (resizeBodyCells) {\r\n            this._cellsToResize[0].style.width = prevColCss;\r\n            if (this._cellsToResize[1]) {\r\n                this._cellsToResize[1].style.width = nextColCss;\r\n            }\r\n        }\r\n    }\r\n    _onResizingMouseMove(event) {\r\n        event.stopPropagation();\r\n        this._updateActiveSashPosition(event.pageX);\r\n        if (!this.delayedResizing) {\r\n            this._resizeColumns(true);\r\n        }\r\n        else {\r\n            this._resizeColumns(false);\r\n        }\r\n    }\r\n    _onResizingMouseUp(event) {\r\n        this._resizeColumns(true);\r\n        this._updateActiveSashPosition(event.pageX);\r\n        this._sashHovers[this._activeSashElementIndex] = false;\r\n        this._isDragging = false;\r\n        this._activeSashElementIndex = -1;\r\n        document.removeEventListener('mousemove', this._onResizingMouseMoveBound);\r\n        document.removeEventListener('mouseup', this._onResizingMouseUpBound);\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        ::slotted(vscode-table-row) {\r\n          width: 100%;\r\n        }\r\n\r\n        .wrapper {\r\n          height: 100%;\r\n          max-width: 100%;\r\n          overflow: hidden;\r\n          position: relative;\r\n          width: 100%;\r\n        }\r\n\r\n        .wrapper.select-disabled {\r\n          user-select: none;\r\n        }\r\n\r\n        .wrapper.resize-cursor {\r\n          cursor: ew-resize;\r\n        }\r\n\r\n        .wrapper.compact-view .header-slot-wrapper {\r\n          height: 0;\r\n          overflow: hidden;\r\n        }\r\n\r\n        .scrollable {\r\n          height: 100%;\r\n        }\r\n\r\n        .scrollable:before {\r\n          background-color: transparent;\r\n          content: '';\r\n          display: block;\r\n          height: 1px;\r\n          position: absolute;\r\n          width: 100%;\r\n        }\r\n\r\n        :host(:not([bordered]))\r\n          .wrapper:not(.compact-view):hover\r\n          .scrollable:not([scrolled]):before,\r\n        :host([bordered])\r\n          .wrapper:not(.compact-view)\r\n          .scrollable:not([scrolled]):before {\r\n          background-color: var(--vscode-editorGroup-border);\r\n        }\r\n\r\n        :host(:not([bordered])) .sash {\r\n          visibility: hidden;\r\n        }\r\n\r\n        :host(:not([compact])) .wrapper:hover .sash {\r\n          visibility: visible;\r\n        }\r\n\r\n        .sash {\r\n          height: 100%;\r\n          position: absolute;\r\n          top: 0;\r\n          width: 1px;\r\n        }\r\n\r\n        .wrapper.compact-view .sash {\r\n          display: none;\r\n        }\r\n\r\n        .sash.resizable {\r\n          cursor: ew-resize;\r\n        }\r\n\r\n        .sash-visible {\r\n          background-color: var(--vscode-editorGroup-border);\r\n          height: 100%;\r\n          position: absolute;\r\n          top: 0;\r\n          width: 1px;\r\n        }\r\n\r\n        .sash.hover .sash-visible {\r\n          background-color: var(--vscode-sash-hoverBorder);\r\n          transition: background-color 50ms linear 300ms;\r\n        }\r\n\r\n        .sash .sash-clickable {\r\n          background-color: transparent;\r\n          height: 100%;\r\n          left: -2px;\r\n          position: absolute;\r\n          width: 5px;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const sashes = this._sashPositions.map((val, index) => {\r\n            const classes = classMap({\r\n                sash: true,\r\n                hover: this._sashHovers[index],\r\n                resizable: this.resizable,\r\n            });\r\n            const left = `${val}%`;\r\n            return this.resizable\r\n                ? html `\r\n            <div\r\n              class=\"${classes}\"\r\n              data-index=\"${index}\"\r\n              style=\"${styleMap({ left })}\"\r\n              @mousedown=\"${this._onSashMouseDown}\"\r\n              @mouseover=\"${this._onSashMouseOver}\"\r\n              @mouseout=\"${this._onSashMouseOut}\"\r\n            >\r\n              <div class=\"sash-visible\"></div>\r\n              <div class=\"sash-clickable\"></div>\r\n            </div>\r\n          `\r\n                : html `<div\r\n            class=\"${classes}\"\r\n            data-index=\"${index}\"\r\n            style=\"${styleMap({ left })}\"\r\n          >\r\n            <div class=\"sash-visible\"></div>\r\n          </div>`;\r\n        });\r\n        const wrapperClasses = classMap({\r\n            wrapper: true,\r\n            'select-disabled': this._isDragging,\r\n            'resize-cursor': this._isDragging,\r\n            'compact-view': this.compact,\r\n        });\r\n        return html `\r\n      <div class=\"${wrapperClasses}\">\r\n        <div class=\"header\" @slotchange=\"${this._onHeaderSlotChange}\">\r\n          <slot name=\"caption\"></slot>\r\n          <div class=\"header-slot-wrapper\">\r\n            <slot name=\"header\"></slot>\r\n          </div>\r\n        </div>\r\n        <vscode-scrollable class=\"scrollable\">\r\n          <div>\r\n            <slot name=\"body\" @slotchange=\"${this._onBodySlotChange}\"></slot>\r\n          </div>\r\n        </vscode-scrollable>\r\n        ${sashes}\r\n      </div>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTable",
          "declaration": {
            "name": "VscodeTable",
            "module": "dist/vscode-table.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-tabs.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTabs",
          "default": "class VscodeTabs extends VscElement {\r\n    constructor() {\r\n        super();\r\n        this._headerSlot = null;\r\n        this._mainSlot = null;\r\n        this._selectedIndex = 0;\r\n    }\r\n    set selectedIndex(index) {\r\n        this._selectedIndex = index;\r\n        this._setActiveTab();\r\n    }\r\n    get selectedIndex() {\r\n        return this._selectedIndex;\r\n    }\r\n    _setActiveTab() {\r\n        if (!this._mainSlot || !this._headerSlot) {\r\n            return;\r\n        }\r\n        Array.from(this._mainSlot.assignedElements()).forEach((el, i) => {\r\n            el.style.display =\r\n                i === this._selectedIndex ? 'block' : 'none';\r\n        });\r\n        Array.from(this._headerSlot.assignedElements()).forEach((el, i) => {\r\n            el.dataset.index = String(i);\r\n            el.classList.toggle('is-active', i === this._selectedIndex);\r\n        });\r\n        this.dispatchEvent(new CustomEvent('vsc-select', {\r\n            detail: {\r\n                selectedIndex: this._selectedIndex,\r\n            },\r\n            composed: true,\r\n        }));\r\n    }\r\n    _onSlotChanged() {\r\n        this._setActiveTab();\r\n    }\r\n    _onHeaderClick(event) {\r\n        const index = event.target.dataset.index;\r\n        if (!index) {\r\n            return;\r\n        }\r\n        this._selectedIndex = Number(index);\r\n        this._setActiveTab();\r\n    }\r\n    firstUpdated() {\r\n        this._headerSlot = this.shadowRoot.querySelector('slot[name=header]');\r\n        this._mainSlot = this.shadowRoot.querySelector('slot:not([name=header])');\r\n        this._mainSlot.addEventListener('slotchange', this._onSlotChanged.bind(this));\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n        }\r\n\r\n        .header {\r\n          display: flex;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: var(--vscode-font-weight);\r\n          width: 100%;\r\n        }\r\n\r\n        :host-context(.vscode-light) .header {\r\n          border-bottom: 1px solid #ccc;\r\n        }\r\n\r\n        ::slotted(header) {\r\n          border-bottom: 1px solid transparent;\r\n          color: var(--vscode-foreground);\r\n          cursor: pointer;\r\n          display: block;\r\n          margin-bottom: -1px;\r\n          overflow: hidden;\r\n          padding: 7px 8px;\r\n          text-overflow: ellipsis;\r\n          user-select: none;\r\n          white-space: nowrap;\r\n        }\r\n\r\n        ::slotted(.is-active) {\r\n          border-bottom-color: var(--vscode-settings-headerForeground);\r\n          color: var(--vscode-settings-headerForeground);\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        return html `\r\n      <div class=\"header\" @click=\"${this._onHeaderClick}\">\r\n        <slot name=\"header\"></slot>\r\n      </div>\r\n      <slot></slot>\r\n    `;\r\n    }\r\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTabs",
          "declaration": {
            "name": "VscodeTabs",
            "module": "dist/vscode-tabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-tree.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "VscodeTree",
          "default": "class VscodeTree extends VscElement {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.indent = 8;\r\n        this.arrows = false;\r\n        this.multiline = false;\r\n        this.tabindex = 0;\r\n        this._data = [];\r\n        this._selectedItem = null;\r\n        this._focusedItem = null;\r\n        this.onComponentKeyDownBound = this.onComponentKeyDown.bind(this);\r\n    }\r\n    set data(val) {\r\n        const oldVal = this._data;\r\n        this._data = mapData(val);\r\n        this.requestUpdate('data', oldVal);\r\n    }\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    getItemByPath(path) {\r\n        let current = this._data;\r\n        let item = null;\r\n        path.forEach((el, i) => {\r\n            if (i === path.length - 1) {\r\n                item = current[el];\r\n            }\r\n            else {\r\n                current = current[el].subItems;\r\n            }\r\n        });\r\n        return item;\r\n    }\r\n    getItemType(item) {\r\n        if (item.subItems &&\r\n            Array.isArray(item.subItems) &&\r\n            item.subItems.length > 0) {\r\n            return ItemType.BRANCH;\r\n        }\r\n        return ItemType.LEAF;\r\n    }\r\n    getIconName(element) {\r\n        if (!element.icons) {\r\n            return undefined;\r\n        }\r\n        const { icons } = element;\r\n        const itemType = this.getItemType(element);\r\n        const isOpen = element.open || false;\r\n        if (itemType === ItemType.BRANCH && isOpen) {\r\n            return icons.open || undefined;\r\n        }\r\n        else if (itemType === ItemType.BRANCH && !isOpen) {\r\n            return icons.branch || undefined;\r\n        }\r\n        else if (itemType === ItemType.LEAF) {\r\n            return icons.leaf || undefined;\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    }\r\n    renderTreeItem({ indentLevel, label, path, iconName, open = false, itemType, selected = false, focused = false, subItems, }) {\r\n        const arrowIconName = open ? 'chevron-down' : 'chevron-right';\r\n        const contentsClasses = ['contents'];\r\n        const liClasses = open ? ['open'] : [];\r\n        const indentSize = indentLevel * this.indent;\r\n        const padLeft = this.arrows && itemType === ItemType.LEAF\r\n            ? ARROW_OUTER_WIDTH + indentSize\r\n            : indentSize;\r\n        const arrowMarkup = this.arrows && itemType === ItemType.BRANCH\r\n            ? html `<vscode-icon\r\n            name=\"${arrowIconName}\"\r\n            class=\"icon-arrow\"\r\n          ></vscode-icon>`\r\n            : nothing;\r\n        const iconMarkup = iconName\r\n            ? html `<vscode-icon name=\"${iconName}\" class=\"label-icon\"></vscode-icon>`\r\n            : nothing;\r\n        const subTreeMarkup = open && itemType === ItemType.BRANCH\r\n            ? html `<ul>\r\n            ${this.renderTree(subItems, path)}\r\n          </ul>`\r\n            : nothing;\r\n        const labelMarkup = html `<span class=\"label\">${label}</span>`;\r\n        liClasses.push(itemType === ItemType.LEAF ? 'leaf' : 'branch');\r\n        if (selected) {\r\n            contentsClasses.push('selected');\r\n        }\r\n        if (focused) {\r\n            contentsClasses.push('focused');\r\n        }\r\n        return html `\r\n      <li data-path=\"${path.join('/')}\" class=\"${liClasses.join(' ')}\">\r\n        <span\r\n          class=\"${contentsClasses.join(' ')}\"\r\n          style=\"${styleMap({ paddingLeft: `${padLeft}px` })}\"\r\n        >\r\n          ${arrowMarkup} ${iconMarkup} ${labelMarkup}\r\n        </span>\r\n        ${subTreeMarkup}\r\n      </li>\r\n    `;\r\n    }\r\n    renderTree(tree, oldPath = []) {\r\n        const ret = [];\r\n        if (!tree) {\r\n            return nothing;\r\n        }\r\n        tree.forEach((element, index) => {\r\n            const path = [...oldPath, index];\r\n            const indentLevel = path.length - 1;\r\n            const itemType = this.getItemType(element);\r\n            const iconName = this.getIconName(element);\r\n            const { label, open = false, selected = false, focused = false, subItems = [], } = element;\r\n            if (selected) {\r\n                this._selectedItem = element;\r\n            }\r\n            if (focused) {\r\n                this._focusedItem = element;\r\n            }\r\n            ret.push(this.renderTreeItem({\r\n                indentLevel,\r\n                label,\r\n                path,\r\n                open,\r\n                iconName,\r\n                itemType,\r\n                selected,\r\n                focused,\r\n                subItems,\r\n            }));\r\n        });\r\n        return ret;\r\n    }\r\n    toggleSubTreeOpen(item) {\r\n        if (!item.subItems) {\r\n            return;\r\n        }\r\n        item.open = !item.open;\r\n    }\r\n    selectTreeItem(item) {\r\n        if (this._selectedItem) {\r\n            this._selectedItem.selected = false;\r\n        }\r\n        this._selectedItem = item;\r\n        item.selected = true;\r\n    }\r\n    focusTreeItem(item) {\r\n        if (this._focusedItem) {\r\n            this._focusedItem.focused = false;\r\n        }\r\n        this._focusedItem = item;\r\n        item.focused = true;\r\n    }\r\n    closeSubTreeRecursively(tree) {\r\n        tree.forEach((item) => {\r\n            item.open = false;\r\n            if (item.subItems && item.subItems.length > 0) {\r\n                this.closeSubTreeRecursively(item.subItems);\r\n            }\r\n        });\r\n    }\r\n    emitSelectEvent(item, path) {\r\n        const { icons, label, open, value } = item;\r\n        const detail = {\r\n            icons,\r\n            itemType: this.getItemType(item),\r\n            label,\r\n            open: open || false,\r\n            value: value || label,\r\n            path,\r\n        };\r\n        this.dispatchEvent(new CustomEvent('vsc-select', {\r\n            bubbles: true,\r\n            composed: true,\r\n            detail,\r\n        }));\r\n    }\r\n    _focusItem(item) {\r\n        if (this._focusedItem) {\r\n            this._focusedItem.focused = false;\r\n        }\r\n        this._focusedItem = item;\r\n        this._focusedItem.focused = true;\r\n    }\r\n    _focusPrevItem() {\r\n        var _a;\r\n        if (!this._focusedItem) {\r\n            this._focusItem(this._data[0]);\r\n            return;\r\n        }\r\n        const { path } = this._focusedItem;\r\n        if (path && (path === null || path === void 0 ? void 0 : path.length) > 0) {\r\n            const currentItemIndex = path[path.length - 1];\r\n            const hasParent = path.length > 1;\r\n            if (currentItemIndex > 0) {\r\n                const newPath = [...path];\r\n                newPath[newPath.length - 1] = currentItemIndex - 1;\r\n                const prevSibling = this.getItemByPath(newPath);\r\n                let newFocusedItem = prevSibling;\r\n                if ((prevSibling === null || prevSibling === void 0 ? void 0 : prevSibling.open) && ((_a = prevSibling.subItems) === null || _a === void 0 ? void 0 : _a.length)) {\r\n                    const { subItems } = prevSibling;\r\n                    newFocusedItem = subItems[subItems.length - 1];\r\n                }\r\n                this._focusItem(newFocusedItem);\r\n            }\r\n            else {\r\n                if (hasParent) {\r\n                    const newPath = [...path];\r\n                    newPath.pop();\r\n                    this._focusItem(this.getItemByPath(newPath));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._focusItem(this._data[0]);\r\n        }\r\n    }\r\n    _focusNextItem() {\r\n        if (!this._focusedItem) {\r\n            this._focusItem(this._data[0]);\r\n            return;\r\n        }\r\n        const { path, open } = this._focusedItem;\r\n        if (open &&\r\n            Array.isArray(this._focusedItem.subItems) &&\r\n            this._focusedItem.subItems.length > 0) {\r\n            this._focusItem(this._focusedItem.subItems[0]);\r\n            return;\r\n        }\r\n        const nextPath = [...path];\r\n        nextPath[nextPath.length - 1] += 1;\r\n        let nextFocusedItem = this.getItemByPath(nextPath);\r\n        if (nextFocusedItem) {\r\n            this._focusItem(nextFocusedItem);\r\n        }\r\n        else {\r\n            nextPath.pop();\r\n            if (nextPath.length > 0) {\r\n                nextPath[nextPath.length - 1] += 1;\r\n                nextFocusedItem = this.getItemByPath(nextPath);\r\n                if (nextFocusedItem) {\r\n                    this._focusItem(nextFocusedItem);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onComponentClick(event) {\r\n        const composedPath = event.composedPath();\r\n        const targetElement = composedPath.find((el) => el.tagName &&\r\n            el.tagName.toUpperCase() === 'LI');\r\n        if (targetElement) {\r\n            const pathStr = targetElement.dataset.path || '';\r\n            const path = pathStr.split('/').map((el) => Number(el));\r\n            const item = this.getItemByPath(path);\r\n            this.toggleSubTreeOpen(item);\r\n            this.selectTreeItem(item);\r\n            this.focusTreeItem(item);\r\n            this.emitSelectEvent(item, pathStr);\r\n            this.requestUpdate();\r\n        }\r\n        else {\r\n            if (this._focusedItem) {\r\n                this._focusedItem.focused = false;\r\n            }\r\n            this._focusedItem = null;\r\n        }\r\n    }\r\n    onComponentKeyDown(ev) {\r\n        const keys = [\r\n            KeyName.ARROW_DOWN,\r\n            KeyName.ARROW_UP,\r\n            KeyName.ENTER,\r\n            KeyName.ESCAPE,\r\n            KeyName.SPACE,\r\n        ];\r\n        if (keys.includes(ev.key)) {\r\n            ev.stopPropagation();\r\n            ev.preventDefault();\r\n        }\r\n        if (ev.key === KeyName.ESCAPE) {\r\n            this._focusedItem = null;\r\n        }\r\n        if (ev.key === KeyName.ARROW_UP) {\r\n            this._focusPrevItem();\r\n        }\r\n        if (ev.key === KeyName.ARROW_DOWN) {\r\n            this._focusNextItem();\r\n        }\r\n        if (ev.key === KeyName.ENTER || ev.key === KeyName.SPACE) {\r\n            if (this._selectedItem) {\r\n                this._selectedItem.selected = false;\r\n            }\r\n            if (this._focusedItem) {\r\n                this._selectedItem = this._focusedItem;\r\n            }\r\n            if (this._selectedItem) {\r\n                this._selectedItem.selected = true;\r\n                this._selectedItem.open = !this._selectedItem.open;\r\n                this.emitSelectEvent(this._selectedItem, this._selectedItem.path.join('/'));\r\n                this.requestUpdate();\r\n            }\r\n        }\r\n    }\r\n    closeAll() {\r\n        this.closeSubTreeRecursively(this.data);\r\n        this.requestUpdate();\r\n    }\r\n    connectedCallback() {\r\n        super.connectedCallback();\r\n        this.addEventListener('keydown', this.onComponentKeyDownBound);\r\n    }\r\n    disconnectedCallback() {\r\n        super.disconnectedCallback();\r\n        this.removeEventListener('keydown', this.onComponentKeyDownBound);\r\n    }\r\n    static get styles() {\r\n        return [\r\n            super.styles,\r\n            css `\r\n        :host {\r\n          display: block;\r\n          outline: none;\r\n          user-select: none;\r\n        }\r\n\r\n        .wrapper {\r\n          height: 100%;\r\n        }\r\n\r\n        :host(:focus) .wrapper.focused-none {\r\n          outline: 1px solid var(--vscode-list-focusOutline);\r\n        }\r\n\r\n        li {\r\n          list-style: none;\r\n        }\r\n\r\n        ul,\r\n        li {\r\n          margin: 0;\r\n          padding: 0;\r\n        }\r\n\r\n        .contents {\r\n          align-items: center;\r\n          display: flex;\r\n          font-family: var(--vscode-font-family);\r\n          font-size: var(--vscode-font-size);\r\n          font-weight: var(--vscode-font-weight);\r\n        }\r\n\r\n        .multi .contents {\r\n          align-items: flex-start;\r\n        }\r\n\r\n        .contents:hover {\r\n          background-color: var(--vscode-list-hoverBackground);\r\n          color: var(--vscode-list-hoverForeground);\r\n          cursor: pointer;\r\n        }\r\n\r\n        .contents.selected {\r\n          background-color: var(--vscode-list-inactiveSelectionBackground);\r\n        }\r\n\r\n        :host(:focus) .contents.focused {\r\n          background-color: var(--vscode-list-focusBackground);\r\n          outline: 1px solid var(--vscode-list-focusOutline);\r\n          outline-offset: -1px;\r\n        }\r\n\r\n        :host(:focus) .contents.selected.focused,\r\n        :host(:focus) .contents.selected {\r\n          background-color: var(--vscode-list-activeSelectionBackground);\r\n          color: var(--vscode-list-activeSelectionForeground);\r\n        }\r\n\r\n        .icon-arrow {\r\n          display: block;\r\n          margin: 3px 2px 3px 0;\r\n        }\r\n\r\n        .label-icon {\r\n          display: block;\r\n          margin-right: 6px;\r\n        }\r\n\r\n        :host(:focus) .contents.selected.focused .label-icon,\r\n        :host(:focus) .contents.selected .label-icon {\r\n          color: var(--vscode-list-activeSelectionForeground);\r\n        }\r\n\r\n        .multi .contents .label-icon {\r\n          margin-top: 3px;\r\n        }\r\n\r\n        .label {\r\n          display: block;\r\n          line-height: 22px;\r\n        }\r\n\r\n        .single .label {\r\n          overflow: hidden;\r\n          text-overflow: ellipsis;\r\n          white-space: nowrap;\r\n        }\r\n      `,\r\n        ];\r\n    }\r\n    render() {\r\n        const classes = classMap({\r\n            multi: this.multiline,\r\n            single: !this.multiline,\r\n            wrapper: true,\r\n            'focused-none': !this._focusedItem,\r\n            'selection-none': !this._selectedItem,\r\n            'selection-single': this._selectedItem !== null,\r\n        });\r\n        return html `\r\n      <div @click=\"${this.onComponentClick}\" class=\"${classes}\">\r\n        <ul>\r\n          ${this.renderTree(this._data)}\r\n        </ul>\r\n      </div>\r\n    `;\r\n    }\r\n}",
          "description": "## Type definitions\r\n\r\n```typescript\r\ntype ItemType = 'branch' | 'leaf';\r\n\r\ninterface TreeItemIconConfig {\r\n  branch?: string;\r\n  open?: string;\r\n  leaf?: string;\r\n}\r\n\r\ninterface TreeItem {\r\n  label: string;\r\n  subItems?: TreeItem[];\r\n  open?: boolean;\r\n  selected?: boolean;\r\n  focused?: boolean;\r\n  icons?: TreeItemIconConfig;\r\n\r\n  // If it's not defined the value will be equal to the label\r\n  value?: string;\r\n\r\n  // Item path in the tree. For example [0,0,1] means:\r\n  // tree[0].subItems[0].subItems[1]\r\n  path?: number[];\r\n}\r\n\r\ninterface SelectEventDetail {\r\n  icons: TreeItemIconConfig | undefined;\r\n  itemType: ItemType;\r\n  label: string;\r\n  open: boolean;\r\n  value: string;\r\n  path: string; // ex.: 0/0/1\r\n}\r\n```"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTree",
          "declaration": {
            "name": "VscodeTree",
            "module": "dist/vscode-tree.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "docs/bundled.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "t"
        },
        {
          "kind": "variable",
          "name": "e"
        },
        {
          "kind": "variable",
          "name": "$t",
          "default": "class extends xt{constructor(){super(...arguments),this.name=\"\",this.size=16,this.spin=!1,this.spinDuration=1.5,this._actionIcon=!1}set actionIcon(t){this._actionIcon=t,t?this.hasAttribute(\"role\")||this.setAttribute(\"role\",\"button\"):this.hasAttribute(\"role\")&&\"button\"===this.getAttribute(\"role\")&&this.removeAttribute(\"role\")}get actionIcon(){return this._actionIcon}_getStylesheetConfig(){const t=document.getElementById(\"vscode-codicon-stylesheet\"),e=(null==t?void 0:t.getAttribute(\"href\"))||void 0;return{nonce:(null==t?void 0:t.getAttribute(\"nonce\"))||void 0,href:e}}static get styles(){return[super.styles,r`:host{color:var(--vscode-icon-foreground);display:inline-block}.codicon[class*=codicon-]{display:block}.wrapper{display:block}:host([action-icon]) .wrapper{border-radius:5px;cursor:pointer;padding:3px}:host([action-icon]) .wrapper:hover{background-color:var(--vscode-toolbar-hoverBackground)}:host([action-icon]) .wrapper:active{background-color:var(--vscode-toolbar-activeBackground)}:host([action-icon]:focus){outline:0}:host([action-icon]:focus-visible){outline:1px solid var(--vscode-focusBorder);outline-offset:-1px}@keyframes icon-spin{100%{transform:rotate(360deg)}}.spin{animation-name:icon-spin;animation-timing-function:linear;animation-iteration-count:infinite}`]}render(){const{href:t,nonce:e}=this._getStylesheetConfig();return D`<link rel=\"stylesheet\" href=\"${wt(t)}\" nonce=\"${wt(e)}\"><span class=\"wrapper\"><span class=\"${mt({codicon:!0,[\"codicon-\"+this.name]:!0,spin:this.spin})}\" style=\"${yt({animationDuration:String(this.spinDuration)+\"s\",fontSize:this.size+\"px\",height:this.size+\"px\",width:this.size+\"px\"})}\"></span></span>`}}"
        },
        {
          "kind": "variable",
          "name": "zt",
          "default": "class extends xt{constructor(){super(),this.tabindex=0,this.secondary=!1,this.role=\"button\",this.disabled=!1,this.icon=\"\",this.iconAfter=\"\",this.focused=!1,this._prevTabindex=0,this._handleFocusBound=this._handleFocus.bind(this),this._handleBlurBound=this._handleBlur.bind(this),this.addEventListener(\"keydown\",this._handleKeyDown.bind(this)),this.addEventListener(\"click\",this._handleClick.bind(this))}connectedCallback(){super.connectedCallback(),this.addEventListener(\"focus\",this._handleFocusBound),this.addEventListener(\"blur\",this._handleBlurBound)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(\"focus\",this._handleFocusBound),this.removeEventListener(\"blur\",this._handleBlurBound)}attributeChangedCallback(t,e,s){super.attributeChangedCallback(t,e,s),\"disabled\"===t&&this.hasAttribute(\"disabled\")?(this._prevTabindex=this.tabindex,this.tabindex=-1):\"disabled\"!==t||this.hasAttribute(\"disabled\")||(this.tabindex=this._prevTabindex)}_handleKeyDown(t){\"Enter\"!==t.key&&\" \"!==t.key||this.hasAttribute(\"disabled\")||this.dispatchEvent(new CustomEvent(\"vsc-click\",{detail:{originalEvent:new MouseEvent(\"click\")}}))}_handleClick(t){this.hasAttribute(\"disabled\")||this.dispatchEvent(new CustomEvent(\"vsc-click\",{detail:{originalEvent:t}}))}_handleFocus(){this.focused=!0}_handleBlur(){this.focused=!1}static get styles(){return[super.styles,r`:host{align-items:center;background-color:var(--vscode-button-background);border:0;border-radius:0;box-sizing:border-box;color:var(--vscode-button-foreground);cursor:pointer;display:inline-flex;font-size:var(--vscode-font-size);font-weight:var(--vscode-font-weight);line-height:26px;padding:0 14px;user-select:none}:host([secondary]){color:var(--vscode-button-secondaryForeground);background-color:var(--vscode-button-secondaryBackground)}:host([disabled]){cursor:default;opacity:.4;pointer-events:none}:host(:hover){background-color:var(--vscode-button-hoverBackground)}:host([disabled]:hover){background-color:var(--vscode-button-background)}:host([secondary]:hover){background-color:var(--vscode-button-secondaryHoverBackground)}:host([secondary][disabled]:hover){background-color:var(--vscode-button-secondaryBackground)}:host(:active),:host(:focus){outline:0}:host(:focus){background-color:var(--vscode-button-hoverBackground);outline:1px solid var(--vscode-focusBorder);outline-offset:2px}:host([disabled]:focus){background-color:var(--vscode-button-background);outline:0}:host([secondary]:focus){background-color:var(--vscode-button-secondaryHoverBackground)}:host([secondary][disabled]:focus){background-color:var(--vscode-button-secondaryBackground)}.wrapper{align-items:center;box-sizing:border-box;display:flex;justify-content:center;position:relative;width:100%}.wrapper.has-icon-before{padding-left:21px}.wrapper.has-icon-after{padding-right:21px}.icon{color:var(--vscode-button-foreground);left:0;position:absolute}.icon-after{color:var(--vscode-button-foreground);position:absolute;right:0}`]}render(){const t=\"\"!==this.icon,e=\"\"!==this.iconAfter,s={wrapper:!0,\"has-icon-before\":t,\"has-icon-after\":e},i=t?D`<vscode-icon name=\"${this.icon}\" class=\"icon\"></vscode-icon>`:P,o=e?D`<vscode-icon name=\"${this.iconAfter}\" class=\"icon-after\"></vscode-icon>`:P;return D`<span class=\"${mt(s)}\">${i}<slot></slot>${o}</span>`}}"
        },
        {
          "kind": "variable",
          "name": "Pt",
          "default": "class extends Et{constructor(){super(...arguments),this.checked=!1,this.label=\"\",this.value=\"\",this.disabled=!1,this.isSlotEmpty=!0}_handleClick(){this.disabled||(this.checked=!this.checked,this.dispatchEvent(new CustomEvent(\"vsc-change\",{detail:{checked:this.checked,label:this.label,value:this.value},bubbles:!0,composed:!0})))}_handleKeyDown(t){this.disabled||\"Enter\"!==t.key&&\" \"!==t.key||(this.checked=!this.checked)}_handleSlotChange(){this.isSlotEmpty=\"\"===this.innerHTML}static get styles(){return[super.styles,At,Nt,Dt]}render(){const t=!this.label&&this.isSlotEmpty,e=mt({icon:!0,checked:this.checked,\"before-empty-label\":t}),s=mt({\"label-inner\":!0,empty:t}),i=D`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M14.431 3.323l-8.47 10-.79-.036-3.35-4.77.818-.574 2.978 4.24 8.051-9.506.764.646z\"/></svg>`,o=this.checked?i:P;return D`<div class=\"wrapper\"><input id=\"${this._uid}\" class=\"checkbox\" type=\"checkbox\" ?checked=\"${this.checked}\" value=\"${this.value}\" tabindex=\"-1\"><div class=\"${e}\">${o}</div><label for=\"${this._uid}\" class=\"label\" @click=\"${this._handleClick}\"><span class=\"${s}\"><slot @slotchange=\"${this._handleSlotChange}\">${this.label}</slot></span></label></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Lt",
          "default": "class extends xt{constructor(){super(...arguments),this.variant=\"horizontal\"}static get styles(){return[super.styles,r`:host{display:block}.wrapper{display:flex;flex-wrap:wrap}:host([variant=vertical]) .wrapper{display:block}::slotted(vscode-checkbox){margin-right:20px}::slotted(vscode-checkbox:last-child){margin-right:0}:host([variant=vertical]) ::slotted(vscode-checkbox){display:block;margin-bottom:15px}:host([variant=vertical]) ::slotted(vscode-checkbox:last-child){margin-bottom:0}`]}render(){return D`<div class=\"wrapper\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ut",
          "default": "class extends xt{constructor(){super(...arguments),this.title=\"\",this.open=!1}_onHeaderClick(){this.open=!this.open}_onHeaderKeyDown(t){\"Enter\"===t.key&&(this.open=!this.open)}static get styles(){return[super.styles,r`.collapsible{background-color:var(--vscode-sideBar-background)}.collapsible-header{align-items:center;background-color:var(--vscode-sideBarSectionHeader-background);cursor:pointer;display:flex;height:22px;line-height:22px;user-select:none}.collapsible-header:focus{opacity:1;outline-offset:-1px;outline-style:solid;outline-width:1px;outline-color:var(--vscode-focusBorder)}.collapsible-header h3{color:var(--vscode-sideBarTitle-foreground);font-size:11px;font-weight:700;margin:0;text-transform:uppercase}.header-icon{color:var(--vscode-icon-foreground);display:block;margin:0 3px}.collapsible.open .header-icon{transform:rotate(90deg)}.actions{display:none;margin-left:auto;margin-right:4px}.collapsible.open .actions{display:block}slot[name=actions]::slotted(div){align-items:center;display:flex}.collapsible-body{display:none;overflow:hidden}.collapsible.open .collapsible-body{display:block}`]}render(){const t=mt({collapsible:!0,open:this.open}),e=D`<svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" class=\"header-icon\"><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M10.072 8.024L5.715 3.667l.618-.62L11 7.716v.618L6.333 13l-.618-.619 4.357-4.357z\"/></svg>`;return D`<div class=\"${t}\"><div class=\"collapsible-header\" tabindex=\"0\" title=\"${this.title}\" @click=\"${this._onHeaderClick}\" @keydown=\"${this._onHeaderKeyDown}\">${e}<h3 class=\"title\">${this.title}</h3><div class=\"actions\"><slot name=\"actions\"></slot></div></div><div class=\"collapsible-body\"><div><slot name=\"body\"></slot></div></div></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ht",
          "default": "class extends xt{constructor(){super(...arguments),this.label=\"\",this.keybinding=\"\",this.value=\"\",this.separator=!1,this.tabindex=0}onItemClick(){this.dispatchEvent(new CustomEvent(\"vsc-click\",{detail:{label:this.label,keybinding:this.keybinding,value:this.value||this.label,separator:this.separator,tabindex:this.tabindex},bubbles:!0,composed:!0}))}static get styles(){return[super.styles,r`:host{display:block;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);font-weight:var(--vscode-font-weight);line-height:1.4em;outline:0;position:relative}.context-menu-item{background-color:var(--vscode-menu-background);color:var(--vscode-menu-foreground);border:1px solid transparent;display:flex;user-select:none;white-space:nowrap}.rule{border-bottom:1px solid var(--vscode-menu-separatorBackground);display:block;margin:0 .8em .2em;opacity:.4;padding-top:.2em;width:100%}.context-menu-item a{align-items:center;color:var(--vscode-menu-foreground);cursor:default;display:flex;flex:1 1 auto;height:2em;outline:0;position:relative;text-decoration:inherit}.context-menu-item a:hover,:host-context(:focus) .context-menu-item a{background-color:var(--vscode-menu-selectionBackground);color:var(--vscode-menu-selectionForeground)}.label{background:0 0;display:flex;flex:1 1 auto;font-size:12px;line-height:1;padding:0 2em;text-decoration:none}.keybinding{display:block;flex:2 1 auto;line-height:1;padding:0 2em;text-align:right}`]}render(){return D`${this.separator?D`<div class=\"context-menu-item separator\"><span class=\"rule\"></span></div>`:D`<div class=\"context-menu-item\"><a @click=\"${this.onItemClick}\">${this.label?D`<span class=\"label\">${this.label}</span>`:P} ${this.keybinding?D`<span class=\"keybinding\">${this.keybinding}</span>`:P}</a></div>`}`}}"
        },
        {
          "kind": "variable",
          "name": "Wt",
          "default": "class extends xt{constructor(){super(...arguments),this.data=[],this.show=!1}onItemClick(t){const{detail:e}=t;this.dispatchEvent(new CustomEvent(\"vsc-select\",{detail:e,bubbles:!0,composed:!0}))}static get styles(){return[super.styles,r`:host{display:block;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);font-weight:var(--vscode-font-weight);line-height:1.4em;position:relative}.context-menu{background-color:var(--vscode-menu-background);box-shadow:0 2px 8px var(--vscode-widget-shadow);color:var(--vscode-menu-foreground);padding:.5em 0;white-space:nowrap}.context-menu-item{border:1px solid transparent;display:flex;user-select:none}.rule{border-bottom:1px solid var(--vscode-menu-separatorBackground);display:block;margin:0 .8em .2em;opacity:.4;padding-top:.2em;width:100%}.context-menu-item a{align-items:center;color:var(--vscode-menu-foreground);cursor:default;display:flex;flex:1 1 auto;height:2em;outline:0;position:relative;text-decoration:inherit}.context-menu-item a:focus,.context-menu-item a:hover{background-color:var(--vscode-menu-selectionBackground);color:var(--vscode-menu-selectionForeground)}.label{background:0 0;display:flex;flex:1 1 auto;font-size:12px;line-height:1;padding:0 2em;text-decoration:none}.keybinding{display:block;flex:2 1 auto;line-height:1;padding:0 2em;text-align:right}`]}render(){const t=D`<div class=\"context-menu\">${this.data?this.data.map((({label:t=\"\",keybinding:e=\"\",value:s=\"\",separator:i=!1,tabindex:o=0})=>D`<vscode-context-menu-item label=\"${t}\" keybinding=\"${e}\" value=\"${s}\" ?separator=\"${i}\" tabindex=\"${o}\" @vsc-click=\"${this.onItemClick}\"></vscode-context-menu-item>`)):D`<slot></slot>`}</div>`;return D`${this.show?t:P}`}}"
        },
        {
          "kind": "variable",
          "name": "Yt",
          "default": "class extends xt{constructor(){super(...arguments),this.breakpoint=490,this._responsive=!1,this._firstUpdateComplete=!1,this._resizeObserverCallbackBound=this._resizeObserverCallback.bind(this)}set responsive(t){this._responsive=t,this._firstUpdateComplete&&(t?this._activateResponsiveLayout():this._deactivateResizeObserver())}get responsive(){return this._responsive}get data(){return this._collectFormData()}_collectFormData(){const t=[\"vscode-inputbox\",\"vscode-single-select\",\"vscode-multi-select\",\"vscode-checkbox\",\"vscode-radio\"].join(\",\"),e=this.querySelectorAll(t),s={};return e.forEach((t=>{if(!t.hasAttribute(\"name\"))return;const e=t.getAttribute(\"name\");e&&(Zt(t)&&t.checked?s[e]=Array.isArray(s[e])?[...s[e],t.value]:[t.value]:\"vscode-multi-select\"===t.tagName.toLocaleLowerCase()?s[e]=t.value:Zt(t)&&!t.checked?s[e]=Array.isArray(s[e])?s[e]:[]:Xt(t)&&t.checked||(t=>\"vscode-inputbox\"===t.tagName.toLocaleLowerCase())(t)||(t=>\"vscode-single-select\"===t.tagName.toLocaleLowerCase())(t)?s[e]=t.value:Xt(t)&&!t.checked&&(s[e]=s[e]?s[e]:\"\"))})),s}_toggleCompactLayout(t){this._assignedNodes.filter((t=>t.matches&&t.matches(\"vscode-form-group\"))).forEach((e=>{e.dataset.originalVariant||(e.dataset.originalVariant=e.variant);const s=e.dataset.originalVariant;t===qt.VERTICAL&&\"horizontal\"===s?e.variant=\"vertical\":e.variant=s;e.querySelectorAll(\"vscode-checkbox-group, vscode-radio-group\").forEach((e=>{e.dataset.originalVariant||(e.dataset.originalVariant=e.variant);const s=e.dataset.originalVariant;t===qt.HORIZONTAL&&s===qt.HORIZONTAL?e.variant=\"horizontal\":e.variant=\"vertical\"}))}))}_resizeObserverCallback(t){let e=0;for(const s of t)e=s.contentRect.width;const s=e<this.breakpoint?qt.VERTICAL:qt.HORIZONTAL;s!==this._currentFormGroupLayout&&(this._toggleCompactLayout(s),this._currentFormGroupLayout=s)}_activateResponsiveLayout(){this._resizeObserver=new ResizeObserver(this._resizeObserverCallbackBound),this._resizeObserver.observe(this._wrapperElement)}_deactivateResizeObserver(){var t;null===(t=this._resizeObserver)||void 0===t||t.disconnect(),this._resizeObserver=null}static get styles(){return[super.styles,r`:host{display:block;max-width:727px}`]}firstUpdated(){this._firstUpdateComplete=!0,this._responsive&&this._activateResponsiveLayout()}render(){return D`<div class=\"wrapper\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Qt",
          "default": "class extends xt{static get styles(){return[super.styles,r`:host{display:block;margin-top:9px}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "ee",
          "default": "class extends xt{static get styles(){return[super.styles,r`:host{color:var(--vscode-foreground);cursor:default;display:block;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);line-height:1.4;margin:3px 0;opacity:.9;overflow:hidden;user-select:text}::slotted(a),::slotted(a:visited){color:var(--vscode-textLink-foreground);text-decoration:none}::slotted(a:active),::slotted(a:hover){color:var(--vscode-textLink-activeForeground);text-decoration:underline}::slotted(code){color:var(--vscode-textPreformat-foreground)}::slotted(p){line-height:1.4;margin-bottom:9px;margin-top:9px}::slotted(p:first-child){margin-top:0}::slotted(p:last-child){margin-bottom:0}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "ie",
          "default": "class extends xt{static get styles(){return[super.styles,r`:host{display:block;padding:12px 0 18px}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "re",
          "default": "class extends xt{static get styles(){return[super.styles,r`:host{color:var(--vscode-foreground);cursor:default;display:block;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);font-weight:600;line-height:1.4;overflow:hidden;text-overflow:ellipsis;user-select:text;white-space:nowrap}::slotted(b){font-weight:600;opacity:.9}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "le",
          "default": "class extends xt{constructor(){super(...arguments),this.variant=\"horizontal\"}static get styles(){return[super.styles,r`:host{--label-right-margin:14px;--label-default-width:150px;display:block;margin:15px 0}:host([variant=settings-group]){margin:0;padding:12px 14px 18px;max-width:727px}.wrapper{display:flex;flex-wrap:wrap}:host([variant=settings-group]) .wrapper,:host([variant=vertical]) .wrapper{display:block}:host([variant=horizontal]) ::slotted(vscode-checkbox-group),:host([variant=horizontal]) ::slotted(vscode-radio-group){width:calc(100% - calc(var(--vsc-inline-label-width,var(--label-default-width)) + var(--label-right-margin)))}:host([variant=horizontal]) ::slotted(vscode-label){margin-right:var(--label-right-margin);text-align:right;width:var(--vsc-inline-label-width,var(--label-default-width))}:host([variant=settings-group]) ::slotted(vscode-label){height:18px;line-height:18px;margin-bottom:4px;margin-right:0}::slotted(vscode-form-helper){margin-left:calc(var(--vsc-inline-label-width,var(--label-default-width)) + var(--label-right-margin))}:host([variant=settings-group]) ::slotted(vscode-form-helper),:host([variant=vertical]) ::slotted(vscode-form-helper){display:block;margin-left:0}:host([variant=settings-group]) ::slotted(vscode-form-helper){margin-bottom:0;margin-top:0}:host([variant=settings-group]) ::slotted(vscode-label),:host([variant=vertical]) ::slotted(vscode-label){display:block;margin-left:0;text-align:left}:host([variant=settings-group]) ::slotted(vscode-inputbox),:host([variant=settings-group]) ::slotted(vscode-multi-select),:host([variant=settings-group]) ::slotted(vscode-single-select){margin-top:9px}::slotted(vscode-button:first-child){margin-left:calc(var(--vsc-inline-label-width,var(--label-default-width)) + var(--label-right-margin))}:host([variant=vertical]) ::slotted(vscode-button){margin-left:0}::slotted(vscode-button){margin-right:4px}`]}render(){return D`<div class=\"wrapper\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "ce",
          "default": "class extends xt{constructor(){super(),It()}static get styles(){const t=r`:host{color:var(--vsc-foreground-translucent);display:block;margin-bottom:4px;margin-top:4px;max-width:720px}:host([vertical]){margin-left:0}`;return[super.styles,t,Dt]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "ve",
          "default": "class extends xt{constructor(){super(),this.label=\"\",this.multiline=!1,this.message=\"\",this.panelInput=!1,this.type=\"text\",this.focused=!1,this.value=\"\",this.placeholder=\"\",this.lines=2,this.maxLines=5,this.min=void 0,this.minLength=void 0,this.max=void 0,this.maxLength=void 0,this.multiple=!1,this.readonly=!1,this.step=void 0,this._textareaHeight=0,this._textareaDefaultCursor=!1,this.onInputFocus=()=>{this.focused=!0},this.onInputBlur=()=>{this.focused=!1},this.onInputInput=t=>{const e=t.target;this.value=e.value,this.dispatchEvent(new CustomEvent(\"vsc-input\",{detail:e.value,bubbles:!0,composed:!0})),this.resizeTextareaIfRequired()},this.onInputChange=t=>{const e=t.target;this.dispatchEvent(new CustomEvent(\"vsc-change\",{detail:e.value,bubbles:!0,composed:!0}))},this.onTextareaMouseMove=t=>{const e=this.getBoundingClientRect(),s=t.clientX;this._textareaDefaultCursor=s<=e.left+e.width&&s>=e.left+e.width-10-2,this.requestUpdate()},this.resizeTextareaIfRequired=()=>{if(!this._measurerEl||!this.multiline)return;const{height:t}=this._measurerEl.getBoundingClientRect();0===t?(this._textareaHeight=ue(this.lines),this._measurerEl.style.minHeight=`${ue(this.lines)}px`):this._textareaHeight=t},this._severity=he.DEFAULT}set severity(t){const e=this._severity;switch(t){case he.INFO:case he.WARNING:case he.ERROR:this._severity=t;break;default:this._severity=he.DEFAULT}this.requestUpdate(\"messageSeverity\",e)}get severity(){return this._severity}connectedCallback(){super.connectedCallback(),this.resizeTextareaIfRequired()}updated(t){t.has(\"value\")&&this.resizeTextareaIfRequired()}get focusElement(){return this._inputElement}focus(){this._inputElement.focus()}toString(){return\"[object VscodeInputbox]\"}static get styles(){return[super.styles,r`:host{display:inline-block;max-width:100%;width:320px}:host([size-variant=narrow]){width:200px}:host([size-variant=wide]){width:500px}.container{position:relative}.cursor-default{cursor:default}textarea{left:0;overflow:visible;position:absolute;resize:none;top:0}.content-measurer::-webkit-scrollbar,textarea::-webkit-scrollbar{cursor:default;width:10px}.content-measurer::-webkit-scrollbar-button,textarea::-webkit-scrollbar-button{display:none}textarea::-webkit-scrollbar-track{background-color:transparent;width:10px}.content-measurer::-webkit-scrollbar-track{width:10px}textarea::-webkit-scrollbar-thumb{background-color:transparent}textarea:hover::-webkit-scrollbar-thumb{background-color:var(--vscode-scrollbarSlider-background)}textarea:hover::-webkit-scrollbar-thumb:hover{background-color:var(--vscode-scrollbarSlider-hoverBackground)}textarea:hover::-webkit-scrollbar-thumb:active{background-color:var(--vscode-scrollbarSlider-activeBackground)}input,textarea{background-color:var(--vscode-input-background);border-color:var(--vscode-settings-textInputBorder,transparent);border-style:solid;border-width:1px;box-sizing:border-box;color:var(--vscode-input-foreground);display:block;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);line-height:${1.2307692307692308};outline:0;padding:4px;width:100%}input::placeholder,textarea::placeholder{color:var(--vscode-input-placeholderForeground)}input::selection,textarea::selection{background-color:var(--vscode-editor-selectionBackground)}input:focus,textarea:focus{border-color:var(--vscode-focusBorder)}.container.panel-input input,.container.panel-input textarea{border-color:var(--vscode-panelInput-border)}.container.default input,.container.default textarea,.container.panel-input.default input,.container.panel-input.default textarea{border-color:var(--vscode-focusBorder)}.container.info input,.container.info textarea,.container.panel-input.info input,.container.panel-input.info textarea{border-color:var(--vscode-inputValidation-infoBorder)}.container.panel-input.warning input,.container.panel-input.warning textarea,.container.warning input,.container.warning textarea{border-color:var(--vscode-inputValidation-warningBorder)}.container.error input,.container.error textarea,.container.panel-input.error input,.container.panel-input.error textarea{border-color:var(--vscode-inputValidation-errorBorder)}.message{border-style:solid;border-width:1px;box-sizing:border-box;display:none;font-size:12px;line-height:17px;margin-top:-1px;overflow:hidden;padding:.4em;position:absolute;user-select:none;top:100%;text-align:left;width:100%;word-wrap:break-word}.focused:not(.default) .message{display:block}.message.default{background-color:var(--vscode-editor-background);border-color:var(--vscode-focusBorder)}.message.info{background-color:var(--vscode-inputValidation-infoBackground);border-color:var(--vscode-inputValidation-infoBorder)}.message.warning{background-color:var(--vscode-inputValidation-warningBackground);border-color:var(--vscode-inputValidation-warningBorder)}.message.error{background-color:var(--vscode-inputValidation-errorBackground);border-color:var(--vscode-inputValidation-errorBorder)}.content-measurer{background-color:green;border:1px solid transparent;box-sizing:border-box;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);left:0;line-height:${1.2307692307692308};overflow:auto;padding:4px;text-align:left;top:0;visibility:hidden;word-break:break-all}`]}render(){const t=ue(this.lines),e=ue(this.maxLines),s=yt({minHeight:`${t}px`,maxHeight:`${e}px`}),i=yt({height:`${this._textareaHeight}px`}),o=mt({container:!0,severity:this.severity!==he.DEFAULT,focused:this.focused}),r=this.value?this.value.split(\"\\n\").map((t=>t?D`<div>${t}</div>`:D`<div> </div>`)):D` `,n=D`<textarea @focus=\"${this.onInputFocus}\" @blur=\"${this.onInputBlur}\" @input=\"${this.onInputInput}\" @change=\"${this.onInputChange}\" @mousemove=\"${this.onTextareaMouseMove}\" class=\"${mt({\"cursor-default\":this._textareaDefaultCursor,\"input-element\":!0})}\" minlength=\"${wt(this.minLength)}\" maxlength=\"${wt(this.maxLength)}\" placeholder=\"${this.placeholder}\" ?readonly=\"${this.readonly}\" style=\"${i}\" .value=\"${this.value}\"></textarea><div class=\"content-measurer\" style=\"${s}\">${r}</div>`,l=D`<input type=\"${this.type}\" @focus=\"${this.onInputFocus}\" @blur=\"${this.onInputBlur}\" @input=\"${this.onInputInput}\" @change=\"${this.onInputChange}\" placeholder=\"${this.placeholder}\" min=\"${wt(this.min)}\" minlength=\"${wt(this.minLength)}\" max=\"${wt(this.max)}\" maxlength=\"${wt(this.maxLength)}\" ?multiple=\"${this.multiple}\" ?readonly=\"${this.readonly}\" step=\"${wt(this.step)}\" .value=\"${this.value}\" class=\"input-element\">`,a=D`<div class=\"message ${this.severity}\">${this.message}</div>`;return D`<div class=\"${o}\"><div class=\"helper\"><slot name=\"helper\"></slot></div><div class=\"input-wrapper\">${this.multiline?n:l} ${this.message?a:\"\"}</div></div>`}}"
        },
        {
          "kind": "variable",
          "name": "be",
          "default": "class extends xt{constructor(){super(...arguments),this.for=\"\"}static get styles(){return[super.styles,r`:host{cursor:default;display:block}.wrapper{color:var(--vscode--settings-headerForeground);font-size:var(--vscode-font-size);font-weight:600;line-height:${1.2307692307692308};padding:5px 0}:host-context(vscode-form-group[variant=settings-group]) .wrapper{line-height:18px;padding:0}::slotted(.normal){font-weight:400}::slotted(.lightened){color:var(--vscode-foreground);opacity:.9}`]}_handleClick(){let t;if(this.for){const e=this.getRootNode({composed:!1});e&&(t=e.querySelector(`#${this.for}`),t&&\"focus\"in t&&t.focus())}}render(){return D`<div class=\"wrapper\" @click=\"${this._handleClick}\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Be",
          "default": "class extends Se{constructor(){super(...arguments),this._multiple=!0}set selectedIndexes(t){this._selectedIndexes=t}get selectedIndexes(){return this._selectedIndexes}set value(t){this._values=t;const e={};this._options.forEach((({value:t},s)=>{e[t]=s})),this._selectedIndexes=[],t.forEach((t=>{e[t]&&this._selectedIndexes.push(e[t])}))}get value(){return this._values}_onOptionClick(t){const e=t.composedPath().find((t=>\"matches\"in t&&t.matches(\"li.option\")));if(!e)return;const s=Number(e.dataset.index);this._options[s]&&(this._options[s].selected=!this._options[s].selected),this._selectedIndexes=[],this._values=[],this._options.forEach((t=>{t.selected&&(this._selectedIndexes.push(t.index),this._values.push(t.value))})),this._dispatchChangeEvent()}_onMultiAcceptClick(){this._toggleDropdown(!1)}_onMultiDeselectAllClick(){this._selectedIndexes=[],this._values=[],this._options=this._options.map((t=>({...t,selected:!1}))),this._dispatchChangeEvent()}_onMultiSelectAllClick(){this._selectedIndexes=[],this._values=[],this._options=this._options.map((t=>({...t,selected:!0}))),this._options.forEach(((t,e)=>{this._selectedIndexes.push(e),this._values.push(t.value),this._dispatchChangeEvent()}))}_renderLabel(){switch(this._selectedIndexes.length){case 0:return D`<span class=\"select-face-badge no-item\">No items selected</span>`;case 1:return D`<span class=\"select-face-badge\">1 item selected</span>`;default:return D`<span class=\"select-face-badge\">${this._selectedIndexes.length} items selected</span>`}}_renderSelectFace(){return D`<div class=\"select-face multiselect\" @click=\"${this._onFaceClick}\">${this._renderLabel()} ${_e}</div>`}_renderComboboxFace(){const t=this._selectedIndex>-1?this._options[this._selectedIndex].label:\"\";return D`<div class=\"combobox-face\">${this._renderLabel()} <input class=\"combobox-input\" spellcheck=\"false\" type=\"text\" .value=\"${t}\" @focus=\"${this._onComboboxInputFocus}\" @input=\"${this._onComboboxInputInput}\"> <button class=\"combobox-button\" type=\"button\" @click=\"${this._onComboboxButtonClick}\" @keydown=\"${this._onComboboxButtonKeyDown}\">${_e}</button></div>`}_renderOptions(){const t=this.combobox?this._filteredOptions:this._options;return D`<ul class=\"options\" @click=\"${this._onOptionClick}\" @mouseover=\"${this._onOptionMouseOver}\">${$e(t,(t=>t.index),((t,e)=>{const s=this._selectedIndexes.includes(t.index),i=mt({active:e===this._activeIndex,option:!0,selected:s}),o=mt({\"checkbox-icon\":!0,checked:s});return D`<li class=\"${i}\" data-index=\"${t.index}\" data-filtered-index=\"${e}\"><span class=\"${o}\"></span> <span class=\"option-label\">${t.label}</span></li>`}))}</ul>`}_renderDropdownControls(){return D`<div class=\"dropdown-controls\"><button type=\"button\" @click=\"${this._onMultiSelectAllClick}\" title=\"Select all\" class=\"action-icon\"><vscode-icon name=\"checklist\"></vscode-icon></button> <button type=\"button\" @click=\"${this._onMultiDeselectAllClick}\" title=\"Deselect all\" class=\"action-icon\"><vscode-icon name=\"clear-all\"></vscode-icon></button><vscode-button @click=\"${this._onMultiAcceptClick}\">OK</vscode-button></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ie",
          "default": "class extends xt{constructor(){super(...arguments),this.value=\"\",this.description=\"\",this.selected=!1,this.disabled=!1}static get styles(){return[super.styles]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "Ae",
          "default": "class extends Et{constructor(){super(...arguments),this.label=\"\",this.name=\"\",this.value=\"\",this.disabled=!1,this._checked=!1,this.isSlotEmpty=!0}set checked(t){this._checked=t}get checked(){return this._checked}_checkButton(){const t=this.getRootNode({composed:!0});if(!t)return;const e=t.querySelectorAll(`vscode-radio[name=\"${this.name}\"]`);this._checked=!0,e.forEach((t=>{t!==this&&(t.checked=!1)}))}_handleClick(){this.disabled||(this._checkButton(),this.dispatchEvent(new CustomEvent(\"vsc-change\",{detail:{checked:this.checked,label:this.label,value:this.value},bubbles:!0,composed:!0})))}_handleKeyDown(t){this.disabled||\"Enter\"!==t.key&&\" \"!==t.key||(this.checked=!0)}_handleSlotChange(){this.isSlotEmpty=\"\"===this.innerHTML}static get styles(){return[super.styles,At,Me,Dt]}render(){const t=!this.label&&this.isSlotEmpty,e=mt({icon:!0,checked:this.checked,\"before-empty-label\":t}),s=mt({\"label-inner\":!0,empty:t});return D`<div class=\"wrapper\"><input id=\"${this._uid}\" class=\"radio\" type=\"checkbox\" ?checked=\"${this.checked}\" value=\"${this.value}\" tabindex=\"-1\"><div class=\"${e}\"></div><label for=\"${this._uid}\" class=\"label\" @click=\"${this._handleClick}\"><span class=\"${s}\"><slot @slotchange=\"${this._handleSlotChange}\">${this.label}</slot></span></label></div>`}}"
        },
        {
          "kind": "variable",
          "name": "De",
          "default": "class extends xt{constructor(){super(...arguments),this.variant=\"horizontal\",this.inline=!1}static get styles(){return[super.styles,r`:host{display:block}.wrapper{display:flex;flex-wrap:wrap}:host([variant=vertical]) .wrapper{display:block}::slotted(vscode-radio){margin-right:20px}::slotted(vscode-radio:last-child){margin-right:0}:host([variant=vertical]) ::slotted(vscode-radio){display:block;margin-bottom:15px}:host([variant=vertical]) ::slotted(vscode-radio:last-child){margin-bottom:0}`]}render(){return D`<div class=\"wrapper\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Pe",
          "default": "class extends Se{constructor(){super(),this.role=\"listbox\",this._labelText=\"\",this._multiple=!1}set selectedIndex(t){this._selectedIndex=t,this._value=this._options[this._selectedIndex]?this._options[this._selectedIndex].value:\"\",this._labelText=this._options[this._selectedIndex]?this._options[this._selectedIndex].label:\"\"}get selectedIndex(){return this._selectedIndex}set value(t){this._options[this._selectedIndex]&&(this._options[this._selectedIndex].selected=!1),this._selectedIndex=this._options.findIndex((e=>e.value===t)),this._selectedIndex>-1?(this._options[this._selectedIndex].selected=!0,this._labelText=this._options[this._selectedIndex].label,this._value=t):(this._labelText=\"\",this._value=\"\")}get value(){var t;return this._options[this._selectedIndex]?null===(t=this._options[this._selectedIndex])||void 0===t?void 0:t.value:\"\"}updateInputValue(){if(!this.combobox)return;const t=this.renderRoot.querySelector(\".combobox-input\");t&&(t.value=this._options[this._selectedIndex]?this._options[this._selectedIndex].label:\"\")}_onSlotChange(){super._onSlotChange(),this._selectedIndex>-1&&(this._labelText=this._options[this._selectedIndex].label)}_onArrowUpKeyDown(){super._onArrowUpKeyDown(),this._showDropdown||this._selectedIndex<=0||(this._filterPattern=\"\",this._selectedIndex-=1,this._activeIndex=this._selectedIndex,this._labelText=this._options[this._selectedIndex].label,this._value=this._options[this._selectedIndex].value,this._dispatchChangeEvent())}_onArrowDownKeyDown(){super._onArrowDownKeyDown(),this._showDropdown||this._selectedIndex>=this._options.length||(this._filterPattern=\"\",this._selectedIndex+=1,this._activeIndex=this._selectedIndex,this._labelText=this._options[this._selectedIndex].label,this._value=this._options[this._selectedIndex].value,this._dispatchChangeEvent())}_onEnterKeyDown(){super._onEnterKeyDown(),this._selectedIndex>-1&&(this._labelText=this._options[this._selectedIndex].label),this.updateInputValue()}_onOptionClick(t){const e=t.composedPath().find((t=>{var e;return null===(e=t)||void 0===e?void 0:e.matches(\"li.option\")}));e&&!e.matches(\".disabled\")&&(this._selectedIndex=Number(e.dataset.index),this._value=this._options[this._selectedIndex].value,this._selectedIndex>-1&&(this._labelText=this._options[this._selectedIndex].label),this._toggleDropdown(!1),this._dispatchChangeEvent())}_renderLabel(){const t=this._labelText||D`<span class=\"empty-label-placeholder\"></span>`;return D`<span class=\"text\">${t}</span>`}_renderSelectFace(){return D`<div class=\"select-face\" @click=\"${this._onFaceClick}\">${this._renderLabel()} ${_e}</div>`}_renderComboboxFace(){const t=this._selectedIndex>-1?this._options[this._selectedIndex].label:\"\";return D`<div class=\"combobox-face\"><input class=\"combobox-input\" spellcheck=\"false\" type=\"text\" .value=\"${t}\" @focus=\"${this._onComboboxInputFocus}\" @input=\"${this._onComboboxInputInput}\"> <button class=\"combobox-button\" type=\"button\" @click=\"${this._onComboboxButtonClick}\" @keydown=\"${this._onComboboxButtonKeyDown}\">${_e}</button></div>`}_renderOptions(){const t=(this.combobox?this._filteredOptions:this._options).map(((t,e)=>{const s=mt({option:!0,active:e===this._activeIndex&&!t.disabled,disabled:t.disabled});return D`<li class=\"${s}\" data-index=\"${t.index}\" data-filtered-index=\"${e}\">${t.label}</li>`}));return D`<ul class=\"options\" @mouseover=\"${this._onOptionMouseOver}\" @click=\"${this._onOptionClick}\">${t}</ul>`}}"
        },
        {
          "kind": "variable",
          "name": "Le",
          "default": "class extends xt{constructor(){super(...arguments),this.shadow=!0,this.scrolled=!1,this._isDragging=!1,this._thumbHeight=0,this._thumbY=0,this._thumbVisible=!1,this._thumbFade=!1,this._thumbActive=!1,this._scrollThumbStartY=0,this._mouseStartY=0,this._scrollbarVisible=!0,this._scrollbarTrackZ=0,this._resizeObserverCallbackBound=this._resizeObserverCallback.bind(this),this._onScrollThumbMouseMoveBound=this._onScrollThumbMouseMove.bind(this),this._onScrollThumbMouseUpBound=this._onScrollThumbMouseUp.bind(this),this._onComponentMouseOverBound=this._onComponentMouseOver.bind(this),this._onComponentMouseOutBound=this._onComponentMouseOut.bind(this)}set scrollPos(t){this._scrollableContainer.scrollTop=t}get scrollPos(){return this._scrollableContainer.scrollTop}get scrollMax(){return this._scrollableContainer.scrollHeight}connectedCallback(){super.connectedCallback(),this._resizeObserver=new ResizeObserver(this._resizeObserverCallbackBound),this.requestUpdate(),this.updateComplete.then((()=>{this._scrollableContainer.addEventListener(\"scroll\",this._onScrollableContainerScroll.bind(this)),this._resizeObserver.observe(this._contentElement)})),this.addEventListener(\"mouseover\",this._onComponentMouseOverBound),this.addEventListener(\"mouseout\",this._onComponentMouseOutBound)}disconnectedCallback(){super.disconnectedCallback(),this._resizeObserver.unobserve(this),this._resizeObserver.disconnect(),this.removeEventListener(\"mouseover\",this._onComponentMouseOverBound),this.removeEventListener(\"mouseout\",this._onComponentMouseOutBound)}_resizeObserverCallback(){this._updateScrollbar()}_updateScrollbar(){const t=this.getBoundingClientRect(),e=this._contentElement.getBoundingClientRect();t.height>=e.height?this._scrollbarVisible=!1:(this._scrollbarVisible=!0,this._thumbHeight=t.height*(t.height/e.height)),this.requestUpdate()}_zIndexFix(){let t=0;this._assignedNodes.forEach((e=>{if(\"style\"in e){const s=window.getComputedStyle(e).zIndex;/([0-9-])+/g.test(s)&&(t=Number(s)>t?Number(s):t)}})),this._scrollbarTrackZ=t+1,this.requestUpdate()}_onSlotChange(){this._updateScrollbar(),this._zIndexFix()}_onScrollThumbMouseDown(t){const e=this.getBoundingClientRect(),s=this._scrollThumbElement.getBoundingClientRect();this._mouseStartY=t.screenY,this._scrollThumbStartY=s.top-e.top,this._isDragging=!0,this._thumbActive=!0,document.addEventListener(\"mousemove\",this._onScrollThumbMouseMoveBound),document.addEventListener(\"mouseup\",this._onScrollThumbMouseUpBound)}_onScrollThumbMouseMove(t){const e=this._scrollThumbStartY+(t.screenY-this._mouseStartY);let s=0;const i=this.getBoundingClientRect().height,o=this._scrollThumbElement.getBoundingClientRect().height,r=this._contentElement.getBoundingClientRect().height;s=e<0?0:e>i-o?i-o:e,this._thumbY=s,this._scrollableContainer.scrollTop=s/(i-o)*(r-i)}_onScrollThumbMouseUp(t){this._isDragging=!1,this._thumbActive=!1;const e=this.getBoundingClientRect(),{x:s,y:i,width:o,height:r}=e,{pageX:n,pageY:l}=t;(n>s+o||n<s||l>i+r||l<i)&&(this._thumbFade=!0,this._thumbVisible=!1),document.removeEventListener(\"mousemove\",this._onScrollThumbMouseMoveBound),document.removeEventListener(\"mouseup\",this._onScrollThumbMouseUpBound)}_onScrollableContainerScroll(){const t=this._scrollableContainer.scrollTop;this.scrolled=t>0;const e=this.getBoundingClientRect().height,s=this._scrollThumbElement.getBoundingClientRect().height,i=t/(this._contentElement.getBoundingClientRect().height-e);this._thumbY=i*(e-s)}_onComponentMouseOver(){this._thumbVisible=!0,this._thumbFade=!1}_onComponentMouseOut(){this._thumbActive||(this._thumbVisible=!1,this._thumbFade=!0)}static get styles(){return[super.styles,r`:host{display:block;position:relative}.scrollable-container{height:100%;overflow:auto}.scrollable-container::-webkit-scrollbar{cursor:default;width:0}.shadow{box-shadow:var(--vscode-scrollbar-shadow) 0 6px 6px -6px inset;display:none;height:3px;left:0;pointer-events:none;position:absolute;top:0;z-index:1;width:100%}.shadow.visible{display:block}.scrollbar-track{height:100%;position:absolute;right:0;top:0;width:10px;z-index:100}.scrollbar-track.hidden{display:none}.scrollbar-thumb{background-color:transparent;min-height:var(--min-thumb-height,20px);opacity:0;position:absolute;right:0;width:10px}.scrollbar-thumb.visible{background-color:var(--vscode-scrollbarSlider-background);opacity:1;transition:opacity .1s}.scrollbar-thumb.fade{background-color:var(--vscode-scrollbarSlider-background);opacity:0;transition:opacity .8s}.scrollbar-thumb.visible:hover{background-color:var(--vscode-scrollbarSlider-hoverBackground)}.scrollbar-thumb.visible.active,.scrollbar-thumb.visible.active:hover{background-color:var(--vscode-scrollbarSlider-activeBackground)}.content{overflow:hidden}`]}render(){return D`<div class=\"scrollable-container\" style=\"${yt({\"user-select\":this._isDragging?\"none\":\"auto\"})}\"><div class=\"${mt({shadow:!0,visible:this.scrolled})}\"></div><div class=\"${mt({\"scrollbar-track\":!0,hidden:!this._scrollbarVisible})}\" style=\"${yt({\"z-index\":String(this._scrollbarTrackZ)})}\"><div class=\"${mt({\"scrollbar-thumb\":!0,visible:this._thumbVisible,fade:this._thumbFade,active:this._thumbActive})}\" style=\"${yt({height:`${this._thumbHeight}px`,top:`${this._thumbY}px`})}\" @mousedown=\"${this._onScrollThumbMouseDown}\"></div></div><div class=\"content\"><slot @slotchange=\"${this._onSlotChange}\"></slot></div></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ue",
          "default": "class extends xt{constructor(){super(...arguments),this.split=\"vertical\",this.resetOnDblClick=!1,this.initialPos=\"50%\",this._startPaneRight=0,this._startPaneBottom=0,this._endPaneTop=0,this._endPaneLeft=0,this._handleLeft=0,this._handleTop=0,this._isDragActive=!1,this._hover=!1,this._hide=!1,this._boundRect=new DOMRect,this._handleOffset=0,this._handleMouseUpBound=this._handleMouseUp.bind(this),this._handleMouseMoveBound=this._handleMouseMove.bind(this)}connectedCallback(){super.connectedCallback(),this._boundRect=this.getBoundingClientRect(),this._initPosition()}_initPosition(){const{height:t,width:e}=this._boundRect,s=\"vertical\"===this.split?e:t,i=/(^[0-9.]+)(%{0,1})$/.exec(this.initialPos);let o=0,r=0;i&&(r=parseFloat(i[1])),o=i&&\"%\"===i[2]?Math.min(s,s/100*r):i&&\"%\"!==i[2]?Math.min(r,s):s/2,\"vertical\"===this.split&&(this._startPaneRight=s-o,this._endPaneLeft=o,this._handleLeft=o),\"horizontal\"===this.split&&(this._startPaneBottom=s-o,this._endPaneTop=o,this._handleTop=o)}_handleMouseOver(){this._hover=!0,this._hide=!1}_handleMouseOut(t){1!==t.buttons&&(this._hover=!1,this._hide=!0)}_handleMouseDown(t){t.stopPropagation(),t.preventDefault();const e=t.clientX-this._boundRect.left,s=t.clientY-this._boundRect.top;\"vertical\"===this.split&&(this._handleOffset=e-this._handleLeft),\"horizontal\"===this.split&&(this._handleOffset=s-this._handleTop),this._boundRect=this.getBoundingClientRect(),this._isDragActive=!0,window.addEventListener(\"mouseup\",this._handleMouseUpBound),window.addEventListener(\"mousemove\",this._handleMouseMoveBound)}_handleMouseUp(){this._isDragActive=!1,window.removeEventListener(\"mouseup\",this._handleMouseUpBound),window.removeEventListener(\"mousemove\",this._handleMouseMoveBound)}_handleMouseMove(t){const{clientX:e,clientY:s}=t,{left:i,top:o,height:r,width:n}=this._boundRect;if(\"vertical\"===this.split){const t=e-i;this._handleLeft=Math.max(0,Math.min(t-this._handleOffset,n)),this._startPaneRight=Math.max(0,n-this._handleLeft),this._endPaneLeft=this._handleLeft}if(\"horizontal\"===this.split){const t=s-o;this._handleTop=Math.max(0,Math.min(t-this._handleOffset,r)),this._startPaneBottom=Math.max(0,r-this._handleTop),this._endPaneTop=this._handleTop}}_handleDblClick(){this.resetOnDblClick&&this._initPosition()}static get styles(){return[super.styles,r`:host{display:block;overflow:hidden;position:relative}.start{left:0;top:0;overflow:hidden;position:absolute}.end{bottom:0;overflow:hidden;position:absolute;right:0}.handle-overlay{display:none;height:100%;left:0;position:absolute;top:0;width:100%;z-index:1}.handle-overlay.active{display:block}.handle-overlay.split-vertical{cursor:ew-resize}.handle-overlay.split-horizontal{cursor:ns-resize}.handle{position:absolute;z-index:2}.handle.hover{background-color:var(--vscode-sash-hoverBorder);transition:background-color .1s linear .3s}.handle.hide{background-color:transparent;transition:background-color .1s linear}.handle.split-vertical{cursor:ew-resize;height:100%}.handle.split-horizontal{cursor:ns-resize;width:100%}`]}render(){const t=yt({bottom:`${this._startPaneBottom}px`,right:`${this._startPaneRight}px`}),e=yt({left:`${this._endPaneLeft}px`,top:`${this._endPaneTop}px`}),s={left:`${this._handleLeft}px`,top:`${this._handleTop}px`};\"vertical\"===this.split&&(s.marginLeft=\"-2px\",s.width=\"4px\"),\"horizontal\"===this.split&&(s.height=\"4px\",s.marginTop=\"-2px\");const i=yt(s),o=mt({\"handle-overlay\":!0,active:this._isDragActive,\"split-vertical\":\"vertical\"===this.split,\"split-horizontal\":\"horizontal\"===this.split}),r=mt({handle:!0,hover:this._hover,hide:this._hide,\"split-vertical\":\"vertical\"===this.split,\"split-horizontal\":\"horizontal\"===this.split});return D`<div class=\"start\" style=\"${t}\"><slot name=\"start\"></slot></div><div class=\"end\" style=\"${e}\"><slot name=\"end\"></slot></div><div class=\"${o}\"></div><div class=\"${r}\" style=\"${i}\" @mouseover=\"${this._handleMouseOver}\" @mouseout=\"${this._handleMouseOut}\" @mousedown=\"${this._handleMouseDown}\" @dblclick=\"${this._handleDblClick}\"></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ke",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"table\",this.resizable=!1,this.responsive=!1,this.breakpoint=300,this.minColumnWidth=\"50px\",this.delayedResizing=!1,this.compact=!1,this._sashPositions=[],this._isDragging=!1,this._sashHovers=[],this._columns=[],this._activeSashElementIndex=-1,this._activeSashCursorOffset=0,this._componentX=0,this._componentH=0,this._componentW=0,this._headerCells=[],this._cellsOfFirstRow=[],this._prevHeaderHeight=0,this._prevComponentHeight=0,this._componentResizeObserverCallbackBound=this._componentResizeObserverCallback.bind(this),this._headerResizeObserverCallbackBound=this._headerResizeObserverCallback.bind(this),this._onResizingMouseMoveBound=this._onResizingMouseMove.bind(this),this._onResizingMouseUpBound=this._onResizingMouseUp.bind(this)}set columns(t){this._columns=t,this.isConnected&&this._initDefaultColumnSizes()}get columns(){return this._columns}connectedCallback(){super.connectedCallback(),this._memoizeComponentDimensions(),this._initDefaultColumnSizes()}disconnectedCallback(){super.disconnectedCallback(),this._componentResizeObserver.unobserve(this),this._componentResizeObserver.disconnect()}_px2Percent(t){return t/this._componentW*100}_percent2Px(t){return this._componentW*t/100}_memoizeComponentDimensions(){const t=this.getBoundingClientRect();this._componentH=t.height,this._componentW=t.width,this._componentX=t.x}_queryHeaderCells(){const t=this._assignedHeaderElements;return t&&t[0]?Array.from(t[0].querySelectorAll(\"vscode-table-header-cell\")):[]}_getHeaderCells(){return this._headerCells.length||(this._headerCells=this._queryHeaderCells()),this._headerCells}_queryCellsOfFirstRow(){const t=this._assignedBodyElements;return t&&t[0]?Array.from(t[0].querySelectorAll(\"vscode-table-row:first-child vscode-table-cell\")):[]}_getCellsOfFirstRow(){return this._cellsOfFirstRow.length||(this._cellsOfFirstRow=this._queryCellsOfFirstRow()),this._cellsOfFirstRow}_initResizeObserver(){this._componentResizeObserver=new ResizeObserver(this._componentResizeObserverCallbackBound),this._componentResizeObserver.observe(this),this._headerResizeObserver=new ResizeObserver(this._headerResizeObserverCallbackBound),this._headerResizeObserver.observe(this._headerElement)}_componentResizeObserverCallback(){this._memoizeComponentDimensions(),this._updateScrollpaneSize(),this.responsive&&this._toggleCompactView()}_headerResizeObserverCallback(){this._updateScrollpaneSize()}_calcColWidthPercentages(){const t=this._getHeaderCells().length;let e=this.columns.slice(0,t);const s=e.filter((t=>\"auto\"===t)).length+t-e.length;let i=100;if(e=e.map((t=>{const e=Ve(t,this._componentW);return null===e?\"auto\":(i-=e,e)})),e.length<t)for(let s=e.length;s<t;s++)e.push(\"auto\");return e=e.map((t=>\"auto\"===t?i/s:t)),e}_initHeaderCellSizes(t){this._getHeaderCells().forEach(((e,s)=>{e.style.width=`${t[s]}%`}))}_initBodyColumnSizes(t){this._getCellsOfFirstRow().forEach(((e,s)=>{e.style.width=`${t[s]}%`}))}_initSashes(t){const e=t.length;let s=0;this._sashPositions=[],t.forEach(((t,i)=>{if(i<e-1){const e=s+t;this._sashPositions.push(e),s=e}}))}_initDefaultColumnSizes(){const t=this._calcColWidthPercentages();this._initHeaderCellSizes(t),this._initBodyColumnSizes(t),this._initSashes(t)}_updateScrollpaneSize(){const t=this._headerElement.getBoundingClientRect();if(t.height===this._prevHeaderHeight&&this._componentH===this._prevComponentHeight)return;this._prevHeaderHeight=t.height,this._prevComponentHeight=this._componentH;const e=this._componentH-t.height;this._scrollableElement.style.height=`${e}px`,this._sashVisibleElements.forEach((s=>{s.style.height=`${e}px`,s.style.top=`${t.height}px`}))}_applyCompactViewColumnLabels(){const t=this._getHeaderCells().map((t=>t.innerText));this.querySelectorAll(\"vscode-table-row\").forEach((e=>{e.querySelectorAll(\"vscode-table-cell\").forEach(((e,s)=>{e.columnLabel=t[s],e.compact=!0}))}))}_clearCompactViewColumnLabels(){this.querySelectorAll(\"vscode-table-cell\").forEach((t=>{t.columnLabel=\"\",t.compact=!1}))}_toggleCompactView(){const t=this.getBoundingClientRect().width<this.breakpoint;this.compact!==t&&(this.compact=t,t?this._applyCompactViewColumnLabels():this._clearCompactViewColumnLabels())}_onHeaderSlotChange(){this._headerCells=this._queryHeaderCells()}_onBodySlotChange(){this._initDefaultColumnSizes(),this._initResizeObserver()}_onSashMouseOver(t){if(this._isDragging)return;const e=t.currentTarget,s=Number(e.dataset.index);this._sashHovers[s]=!0,this.requestUpdate()}_onSashMouseOut(t){if(t.stopPropagation(),this._isDragging)return;const e=t.currentTarget,s=Number(e.dataset.index);this._sashHovers[s]=!1,this.requestUpdate()}_onSashMouseDown(t){t.stopPropagation();const{pageX:e,currentTarget:s}=t,i=s,o=Number(i.dataset.index),r=i.getBoundingClientRect().x;this._isDragging=!0,this._activeSashElementIndex=o,this._sashHovers[this._activeSashElementIndex]=!0,this._activeSashCursorOffset=this._px2Percent(e-r);const n=this._getHeaderCells();this._headerCellsToResize=[],this._headerCellsToResize.push(n[o]),n[o+1]&&(this._headerCellsToResize[1]=n[o+1]);const l=this._bodySlot.assignedElements()[0].querySelectorAll(\"vscode-table-row:first-child > vscode-table-cell\");this._cellsToResize=[],this._cellsToResize.push(l[o]),l[o+1]&&this._cellsToResize.push(l[o+1]),document.addEventListener(\"mousemove\",this._onResizingMouseMoveBound),document.addEventListener(\"mouseup\",this._onResizingMouseUpBound)}_updateActiveSashPosition(t){const{prevSashPos:e,nextSashPos:s}=this._getSashPositions();let i=Ve(this.minColumnWidth,this._componentW);null===i&&(i=0);const o=e?e+i:i,r=s?s-i:100-i;let n=this._px2Percent(t-this._componentX-this._percent2Px(this._activeSashCursorOffset));n=Math.max(n,o),n=Math.min(n,r),this._sashPositions[this._activeSashElementIndex]=n,this.requestUpdate()}_getSashPositions(){return{sashPos:this._sashPositions[this._activeSashElementIndex],prevSashPos:this._sashPositions[this._activeSashElementIndex-1]||0,nextSashPos:this._sashPositions[this._activeSashElementIndex+1]||100}}_resizeColumns(t=!0){const{sashPos:e,prevSashPos:s,nextSashPos:i}=this._getSashPositions(),o=`${e-s}%`,r=`${i-e}%`;this._headerCellsToResize[0].style.width=o,this._headerCellsToResize[1]&&(this._headerCellsToResize[1].style.width=r),t&&(this._cellsToResize[0].style.width=o,this._cellsToResize[1]&&(this._cellsToResize[1].style.width=r))}_onResizingMouseMove(t){t.stopPropagation(),this._updateActiveSashPosition(t.pageX),this.delayedResizing?this._resizeColumns(!1):this._resizeColumns(!0)}_onResizingMouseUp(t){this._resizeColumns(!0),this._updateActiveSashPosition(t.pageX),this._sashHovers[this._activeSashElementIndex]=!1,this._isDragging=!1,this._activeSashElementIndex=-1,document.removeEventListener(\"mousemove\",this._onResizingMouseMoveBound),document.removeEventListener(\"mouseup\",this._onResizingMouseUpBound)}static get styles(){return[super.styles,r`:host{display:block}::slotted(vscode-table-row){width:100%}.wrapper{height:100%;max-width:100%;overflow:hidden;position:relative;width:100%}.wrapper.select-disabled{user-select:none}.wrapper.resize-cursor{cursor:ew-resize}.wrapper.compact-view .header-slot-wrapper{height:0;overflow:hidden}.scrollable{height:100%}.scrollable:before{background-color:transparent;content:'';display:block;height:1px;position:absolute;width:100%}:host(:not([bordered])) .wrapper:not(.compact-view):hover .scrollable:not([scrolled]):before,:host([bordered]) .wrapper:not(.compact-view) .scrollable:not([scrolled]):before{background-color:var(--vscode-editorGroup-border)}:host(:not([bordered])) .sash{visibility:hidden}:host(:not([compact])) .wrapper:hover .sash{visibility:visible}.sash{height:100%;position:absolute;top:0;width:1px}.wrapper.compact-view .sash{display:none}.sash.resizable{cursor:ew-resize}.sash-visible{background-color:var(--vscode-editorGroup-border);height:100%;position:absolute;top:0;width:1px}.sash.hover .sash-visible{background-color:var(--vscode-sash-hoverBorder);transition:background-color 50ms linear .3s}.sash .sash-clickable{background-color:transparent;height:100%;left:-2px;position:absolute;width:5px}`]}render(){const t=this._sashPositions.map(((t,e)=>{const s=mt({sash:!0,hover:this._sashHovers[e],resizable:this.resizable}),i=`${t}%`;return this.resizable?D`<div class=\"${s}\" data-index=\"${e}\" style=\"${yt({left:i})}\" @mousedown=\"${this._onSashMouseDown}\" @mouseover=\"${this._onSashMouseOver}\" @mouseout=\"${this._onSashMouseOut}\"><div class=\"sash-visible\"></div><div class=\"sash-clickable\"></div></div>`:D`<div class=\"${s}\" data-index=\"${e}\" style=\"${yt({left:i})}\"><div class=\"sash-visible\"></div></div>`})),e=mt({wrapper:!0,\"select-disabled\":this._isDragging,\"resize-cursor\":this._isDragging,\"compact-view\":this.compact});return D`<div class=\"${e}\"><div class=\"header\" @slotchange=\"${this._onHeaderSlotChange}\"><slot name=\"caption\"></slot><div class=\"header-slot-wrapper\"><slot name=\"header\"></slot></div></div><vscode-scrollable class=\"scrollable\"><div><slot name=\"body\" @slotchange=\"${this._onBodySlotChange}\"></slot></div></vscode-scrollable>${t}</div>`}}"
        },
        {
          "kind": "variable",
          "name": "qe",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"rowgroup\"}static get styles(){return[super.styles,r`:host{display:table;table-layout:fixed;width:100%}:host-context(vscode-table[zebra]) ::slotted(vscode-table-row:nth-child(even)){background-color:rgba(130,130,130,.04)}:host-context(vscode-table[zebra-odd]) ::slotted(vscode-table-row:nth-child(odd)){background-color:rgba(130,130,130,.04)}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "Ze",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"cell\",this.columnLabel=\"\",this.compact=!1}static get styles(){return[super.styles,r`:host{box-sizing:border-box;display:table-cell;height:24px;overflow:hidden;padding-left:10px;text-overflow:ellipsis;vertical-align:middle;white-space:nowrap}:host([compact]){display:block;height:auto;padding-bottom:5px;width:100%!important}:host([compact]:first-child){padding-top:10px}:host-context(vscode-table[bordered][compact]){border:0}:host([compact]:last-child){padding-bottom:10px}:host-context(vscode-table[bordered]){border-bottom:1px solid var(--vscode-editorGroup-border)}.wrapper{overflow:inherit;text-overflow:inherit;white-space:inherit;width:100%}.column-label{font-weight:700}`]}render(){const t=this.columnLabel?D`<div class=\"column-label\" role=\"presentation\">${this.columnLabel}</div>`:P;return D`<div class=\"wrapper\">${t}<slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "Ye",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"rowgroup\"}static get styles(){return[super.styles,r`:host{background-color:rgba(130,130,130,.04);display:table;table-layout:fixed;width:100%}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "Qe",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"columnheader\"}static get styles(){return[super.styles,r`:host{box-sizing:border-box;display:table-cell;font-family:var(--vscode-font-style);font-size:var(--vscode-font-size);font-weight:700;line-height:20px;overflow:hidden;padding-bottom:5px;padding-left:10px;padding-right:0;padding-top:5px;text-overflow:ellipsis;white-space:nowrap}.wrapper{box-sizing:inherit;overflow:inherit;text-overflow:inherit;white-space:inherit;width:100%}`]}render(){return D`<div class=\"wrapper\"><slot></slot></div>`}}"
        },
        {
          "kind": "variable",
          "name": "es",
          "default": "class extends xt{constructor(){super(...arguments),this.role=\"row\"}static get styles(){return[super.styles,r`:host{display:table-row;width:100%}:host-context(vscode-table[compact]){display:block}:host-context(vscode-table[compact][bordered]){border-top:1px solid var(--vscode-editorGroup-border)}`]}render(){return D`<slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "is",
          "default": "class extends xt{constructor(){super(),this._headerSlot=null,this._mainSlot=null,this._selectedIndex=0}set selectedIndex(t){this._selectedIndex=t,this._setActiveTab()}get selectedIndex(){return this._selectedIndex}_setActiveTab(){this._mainSlot&&this._headerSlot&&(Array.from(this._mainSlot.assignedElements()).forEach(((t,e)=>{t.style.display=e===this._selectedIndex?\"block\":\"none\"})),Array.from(this._headerSlot.assignedElements()).forEach(((t,e)=>{t.dataset.index=String(e),t.classList.toggle(\"is-active\",e===this._selectedIndex)})),this.dispatchEvent(new CustomEvent(\"vsc-select\",{detail:{selectedIndex:this._selectedIndex},composed:!0})))}_onSlotChanged(){this._setActiveTab()}_onHeaderClick(t){const e=t.target.dataset.index;e&&(this._selectedIndex=Number(e),this._setActiveTab())}firstUpdated(){this._headerSlot=this.shadowRoot.querySelector(\"slot[name=header]\"),this._mainSlot=this.shadowRoot.querySelector(\"slot:not([name=header])\"),this._mainSlot.addEventListener(\"slotchange\",this._onSlotChanged.bind(this))}static get styles(){return[super.styles,r`:host{display:block}.header{display:flex;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);font-weight:var(--vscode-font-weight);width:100%}:host-context(.vscode-light) .header{border-bottom:1px solid #ccc}::slotted(header){border-bottom:1px solid transparent;color:var(--vscode-foreground);cursor:pointer;display:block;margin-bottom:-1px;overflow:hidden;padding:7px 8px;text-overflow:ellipsis;user-select:none;white-space:nowrap}::slotted(.is-active){border-bottom-color:var(--vscode-settings-headerForeground);color:var(--vscode-settings-headerForeground)}`]}render(){return D`<div class=\"header\" @click=\"${this._onHeaderClick}\"><slot name=\"header\"></slot></div><slot></slot>`}}"
        },
        {
          "kind": "variable",
          "name": "as",
          "default": "class extends xt{constructor(){super(...arguments),this.indent=8,this.arrows=!1,this.multiline=!1,this.tabindex=0,this._data=[],this._selectedItem=null,this._focusedItem=null,this.onComponentKeyDownBound=this.onComponentKeyDown.bind(this)}set data(t){const e=this._data;this._data=ls(t),this.requestUpdate(\"data\",e)}get data(){return this._data}getItemByPath(t){let e=this._data,s=null;return t.forEach(((i,o)=>{o===t.length-1?s=e[i]:e=e[i].subItems})),s}getItemType(t){return t.subItems&&Array.isArray(t.subItems)&&t.subItems.length>0?rs.BRANCH:rs.LEAF}getIconName(t){if(!t.icons)return;const{icons:e}=t,s=this.getItemType(t),i=t.open||!1;return s===rs.BRANCH&&i?e.open||void 0:s!==rs.BRANCH||i?s===rs.LEAF&&e.leaf||void 0:e.branch||void 0}renderTreeItem({indentLevel:t,label:e,path:s,iconName:i,open:o=!1,itemType:r,selected:n=!1,focused:l=!1,subItems:a}){const c=o?\"chevron-down\":\"chevron-right\",h=[\"contents\"],d=o?[\"open\"]:[],u=t*this.indent,v=this.arrows&&r===rs.LEAF?18+u:u,p=this.arrows&&r===rs.BRANCH?D`<vscode-icon name=\"${c}\" class=\"icon-arrow\"></vscode-icon>`:P,b=i?D`<vscode-icon name=\"${i}\" class=\"label-icon\"></vscode-icon>`:P,f=o&&r===rs.BRANCH?D`<ul>${this.renderTree(a,s)}</ul>`:P,g=D`<span class=\"label\">${e}</span>`;return d.push(r===rs.LEAF?\"leaf\":\"branch\"),n&&h.push(\"selected\"),l&&h.push(\"focused\"),D`<li data-path=\"${s.join(\"/\")}\" class=\"${d.join(\" \")}\"><span class=\"${h.join(\" \")}\" style=\"${yt({paddingLeft:`${v}px`})}\">${p} ${b} ${g} </span>${f}</li>`}renderTree(t,e=[]){const s=[];return t?(t.forEach(((t,i)=>{const o=[...e,i],r=o.length-1,n=this.getItemType(t),l=this.getIconName(t),{label:a,open:c=!1,selected:h=!1,focused:d=!1,subItems:u=[]}=t;h&&(this._selectedItem=t),d&&(this._focusedItem=t),s.push(this.renderTreeItem({indentLevel:r,label:a,path:o,open:c,iconName:l,itemType:n,selected:h,focused:d,subItems:u}))})),s):P}toggleSubTreeOpen(t){t.subItems&&(t.open=!t.open)}selectTreeItem(t){this._selectedItem&&(this._selectedItem.selected=!1),this._selectedItem=t,t.selected=!0}focusTreeItem(t){this._focusedItem&&(this._focusedItem.focused=!1),this._focusedItem=t,t.focused=!0}closeSubTreeRecursively(t){t.forEach((t=>{t.open=!1,t.subItems&&t.subItems.length>0&&this.closeSubTreeRecursively(t.subItems)}))}emitSelectEvent(t,e){const{icons:s,label:i,open:o,value:r}=t,n={icons:s,itemType:this.getItemType(t),label:i,open:o||!1,value:r||i,path:e};this.dispatchEvent(new CustomEvent(\"vsc-select\",{bubbles:!0,composed:!0,detail:n}))}_focusItem(t){this._focusedItem&&(this._focusedItem.focused=!1),this._focusedItem=t,this._focusedItem.focused=!0}_focusPrevItem(){var t;if(!this._focusedItem)return void this._focusItem(this._data[0]);const{path:e}=this._focusedItem;if(e&&(null==e?void 0:e.length)>0){const s=e[e.length-1],i=e.length>1;if(s>0){const i=[...e];i[i.length-1]=s-1;const o=this.getItemByPath(i);let r=o;if((null==o?void 0:o.open)&&(null===(t=o.subItems)||void 0===t?void 0:t.length)){const{subItems:t}=o;r=t[t.length-1]}this._focusItem(r)}else if(i){const t=[...e];t.pop(),this._focusItem(this.getItemByPath(t))}}else this._focusItem(this._data[0])}_focusNextItem(){if(!this._focusedItem)return void this._focusItem(this._data[0]);const{path:t,open:e}=this._focusedItem;if(e&&Array.isArray(this._focusedItem.subItems)&&this._focusedItem.subItems.length>0)return void this._focusItem(this._focusedItem.subItems[0]);const s=[...t];s[s.length-1]+=1;let i=this.getItemByPath(s);i?this._focusItem(i):(s.pop(),s.length>0&&(s[s.length-1]+=1,i=this.getItemByPath(s),i&&this._focusItem(i)))}onComponentClick(t){const e=t.composedPath().find((t=>t.tagName&&\"LI\"===t.tagName.toUpperCase()));if(e){const t=e.dataset.path||\"\",s=t.split(\"/\").map((t=>Number(t))),i=this.getItemByPath(s);this.toggleSubTreeOpen(i),this.selectTreeItem(i),this.focusTreeItem(i),this.emitSelectEvent(i,t),this.requestUpdate()}else this._focusedItem&&(this._focusedItem.focused=!1),this._focusedItem=null}onComponentKeyDown(t){[os.ARROW_DOWN,os.ARROW_UP,os.ENTER,os.ESCAPE,os.SPACE].includes(t.key)&&(t.stopPropagation(),t.preventDefault()),t.key===os.ESCAPE&&(this._focusedItem=null),t.key===os.ARROW_UP&&this._focusPrevItem(),t.key===os.ARROW_DOWN&&this._focusNextItem(),t.key!==os.ENTER&&t.key!==os.SPACE||(this._selectedItem&&(this._selectedItem.selected=!1),this._focusedItem&&(this._selectedItem=this._focusedItem),this._selectedItem&&(this._selectedItem.selected=!0,this._selectedItem.open=!this._selectedItem.open,this.emitSelectEvent(this._selectedItem,this._selectedItem.path.join(\"/\")),this.requestUpdate()))}closeAll(){this.closeSubTreeRecursively(this.data),this.requestUpdate()}connectedCallback(){super.connectedCallback(),this.addEventListener(\"keydown\",this.onComponentKeyDownBound)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener(\"keydown\",this.onComponentKeyDownBound)}static get styles(){return[super.styles,r`:host{display:block;outline:0;user-select:none}.wrapper{height:100%}:host(:focus) .wrapper.focused-none{outline:1px solid var(--vscode-list-focusOutline)}li{list-style:none}li,ul{margin:0;padding:0}.contents{align-items:center;display:flex;font-family:var(--vscode-font-family);font-size:var(--vscode-font-size);font-weight:var(--vscode-font-weight)}.multi .contents{align-items:flex-start}.contents:hover{background-color:var(--vscode-list-hoverBackground);color:var(--vscode-list-hoverForeground);cursor:pointer}.contents.selected{background-color:var(--vscode-list-inactiveSelectionBackground)}:host(:focus) .contents.focused{background-color:var(--vscode-list-focusBackground);outline:1px solid var(--vscode-list-focusOutline);outline-offset:-1px}:host(:focus) .contents.selected,:host(:focus) .contents.selected.focused{background-color:var(--vscode-list-activeSelectionBackground);color:var(--vscode-list-activeSelectionForeground)}.icon-arrow{display:block;margin:3px 2px 3px 0}.label-icon{display:block;margin-right:6px}:host(:focus) .contents.selected .label-icon,:host(:focus) .contents.selected.focused .label-icon{color:var(--vscode-list-activeSelectionForeground)}.multi .contents .label-icon{margin-top:3px}.label{display:block;line-height:22px}.single .label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}`]}render(){const t=mt({multi:this.multiline,single:!this.multiline,wrapper:!0,\"focused-none\":!this._focusedItem,\"selection-none\":!this._selectedItem,\"selection-single\":null!==this._selectedItem});return D`<div @click=\"${this.onComponentClick}\" class=\"${t}\"><ul>${this.renderTree(this._data)}</ul></div>`}}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "t",
          "declaration": {
            "name": "e",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "t",
          "declaration": {
            "name": "e",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeButton",
          "declaration": {
            "name": "zt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckbox",
          "declaration": {
            "name": "Pt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckboxGroup",
          "declaration": {
            "name": "Lt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCollapsible",
          "declaration": {
            "name": "Ut",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenu",
          "declaration": {
            "name": "Wt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenuItem",
          "declaration": {
            "name": "Ht",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormContainer",
          "declaration": {
            "name": "Yt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormControl",
          "declaration": {
            "name": "Qt",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormDescription",
          "declaration": {
            "name": "ee",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormGroup",
          "declaration": {
            "name": "le",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormHelper",
          "declaration": {
            "name": "ce",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormItem",
          "declaration": {
            "name": "ie",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormLabel",
          "declaration": {
            "name": "re",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeIcon",
          "declaration": {
            "name": "$t",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeInputbox",
          "declaration": {
            "name": "ve",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeLabel",
          "declaration": {
            "name": "be",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeMultiSelect",
          "declaration": {
            "name": "Be",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeOption",
          "declaration": {
            "name": "Ie",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadio",
          "declaration": {
            "name": "Ae",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadioGroup",
          "declaration": {
            "name": "De",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeScrollable",
          "declaration": {
            "name": "Le",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSingleSelect",
          "declaration": {
            "name": "Pe",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSplitLayout",
          "declaration": {
            "name": "Ue",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTable",
          "declaration": {
            "name": "Ke",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableBody",
          "declaration": {
            "name": "qe",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableCell",
          "declaration": {
            "name": "Ze",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeader",
          "declaration": {
            "name": "Ye",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeaderCell",
          "declaration": {
            "name": "Qe",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableRow",
          "declaration": {
            "name": "es",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTabs",
          "declaration": {
            "name": "is",
            "module": "docs/bundled.js"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTree",
          "declaration": {
            "name": "as",
            "module": "docs/bundled.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "scripts/generateComponent.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/generateIconList.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/patchMdFiles.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "scripts/tableFaker.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeButton",
          "declaration": {
            "name": "VscodeButton",
            "module": "./vscode-button"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckbox",
          "declaration": {
            "name": "VscodeCheckbox",
            "module": "./vscode-checkbox"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCheckboxGroup",
          "declaration": {
            "name": "VscodeCheckboxGroup",
            "module": "./vscode-checkbox-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeCollapsible",
          "declaration": {
            "name": "VscodeCollapsible",
            "module": "./vscode-collapsible"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenuItem",
          "declaration": {
            "name": "VscodeContextMenuItem",
            "module": "./vscode-context-menu-item"
          }
        },
        {
          "kind": "js",
          "name": "VscodeContextMenu",
          "declaration": {
            "name": "VscodeContextMenu",
            "module": "./vscode-context-menu"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormContainer",
          "declaration": {
            "name": "VscodeFormContainer",
            "module": "./vscode-form-container"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormControl",
          "declaration": {
            "name": "VscodeFormControl",
            "module": "./vscode-form-control"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormDescription",
          "declaration": {
            "name": "VscodeFormDescription",
            "module": "./vscode-form-description"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormItem",
          "declaration": {
            "name": "VscodeFormItem",
            "module": "./vscode-form-item"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormLabel",
          "declaration": {
            "name": "VscodeFormLabel",
            "module": "./vscode-form-label"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormGroup",
          "declaration": {
            "name": "VscodeFormGroup",
            "module": "./vscode-form-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeFormHelper",
          "declaration": {
            "name": "VscodeFormHelper",
            "module": "./vscode-form-helper"
          }
        },
        {
          "kind": "js",
          "name": "VscodeIcon",
          "declaration": {
            "name": "VscodeIcon",
            "module": "./vscode-icon"
          }
        },
        {
          "kind": "js",
          "name": "VscodeInputbox",
          "declaration": {
            "name": "VscodeInputbox",
            "module": "./vscode-inputbox"
          }
        },
        {
          "kind": "js",
          "name": "VscodeLabel",
          "declaration": {
            "name": "VscodeLabel",
            "module": "./vscode-label"
          }
        },
        {
          "kind": "js",
          "name": "VscodeMultiSelect",
          "declaration": {
            "name": "VscodeMultiSelect",
            "module": "./vscode-multi-select"
          }
        },
        {
          "kind": "js",
          "name": "VscodeOption",
          "declaration": {
            "name": "VscodeOption",
            "module": "./vscode-option"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadio",
          "declaration": {
            "name": "VscodeRadio",
            "module": "./vscode-radio"
          }
        },
        {
          "kind": "js",
          "name": "VscodeRadioGroup",
          "declaration": {
            "name": "VscodeRadioGroup",
            "module": "./vscode-radio-group"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSingleSelect",
          "declaration": {
            "name": "VscodeSingleSelect",
            "module": "./vscode-single-select"
          }
        },
        {
          "kind": "js",
          "name": "VscodeScrollable",
          "declaration": {
            "name": "VscodeScrollable",
            "module": "./vscode-scrollable"
          }
        },
        {
          "kind": "js",
          "name": "VscodeSplitLayout",
          "declaration": {
            "name": "VscodeSplitLayout",
            "module": "./vscode-split-layout"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTable",
          "declaration": {
            "name": "VscodeTable",
            "module": "./vscode-table"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableBody",
          "declaration": {
            "name": "VscodeTableBody",
            "module": "./vscode-table-body"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableCell",
          "declaration": {
            "name": "VscodeTableCell",
            "module": "./vscode-table-cell"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeader",
          "declaration": {
            "name": "VscodeTableHeader",
            "module": "./vscode-table-header"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableHeaderCell",
          "declaration": {
            "name": "VscodeTableHeaderCell",
            "module": "./vscode-table-header-cell"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTableRow",
          "declaration": {
            "name": "VscodeTableRow",
            "module": "./vscode-table-row"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTabs",
          "declaration": {
            "name": "VscodeTabs",
            "module": "./vscode-tabs"
          }
        },
        {
          "kind": "js",
          "name": "VscodeTree",
          "declaration": {
            "name": "VscodeTree",
            "module": "./vscode-tree"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeButton",
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "secondary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "secondary"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) before the label",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "iconAfter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) after the label",
              "attribute": "iconAfter"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_prevTabindex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleFocusBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleBlurBound",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "vsc-click",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Dispatched only if the disabled attribute is false."
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex"
            },
            {
              "name": "secondary",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "secondary"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'button'",
              "fieldName": "role"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) before the label",
              "fieldName": "icon"
            },
            {
              "name": "iconAfter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "A [Codicon](https://microsoft.github.io/vscode-codicons/dist/codicon.html) after the label",
              "fieldName": "iconAfter"
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-button",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeButton",
          "declaration": {
            "name": "VscodeButton",
            "module": "src/vscode-button.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-button",
          "declaration": {
            "name": "VscodeButton",
            "module": "src/vscode-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-checkbox-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeCheckboxGroup",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "attribute": "variant",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-checkbox-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCheckboxGroup",
          "declaration": {
            "name": "VscodeCheckboxGroup",
            "module": "src/vscode-checkbox-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-checkbox-group",
          "declaration": {
            "name": "VscodeCheckboxGroup",
            "module": "src/vscode-checkbox-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeCheckbox",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "isSlotEmpty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prevTabindex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_uid",
              "privacy": "protected",
              "default": "`id_${new Date().valueOf()}_${Math.floor(\r\n    Math.random() * 9999\r\n  )}`",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            }
          ],
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "description": "Name which is used as a variable name in the data of the form-container.",
              "name": "name"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormButtonWidgetBase",
            "module": "/src/includes/form-button-widget/FormButtonWidgetBase"
          },
          "tagName": "vscode-checkbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCheckbox",
          "declaration": {
            "name": "VscodeCheckbox",
            "module": "src/vscode-checkbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-checkbox",
          "declaration": {
            "name": "VscodeCheckbox",
            "module": "src/vscode-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-collapsible.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeCollapsible",
          "slots": [
            {
              "description": "Main content",
              "name": "body"
            },
            {
              "description": "Action icons in the header",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open"
            },
            {
              "kind": "method",
              "name": "_onHeaderClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onHeaderKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-collapsible",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeCollapsible",
          "declaration": {
            "name": "VscodeCollapsible",
            "module": "src/vscode-collapsible.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-collapsible",
          "declaration": {
            "name": "VscodeCollapsible",
            "module": "src/vscode-collapsible.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-context-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeContextMenuItem",
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "keybinding",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "keybinding"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "separator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "separator"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex"
            },
            {
              "kind": "method",
              "name": "onItemClick",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "vsc-click",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "keybinding",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "keybinding"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "separator",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "separator"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-context-menu-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeContextMenuItem",
          "declaration": {
            "name": "VscodeContextMenuItem",
            "module": "src/vscode-context-menu-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-context-menu-item",
          "declaration": {
            "name": "VscodeContextMenuItem",
            "module": "src/vscode-context-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-context-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeContextMenu",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "MenuItemData[]"
              },
              "default": "[]",
              "description": "<pre><code>interface MenuItemData {\r\n&nbsp;&nbsp;label: string;\r\n&nbsp;&nbsp;keybinding?: string;\r\n&nbsp;&nbsp;value?: string;\r\n&nbsp;&nbsp;separator?: boolean;\r\n&nbsp;&nbsp;tabindex?: number;\r\n}</code></pre>",
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "show",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "onItemClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "vsc-select",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "MenuItemData[]"
              },
              "default": "[]",
              "description": "<pre><code>interface MenuItemData {\r\n&nbsp;&nbsp;label: string;\r\n&nbsp;&nbsp;keybinding?: string;\r\n&nbsp;&nbsp;value?: string;\r\n&nbsp;&nbsp;separator?: boolean;\r\n&nbsp;&nbsp;tabindex?: number;\r\n}</code></pre>",
              "fieldName": "data"
            },
            {
              "name": "show",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "show"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-context-menu",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeContextMenu",
          "declaration": {
            "name": "VscodeContextMenu",
            "module": "src/vscode-context-menu.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-context-menu",
          "declaration": {
            "name": "VscodeContextMenu",
            "module": "src/vscode-context-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormContainer",
          "members": [
            {
              "kind": "field",
              "name": "responsive",
              "type": {
                "text": "boolean"
              },
              "attribute": "responsive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "breakpoint",
              "type": {
                "text": "number"
              },
              "default": "490",
              "attribute": "breakpoint"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "FormData"
              },
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver | null"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_wrapperElement",
              "type": {
                "text": "Element"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedNodes",
              "type": {
                "text": "VscodeFormGroup[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_responsive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_firstUpdateComplete",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_currentFormGroupLayout",
              "type": {
                "text": "FormGroupLayout"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_collectFormData",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleCompactLayout",
              "privacy": "private",
              "parameters": [
                {
                  "name": "layout",
                  "type": {
                    "text": "FormGroupLayout"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_resizeObserverCallback",
              "privacy": "private",
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "ResizeObserverEntry[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_resizeObserverCallbackBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_activateResponsiveLayout",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_deactivateResizeObserver",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "responsive",
              "type": {
                "text": "boolean"
              },
              "fieldName": "responsive"
            },
            {
              "name": "breakpoint",
              "type": {
                "text": "number"
              },
              "default": "490",
              "fieldName": "breakpoint"
            },
            {
              "name": "data",
              "type": {
                "text": "FormData"
              },
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-container",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormContainer",
          "declaration": {
            "name": "VscodeFormContainer",
            "module": "src/vscode-form-container.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-container",
          "declaration": {
            "name": "VscodeFormContainer",
            "module": "src/vscode-form-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-control.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormControl",
          "members": [],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-control",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormControl",
          "declaration": {
            "name": "VscodeFormControl",
            "module": "src/vscode-form-control.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-control",
          "declaration": {
            "name": "VscodeFormControl",
            "module": "src/vscode-form-control.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-description.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormDescription",
          "members": [],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-description",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormDescription",
          "declaration": {
            "name": "VscodeFormDescription",
            "module": "src/vscode-form-description.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-description",
          "declaration": {
            "name": "VscodeFormDescription",
            "module": "src/vscode-form-description.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormGroup",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "FormGroupVariant"
              },
              "default": "'horizontal'",
              "attribute": "variant",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "FormGroupVariant"
              },
              "default": "'horizontal'",
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormGroup",
          "declaration": {
            "name": "VscodeFormGroup",
            "module": "src/vscode-form-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-group",
          "declaration": {
            "name": "VscodeFormGroup",
            "module": "src/vscode-form-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-helper.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormHelper",
          "members": [],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-helper",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormHelper",
          "declaration": {
            "name": "VscodeFormHelper",
            "module": "src/vscode-form-helper.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-helper",
          "declaration": {
            "name": "VscodeFormHelper",
            "module": "src/vscode-form-helper.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormItem",
          "members": [],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormItem",
          "declaration": {
            "name": "VscodeFormItem",
            "module": "src/vscode-form-item.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-item",
          "declaration": {
            "name": "VscodeFormItem",
            "module": "src/vscode-form-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-form-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeFormLabel",
          "members": [],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-form-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeFormLabel",
          "declaration": {
            "name": "VscodeFormLabel",
            "module": "src/vscode-form-label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-form-label",
          "declaration": {
            "name": "VscodeFormLabel",
            "module": "src/vscode-form-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeIcon",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "16",
              "description": "Icon size in pixels",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "spin",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable rotation animation",
              "attribute": "spin"
            },
            {
              "kind": "field",
              "name": "spinDuration",
              "type": {
                "text": "number"
              },
              "default": "1.5",
              "description": "Animation duration in seconds",
              "attribute": "spin-duration"
            },
            {
              "kind": "field",
              "name": "actionIcon",
              "type": {
                "text": "boolean"
              },
              "attribute": "action-icon"
            },
            {
              "kind": "field",
              "name": "_actionIcon",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "_getStylesheetConfig",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "{\n    href: string | undefined;\n    nonce: string | undefined;\n  }"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name",
              "description": "Codicon icon name. @see https://microsoft.github.io/vscode-codicons/dist/codicon.html",
              "attribute": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "16",
              "description": "Icon size in pixels",
              "fieldName": "size"
            },
            {
              "name": "spin",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable rotation animation",
              "fieldName": "spin"
            },
            {
              "name": "spin-duration",
              "type": {
                "text": "number"
              },
              "default": "1.5",
              "description": "Animation duration in seconds",
              "fieldName": "spinDuration"
            },
            {
              "name": "action-icon",
              "type": {
                "text": "boolean"
              },
              "fieldName": "actionIcon"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-icon",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeIcon",
          "declaration": {
            "name": "VscodeIcon",
            "module": "src/vscode-icon.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-icon",
          "declaration": {
            "name": "VscodeIcon",
            "module": "src/vscode-icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-inputbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeInputbox",
          "cssProperties": [
            {
              "name": "--vscode-scrollbarSlider-background"
            },
            {
              "name": "--vscode-scrollbarSlider-hoverBackground"
            },
            {
              "name": "--vscode-scrollbarSlider-activeBackground"
            },
            {
              "name": "--vscode-input-background"
            },
            {
              "name": "--vscode-settings-textInputBorder"
            },
            {
              "name": "--vscode-input-foreground"
            },
            {
              "name": "--vscode-input-placeholderForeground"
            },
            {
              "name": "--vscode-focusBorder"
            },
            {
              "name": "--vscode-panelInput-border"
            },
            {
              "name": "--vscode-focusBorder"
            },
            {
              "name": "--vscode-inputValidation-infoBackground"
            },
            {
              "name": "--vscode-inputValidation-infoBorder"
            },
            {
              "name": "--vscode-inputValidation-warningBackground"
            },
            {
              "name": "--vscode-inputValidation-warningBorder"
            },
            {
              "name": "--vscode-inputValidation-errorBackground"
            },
            {
              "name": "--vscode-inputValidation-errorBorder"
            },
            {
              "name": "--vscode-editor-background"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiline"
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "message"
            },
            {
              "kind": "field",
              "name": "severity",
              "type": {
                "text": "string"
              },
              "attribute": "severity"
            },
            {
              "kind": "field",
              "name": "panelInput",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "deprecated": "true",
              "attribute": "panelInput"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "\"color\"|\"date\"|\"datetime-local\"|\"email\"|\"file\"|\"month\"|\"number\"|\"password\"|\"tel\"|\"text\"|\"time\"|\"url\"|\"week\""
              },
              "default": "'text'",
              "description": "Text-like input types",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "lines",
              "type": {
                "text": "number"
              },
              "default": "2",
              "attribute": "lines"
            },
            {
              "kind": "field",
              "name": "maxLines",
              "type": {
                "text": "number"
              },
              "default": "5",
              "attribute": "maxLines"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "attribute": "minLength"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "attribute": "maxLength"
            },
            {
              "kind": "field",
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiple"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "_measurerEl",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_inputElement",
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textareaHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_severity",
              "type": {
                "text": "Severity"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_textareaDefaultCursor",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focusElement",
              "type": {
                "text": "HTMLInputElement | HTMLTextAreaElement"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "onInputFocus",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onInputBlur",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onInputInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onInputChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onTextareaMouseMove",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "resizeTextareaIfRequired",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "panelInput",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "deprecated": "true",
              "fieldName": "panelInput",
              "attribute": "panelInput"
            },
            {
              "name": "type",
              "type": {
                "text": "\"color\"|\"date\"|\"datetime-local\"|\"email\"|\"file\"|\"month\"|\"number\"|\"password\"|\"tel\"|\"text\"|\"time\"|\"url\"|\"week\""
              },
              "default": "'text'",
              "description": "Text-like input types",
              "fieldName": "type",
              "attribute": "type"
            },
            {
              "type": {
                "text": "narrow|wide"
              },
              "description": "The sizes are borrowed from the VSCode settings page. The narrow size is typically used for the numeric values and the wide size for the text.",
              "name": "variant"
            },
            {
              "description": "Name which is used as a variable name in the data of the form-container.",
              "name": "name"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiline"
            },
            {
              "name": "message",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "message"
            },
            {
              "name": "severity",
              "type": {
                "text": "string"
              },
              "fieldName": "severity"
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "placeholder"
            },
            {
              "name": "lines",
              "type": {
                "text": "number"
              },
              "default": "2",
              "fieldName": "lines"
            },
            {
              "name": "maxLines",
              "type": {
                "text": "number"
              },
              "default": "5",
              "fieldName": "maxLines"
            },
            {
              "name": "min",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/vscode-inputbox.ts"
              },
              "fieldName": "min"
            },
            {
              "name": "minLength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/vscode-inputbox.ts"
              },
              "fieldName": "minLength"
            },
            {
              "name": "max",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/vscode-inputbox.ts"
              },
              "fieldName": "max"
            },
            {
              "name": "maxLength",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/vscode-inputbox.ts"
              },
              "fieldName": "maxLength"
            },
            {
              "name": "multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiple"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "step",
              "type": {
                "text": "number | undefined"
              },
              "default": "undefined",
              "resolveInitializer": {
                "module": "src/vscode-inputbox.ts"
              },
              "fieldName": "step"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-inputbox",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeInputbox",
          "declaration": {
            "name": "VscodeInputbox",
            "module": "src/vscode-inputbox.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-inputbox",
          "declaration": {
            "name": "VscodeInputbox",
            "module": "src/vscode-inputbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeLabel",
          "members": [
            {
              "kind": "field",
              "name": "for",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "for"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "for",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "for"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-label",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeLabel",
          "declaration": {
            "name": "VscodeLabel",
            "module": "src/vscode-label.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-label",
          "declaration": {
            "name": "VscodeLabel",
            "module": "src/vscode-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-multi-select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeMultiSelect",
          "members": [
            {
              "kind": "field",
              "name": "selectedIndexes",
              "type": {
                "text": "number[]"
              },
              "attribute": "selectedIndexes"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "_multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "true",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onMultiAcceptClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onMultiDeselectAllClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onMultiSelectAllClick",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderSelectFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderComboboxFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdownControls",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "attribute": "aria-expanded",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "combobox",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataCloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "data-cloak",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "attribute": "filter",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "attribute": "options",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_currentDescription",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filter",
              "type": {
                "text": "SearchMethod"
              },
              "privacy": "protected",
              "default": "'fuzzy'",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filteredOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filterPattern",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedIndexes",
              "type": {
                "text": "number[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_showDropdown",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listScrollTop",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mainSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listElement",
              "type": {
                "text": "HTMLUListElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isHoverForbidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_currentOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addOptionsFromSlottedElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "OptionListStat"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleDropdown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "visible",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onFaceClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onClickOutside",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_onClickOutsideBound",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onMouseMove",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_onMouseMoveBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleComboboxDropdown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onOptionMouseOver",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onEnterKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onSpaceKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_scrollActiveElementToTop",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_adjustOptionListScrollPos",
              "privacy": "private",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'down' | 'up'"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onArrowUpKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onArrowDownKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onSlotChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxInputFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxInputInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDescription",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "description": "Name which is used as a variable name in the data of the form-container.",
              "name": "name"
            },
            {
              "name": "selectedIndexes",
              "type": {
                "text": "number[]"
              },
              "fieldName": "selectedIndexes"
            },
            {
              "name": "value",
              "type": {
                "text": "string[]"
              },
              "fieldName": "value"
            },
            {
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "fieldName": "filter",
              "attribute": "filter",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "fieldName": "options",
              "attribute": "options",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "aria-expanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "fieldName": "ariaExpanded",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "combobox",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "data-cloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dataCloak",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "VscodeSelectBase",
            "module": "/src/includes/vscode-select/vscode-select-base"
          },
          "tagName": "vscode-multi-select",
          "customElement": true,
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeMultiSelect",
          "declaration": {
            "name": "VscodeMultiSelect",
            "module": "src/vscode-multi-select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-multi-select",
          "declaration": {
            "name": "VscodeMultiSelect",
            "module": "src/vscode-multi-select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeOption",
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "description",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "description"
            },
            {
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "selected"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-option",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeOption",
          "declaration": {
            "name": "VscodeOption",
            "module": "src/vscode-option.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-option",
          "declaration": {
            "name": "VscodeOption",
            "module": "src/vscode-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeRadioGroup",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "inline",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'horizontal'",
              "fieldName": "variant"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "inline"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-radio-group",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeRadioGroup",
          "declaration": {
            "name": "VscodeRadioGroup",
            "module": "src/vscode-radio-group.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-radio-group",
          "declaration": {
            "name": "VscodeRadioGroup",
            "module": "src/vscode-radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeRadio",
          "members": [
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "attribute": "checked"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled"
            },
            {
              "kind": "field",
              "name": "_checked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isSlotEmpty",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "method",
              "name": "_checkButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true,
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_prevTabindex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_uid",
              "privacy": "protected",
              "default": "`id_${new Date().valueOf()}_${Math.floor(\r\n    Math.random() * 9999\r\n  )}`",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            }
          ],
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "description": "Name which is used as a variable name in the data of the form-container.",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "fieldName": "checked"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "FormButtonWidgetBase",
                "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
              }
            }
          ],
          "superclass": {
            "name": "FormButtonWidgetBase",
            "module": "/src/includes/form-button-widget/FormButtonWidgetBase"
          },
          "tagName": "vscode-radio",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeRadio",
          "declaration": {
            "name": "VscodeRadio",
            "module": "src/vscode-radio.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-radio",
          "declaration": {
            "name": "VscodeRadio",
            "module": "src/vscode-radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-scrollable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeScrollable",
          "members": [
            {
              "kind": "field",
              "name": "shadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "shadow",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrolled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "scrolled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "scrollPos",
              "type": {
                "text": "number"
              },
              "attribute": "scrollPos"
            },
            {
              "kind": "field",
              "name": "scrollMax",
              "type": {
                "text": "number"
              },
              "attribute": "scrollMax"
            },
            {
              "kind": "field",
              "name": "_isDragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_thumbHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_thumbY",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_thumbVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_thumbFade",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_thumbActive",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_contentElement",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollThumbElement",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollableContainer",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedNodes",
              "type": {
                "text": "NodeList"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollThumbStartY",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_mouseStartY",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_scrollbarVisible",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "_scrollbarTrackZ",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_resizeObserverCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_resizeObserverCallbackBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateScrollbar",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_zIndexFix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onScrollThumbMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onScrollThumbMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_onScrollThumbMouseMoveBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onScrollThumbMouseUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_onScrollThumbMouseUpBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onScrollableContainerScroll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onComponentMouseOver",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onComponentMouseOverBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onComponentMouseOut",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onComponentMouseOutBound",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "shadow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "shadow"
            },
            {
              "name": "scrolled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "scrolled"
            },
            {
              "name": "scrollPos",
              "type": {
                "text": "number"
              },
              "fieldName": "scrollPos"
            },
            {
              "name": "scrollMax",
              "type": {
                "text": "number"
              },
              "fieldName": "scrollMax"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-scrollable",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeScrollable",
          "declaration": {
            "name": "VscodeScrollable",
            "module": "src/vscode-scrollable.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-scrollable",
          "declaration": {
            "name": "VscodeScrollable",
            "module": "src/vscode-scrollable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-single-select.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "## Types\r\n\r\n```typescript\r\ninterface Option {\r\n label: string;\r\n value: string;\r\n description: string;\r\n selected: boolean;\r\n disabled: boolean;\r\n}\r\n```",
          "name": "VscodeSingleSelect",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "attribute": "selectedIndex"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "_labelText",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "''"
            },
            {
              "kind": "method",
              "name": "updateInputValue",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSlotChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onArrowUpKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onArrowDownKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onEnterKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onOptionClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderLabel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderSelectFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderComboboxFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "attribute": "aria-expanded",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "combobox",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataCloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "data-cloak",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "attribute": "filter",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "attribute": "options",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true,
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_activeIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_currentDescription",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filter",
              "type": {
                "text": "SearchMethod"
              },
              "privacy": "protected",
              "default": "'fuzzy'",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filteredOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_filterPattern",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_selectedIndexes",
              "type": {
                "text": "number[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_showDropdown",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listScrollTop",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_mainSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_listElement",
              "type": {
                "text": "HTMLUListElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_isHoverForbidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_currentOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_addOptionsFromSlottedElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "OptionListStat"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleDropdown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "visible",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onFaceClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onClickOutside",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_onClickOutsideBound",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onMouseMove",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "field",
              "name": "_onMouseMoveBound",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_toggleComboboxDropdown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onOptionMouseOver",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onSpaceKeyDown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_scrollActiveElementToTop",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_adjustOptionListScrollPos",
              "privacy": "private",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'down' | 'up'"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentFocus",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComponentBlur",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxInputFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxInputInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDescription",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdownControls",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ],
          "attributes": [
            {
              "description": "Name which is used as a variable name in the data of the form-container.",
              "name": "name"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'listbox'",
              "fieldName": "role"
            },
            {
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "fieldName": "selectedIndex"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            },
            {
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "fieldName": "filter",
              "attribute": "filter",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "fieldName": "options",
              "attribute": "options",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "aria-expanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "fieldName": "ariaExpanded",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "combobox",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "data-cloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dataCloak",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex",
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ],
          "superclass": {
            "name": "VscodeSelectBase",
            "module": "/src/includes/vscode-select/vscode-select-base"
          },
          "tagName": "vscode-single-select",
          "customElement": true,
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              },
              "inheritedFrom": {
                "name": "VscodeSelectBase",
                "module": "src/includes/vscode-select/vscode-select-base.ts"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSingleSelect",
          "declaration": {
            "name": "VscodeSingleSelect",
            "module": "src/vscode-single-select.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-single-select",
          "declaration": {
            "name": "VscodeSingleSelect",
            "module": "src/vscode-single-select.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-split-layout.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeSplitLayout",
          "members": [
            {
              "kind": "field",
              "name": "split",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'vertical'",
              "attribute": "split"
            },
            {
              "kind": "field",
              "name": "resetOnDblClick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "resetOnDblClick"
            },
            {
              "kind": "field",
              "name": "initialPos",
              "type": {
                "text": "string"
              },
              "default": "'50%'",
              "attribute": "initialPos"
            },
            {
              "kind": "field",
              "name": "_startPaneRight",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_startPaneBottom",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_endPaneTop",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_endPaneLeft",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_handleLeft",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_handleTop",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_isDragActive",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hover",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_hide",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_boundRect",
              "type": {
                "text": "DOMRect"
              },
              "privacy": "private",
              "default": "new DOMRect()"
            },
            {
              "kind": "field",
              "name": "_handleOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_initPosition",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleMouseOver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleMouseOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleMouseUp",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_handleMouseUpBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_handleMouseMoveBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleDblClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "split",
              "type": {
                "text": "'horizontal' | 'vertical'"
              },
              "default": "'vertical'",
              "fieldName": "split"
            },
            {
              "name": "resetOnDblClick",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "resetOnDblClick"
            },
            {
              "name": "initialPos",
              "type": {
                "text": "string"
              },
              "default": "'50%'",
              "fieldName": "initialPos"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-split-layout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSplitLayout",
          "declaration": {
            "name": "VscodeSplitLayout",
            "module": "src/vscode-split-layout.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-split-layout",
          "declaration": {
            "name": "VscodeSplitLayout",
            "module": "src/vscode-split-layout.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table-body.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTableBody",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'rowgroup'",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'rowgroup'",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table-body",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableBody",
          "declaration": {
            "name": "VscodeTableBody",
            "module": "src/vscode-table-body.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table-body",
          "declaration": {
            "name": "VscodeTableBody",
            "module": "src/vscode-table-body.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTableCell",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'cell'",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "columnLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Cell label in the compact view of the responsive mode. For internal use only.",
              "attribute": "columnLabel"
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable compact view in the responsive mode. For internal use only.",
              "attribute": "compact",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'cell'",
              "fieldName": "role"
            },
            {
              "name": "columnLabel",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Cell label in the compact view of the responsive mode. For internal use only.",
              "fieldName": "columnLabel"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enable compact view in the responsive mode. For internal use only.",
              "fieldName": "compact"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableCell",
          "declaration": {
            "name": "VscodeTableCell",
            "module": "src/vscode-table-cell.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table-cell",
          "declaration": {
            "name": "VscodeTableCell",
            "module": "src/vscode-table-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table-header-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTableHeaderCell",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'columnheader'",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'columnheader'",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table-header-cell",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableHeaderCell",
          "declaration": {
            "name": "VscodeTableHeaderCell",
            "module": "src/vscode-table-header-cell.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table-header-cell",
          "declaration": {
            "name": "VscodeTableHeaderCell",
            "module": "src/vscode-table-header-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTableHeader",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'rowgroup'",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'rowgroup'",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableHeader",
          "declaration": {
            "name": "VscodeTableHeader",
            "module": "src/vscode-table-header.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table-header",
          "declaration": {
            "name": "VscodeTableHeader",
            "module": "src/vscode-table-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTableRow",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'row'",
              "attribute": "role",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'row'",
              "fieldName": "role"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table-row",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTableRow",
          "declaration": {
            "name": "VscodeTableRow",
            "module": "src/vscode-table-row.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table-row",
          "declaration": {
            "name": "VscodeTableRow",
            "module": "src/vscode-table-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTable",
          "members": [
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'table'",
              "attribute": "role",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "resizable"
            },
            {
              "kind": "field",
              "name": "responsive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "responsive",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "breakpoint",
              "type": {
                "text": "number"
              },
              "default": "300",
              "attribute": "breakpoint"
            },
            {
              "kind": "field",
              "name": "columns",
              "description": "Initial column sizes in a JSON-encoded array.\r\nAccepted values are:\r\n- number\r\n- string-type number (ex.: \"100\")\r\n- px value (ex.: \"100px\")\r\n- percentage value (ex.: \"50%\")\r\n- percentage value (ex.: \"50%\")\r\n- \"auto\" keyword",
              "type": {
                "text": "string[]"
              },
              "attribute": "columns"
            },
            {
              "kind": "field",
              "name": "minColumnWidth",
              "type": {
                "text": "string"
              },
              "default": "'50px'",
              "description": "Minimum column width. Valid values are:\r\n- number\r\n- string-type number (ex.: \"100\")\r\n- px value (ex.: \"100px\")\r\n- percentage value (ex.: \"50%\")\r\n- percentage value (ex.: \"50%\")\r\n- \"auto\" keyword",
              "attribute": "min-column-width"
            },
            {
              "kind": "field",
              "name": "delayedResizing",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "delayed-resizing"
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "For internal use only",
              "attribute": "compact",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_bodySlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerElement",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_scrollableElement",
              "type": {
                "text": "VscodeScrollable"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_sashVisibleElements",
              "type": {
                "text": "HTMLDivElement[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedHeaderElements",
              "type": {
                "text": "NodeListOf<VscodeTableHeader>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_assignedBodyElements",
              "type": {
                "text": "NodeListOf<VscodeTableBody>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_sashPositions",
              "type": {
                "text": "number[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Sash positions in percentage"
            },
            {
              "kind": "field",
              "name": "_isDragging",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_sashHovers",
              "type": {
                "text": "boolean[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Sash hover state flags, used in the render."
            },
            {
              "kind": "field",
              "name": "_columns",
              "type": {
                "text": "string[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_componentResizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerResizeObserver",
              "type": {
                "text": "ResizeObserver"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_activeSashElementIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_activeSashCursorOffset",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_componentX",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_componentH",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_componentW",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_headerCells",
              "type": {
                "text": "VscodeTableHeaderCell[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Cached querySelectorAll result. Updated when the header slot changes.\r\nIt shouldn't be used directly, check the \"_getHeaderCells\" function."
            },
            {
              "kind": "field",
              "name": "_cellsOfFirstRow",
              "type": {
                "text": "VscodeTableCell[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Cached querySelectorAll result. Updated when the body slot changes.\r\nIt shouldn't be used directly, check the \"_getCellsOfFirstRow\" function."
            },
            {
              "kind": "field",
              "name": "_cellsToResize",
              "type": {
                "text": "VscodeTableCell[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerCellsToResize",
              "type": {
                "text": "VscodeTableHeaderCell[]"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_prevHeaderHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_prevComponentHeight",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_px2Percent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "px",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_percent2Px",
              "privacy": "private",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_memoizeComponentDimensions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_queryHeaderCells",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getHeaderCells",
              "privacy": "private",
              "description": "Get cached header cells"
            },
            {
              "kind": "method",
              "name": "_queryCellsOfFirstRow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getCellsOfFirstRow",
              "privacy": "private",
              "description": "Get cached cells of first row"
            },
            {
              "kind": "method",
              "name": "_initResizeObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_componentResizeObserverCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_componentResizeObserverCallbackBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_headerResizeObserverCallback",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_headerResizeObserverCallbackBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_calcColWidthPercentages",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_initHeaderCellSizes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colWidths",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_initBodyColumnSizes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colWidths",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_initSashes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "colWidths",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_initDefaultColumnSizes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_updateScrollpaneSize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_applyCompactViewColumnLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_clearCompactViewColumnLabels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleCompactView",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onHeaderSlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onBodySlotChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSashMouseOver",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onSashMouseOut",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onSashMouseDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_updateActiveSashPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mouseX",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_getSashPositions",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "{\r\n    sashPos: number;\r\n    prevSashPos: number;\r\n    nextSashPos: number;\r\n  }"
                }
              }
            },
            {
              "kind": "method",
              "name": "_resizeColumns",
              "privacy": "private",
              "parameters": [
                {
                  "name": "resizeBodyCells",
                  "default": "true"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onResizingMouseMove",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_onResizingMouseMoveBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onResizingMouseUp",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_onResizingMouseUpBound",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "Boolean"
              },
              "name": "zebra"
            },
            {
              "type": {
                "text": "Boolean"
              },
              "name": "bordered"
            },
            {
              "name": "role",
              "type": {
                "text": "string"
              },
              "default": "'table'",
              "fieldName": "role"
            },
            {
              "name": "resizable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "resizable"
            },
            {
              "name": "responsive",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "responsive"
            },
            {
              "name": "breakpoint",
              "type": {
                "text": "number"
              },
              "default": "300",
              "fieldName": "breakpoint"
            },
            {
              "name": "columns",
              "description": "Initial column sizes in a JSON-encoded array.\r\nAccepted values are:\r\n- number\r\n- string-type number (ex.: \"100\")\r\n- px value (ex.: \"100px\")\r\n- percentage value (ex.: \"50%\")\r\n- percentage value (ex.: \"50%\")\r\n- \"auto\" keyword",
              "type": {
                "text": "string[]"
              },
              "fieldName": "columns"
            },
            {
              "name": "min-column-width",
              "type": {
                "text": "string"
              },
              "default": "'50px'",
              "description": "Minimum column width. Valid values are:\r\n- number\r\n- string-type number (ex.: \"100\")\r\n- px value (ex.: \"100px\")\r\n- percentage value (ex.: \"50%\")\r\n- percentage value (ex.: \"50%\")\r\n- \"auto\" keyword",
              "fieldName": "minColumnWidth"
            },
            {
              "name": "delayed-resizing",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "delayedResizing"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "For internal use only",
              "fieldName": "compact"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTable",
          "declaration": {
            "name": "VscodeTable",
            "module": "src/vscode-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-table",
          "declaration": {
            "name": "VscodeTable",
            "module": "src/vscode-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-tabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeTabs",
          "members": [
            {
              "kind": "field",
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "attribute": "selectedIndex"
            },
            {
              "kind": "field",
              "name": "_headerSlot",
              "type": {
                "text": "HTMLSlotElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_mainSlot",
              "type": {
                "text": "HTMLSlotElement | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "_setActiveTab",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSlotChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onHeaderClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "vsc-select",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "selectedIndex",
              "type": {
                "text": "number"
              },
              "fieldName": "selectedIndex"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-tabs",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTabs",
          "declaration": {
            "name": "VscodeTabs",
            "module": "src/vscode-tabs.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-tabs",
          "declaration": {
            "name": "VscodeTabs",
            "module": "src/vscode-tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "## Type definitions\r\n\r\n```typescript\r\ntype ItemType = 'branch' | 'leaf';\r\n\r\ninterface TreeItemIconConfig {\r\n  branch?: string;\r\n  open?: string;\r\n  leaf?: string;\r\n}\r\n\r\ninterface TreeItem {\r\n  label: string;\r\n  subItems?: TreeItem[];\r\n  open?: boolean;\r\n  selected?: boolean;\r\n  focused?: boolean;\r\n  icons?: TreeItemIconConfig;\r\n\r\n  // If it's not defined the value will be equal to the label\r\n  value?: string;\r\n\r\n  // Item path in the tree. For example [0,0,1] means:\r\n  // tree[0].subItems[0].subItems[1]\r\n  path?: number[];\r\n}\r\n\r\ninterface SelectEventDetail {\r\n  icons: TreeItemIconConfig | undefined;\r\n  itemType: ItemType;\r\n  label: string;\r\n  open: boolean;\r\n  value: string;\r\n  path: string; // ex.: 0/0/1\r\n}\r\n```",
          "name": "VscodeTree",
          "members": [
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "TreeItem[]"
              },
              "attribute": "data"
            },
            {
              "kind": "field",
              "name": "indent",
              "type": {
                "text": "number"
              },
              "default": "8",
              "attribute": "indent"
            },
            {
              "kind": "field",
              "name": "arrows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "arrows"
            },
            {
              "kind": "field",
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "multiline"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_data",
              "type": {
                "text": "TreeItem[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_selectedItem",
              "type": {
                "text": "TreeItem | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_focusedItem",
              "type": {
                "text": "TreeItem | null"
              },
              "privacy": "private",
              "default": "null"
            },
            {
              "kind": "method",
              "name": "getItemByPath",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "TreeItem | null"
                }
              },
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getItemType",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "ItemType"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getIconName",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderTreeItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "{\r\n    indentLevel,\r\n    label,\r\n    path,\r\n    iconName,\r\n    open = false,\r\n    itemType,\r\n    selected = false,\r\n    focused = false,\r\n    subItems,\r\n  }",
                  "type": {
                    "text": "{\r\n    indentLevel: number;\r\n    label: string;\r\n    path: number[];\r\n    iconName: string | undefined;\r\n    open: boolean;\r\n    itemType: ItemType;\r\n    selected: boolean;\r\n    focused: boolean;\r\n    subItems: TreeItem[];\r\n  }"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderTree",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tree",
                  "type": {
                    "text": "TreeItem[]"
                  }
                },
                {
                  "name": "oldPath",
                  "default": "[]",
                  "type": {
                    "text": "number[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggleSubTreeOpen",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectTreeItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focusTreeItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "closeSubTreeRecursively",
              "privacy": "private",
              "parameters": [
                {
                  "name": "tree",
                  "type": {
                    "text": "TreeItem[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emitSelectEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                },
                {
                  "name": "path",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_focusItem",
              "privacy": "private",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "TreeItem"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_focusPrevItem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_focusNextItem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onComponentClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onComponentKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "onComponentKeyDownBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "closeAll",
              "privacy": "public",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "events": [
            {
              "name": "vsc-select",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "data",
              "type": {
                "text": "TreeItem[]"
              },
              "fieldName": "data"
            },
            {
              "name": "indent",
              "type": {
                "text": "number"
              },
              "default": "8",
              "fieldName": "indent"
            },
            {
              "name": "arrows",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "arrows"
            },
            {
              "name": "multiline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "multiline"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          },
          "tagName": "vscode-tree",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeTree",
          "declaration": {
            "name": "VscodeTree",
            "module": "src/vscode-tree.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "vscode-tree",
          "declaration": {
            "name": "VscodeTree",
            "module": "src/vscode-tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/formHelperTextStyles.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "dist/includes/formHelperTextStyles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/helpers.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "INPUT_LINE_HEIGHT_RATIO"
        },
        {
          "kind": "variable",
          "name": "DEFUALT_INPUT_WIDGET_WIDTH",
          "type": {
            "text": "number"
          },
          "default": "320"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "INPUT_LINE_HEIGHT_RATIO",
          "declaration": {
            "name": "INPUT_LINE_HEIGHT_RATIO",
            "module": "dist/includes/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "DEFUALT_INPUT_WIDGET_WIDTH",
          "declaration": {
            "name": "DEFUALT_INPUT_WIDGET_WIDTH",
            "module": "dist/includes/helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/themeHelpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isRgba",
          "parameters": [
            {
              "name": "colorStr"
            }
          ]
        },
        {
          "kind": "function",
          "name": "addAlpha",
          "parameters": [
            {
              "name": "hexColor"
            },
            {
              "name": "alpha"
            }
          ]
        },
        {
          "kind": "function",
          "name": "applyForegroundRGBA",
          "description": "Define a translucent version of the foreground color as a global css variable"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isRgba",
          "declaration": {
            "name": "isRgba",
            "module": "dist/includes/themeHelpers.js"
          }
        },
        {
          "kind": "js",
          "name": "addAlpha",
          "declaration": {
            "name": "addAlpha",
            "module": "dist/includes/themeHelpers.js"
          }
        },
        {
          "kind": "js",
          "name": "applyForegroundRGBA",
          "declaration": {
            "name": "applyForegroundRGBA",
            "module": "dist/includes/themeHelpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/VscElement.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscElement",
          "declaration": {
            "name": "VscElement",
            "module": "dist/includes/VscElement.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/vscode-table/helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "rawValueToPercentage",
          "parameters": [
            {
              "name": "raw"
            },
            {
              "name": "base"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "rawValueToPercentage",
          "declaration": {
            "name": "rawValueToPercentage",
            "module": "dist/vscode-table/helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "docs/dev-assets/component-preview.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ComponentPreview",
          "members": [
            {
              "kind": "method",
              "name": "_onThemeSelectorButtonClick",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onToggleFullscreenButtonClick"
            },
            {
              "kind": "method",
              "name": "_runOperationOnEachThemeSelector",
              "parameters": [
                {
                  "name": "command"
                },
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_applyTheme",
              "parameters": [
                {
                  "name": "themeName"
                }
              ]
            },
            {
              "kind": "field",
              "name": "_elThemeSelector"
            },
            {
              "kind": "field",
              "name": "_elButtons"
            },
            {
              "kind": "field",
              "name": "_elToggleFullscreen"
            },
            {
              "kind": "field"
            },
            {
              "kind": "field",
              "name": "_onThemeSelectorButtonClickBound"
            },
            {
              "kind": "field",
              "name": "_onToggleFullscreenButtonClickBound"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "component-preview",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "component-preview",
          "declaration": {
            "name": "ComponentPreview",
            "module": "docs/dev-assets/component-preview.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/formHelperTextStyles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/includes/formHelperTextStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/helpers.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "INPUT_LINE_HEIGHT_RATIO"
        },
        {
          "kind": "variable",
          "name": "DEFUALT_INPUT_WIDGET_WIDTH",
          "type": {
            "text": "number"
          },
          "default": "320"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "INPUT_LINE_HEIGHT_RATIO",
          "declaration": {
            "name": "INPUT_LINE_HEIGHT_RATIO",
            "module": "src/includes/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFUALT_INPUT_WIDGET_WIDTH",
          "declaration": {
            "name": "DEFUALT_INPUT_WIDGET_WIDTH",
            "module": "src/includes/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/themeHelpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isRgba",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "colorStr",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "addAlpha",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "hexColor",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "alpha",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "applyForegroundRGBA",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "description": "Define a translucent version of the foreground color as a global css variable"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isRgba",
          "declaration": {
            "name": "isRgba",
            "module": "src/includes/themeHelpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "addAlpha",
          "declaration": {
            "name": "addAlpha",
            "module": "src/includes/themeHelpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "applyForegroundRGBA",
          "declaration": {
            "name": "applyForegroundRGBA",
            "module": "src/includes/themeHelpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/VscElement.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscElement",
          "declaration": {
            "name": "VscElement",
            "module": "src/includes/VscElement.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/vscode-table/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "rawValueToPercentage",
          "return": {
            "type": {
              "text": "number | null"
            }
          },
          "parameters": [
            {
              "name": "raw",
              "type": {
                "text": "string | number"
              }
            },
            {
              "name": "base",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "rawValueToPercentage",
          "declaration": {
            "name": "rawValueToPercentage",
            "module": "src/vscode-table/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/form-button-widget/base.styles.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "dist/includes/form-button-widget/base.styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/form-button-widget/checkbox.styles.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "dist/includes/form-button-widget/checkbox.styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/form-button-widget/FormButtonWidgetBase.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormButtonWidgetBase",
          "members": [
            {
              "kind": "method",
              "name": "_handleClick"
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "parameters": [
                {
                  "name": "_event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocus"
            },
            {
              "kind": "method",
              "name": "_handleBlur"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_prevTabindex",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_uid",
              "default": "`id_${new Date().valueOf()}_${Math.floor(Math.random() * 9999)}`"
            },
            {
              "kind": "field",
              "name": "_handleFocusBound"
            },
            {
              "kind": "field",
              "name": "_handleBlurBound"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/dist/includes/VscElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormButtonWidgetBase",
          "declaration": {
            "name": "FormButtonWidgetBase",
            "module": "dist/includes/form-button-widget/FormButtonWidgetBase.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/form-button-widget/radio.styles.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "dist/includes/form-button-widget/radio.styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/vscode-select/helpers.js",
      "declarations": [
        {
          "kind": "function",
          "name": "startsWithPerTermMatch",
          "parameters": [
            {
              "name": "subject"
            },
            {
              "name": "pattern"
            }
          ]
        },
        {
          "kind": "function",
          "name": "startsWithMatch",
          "parameters": [
            {
              "name": "subject"
            },
            {
              "name": "pattern"
            }
          ]
        },
        {
          "kind": "function",
          "name": "containsMatch",
          "parameters": [
            {
              "name": "subject"
            },
            {
              "name": "pattern"
            }
          ]
        },
        {
          "kind": "function",
          "name": "fuzzyMatch",
          "parameters": [
            {
              "name": "subject"
            },
            {
              "name": "pattern"
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterOptionsByPattern",
          "parameters": [
            {
              "name": "list"
            },
            {
              "name": "pattern"
            },
            {
              "name": "method"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "startsWithPerTermMatch",
          "declaration": {
            "name": "startsWithPerTermMatch",
            "module": "dist/includes/vscode-select/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "startsWithMatch",
          "declaration": {
            "name": "startsWithMatch",
            "module": "dist/includes/vscode-select/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "containsMatch",
          "declaration": {
            "name": "containsMatch",
            "module": "dist/includes/vscode-select/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "fuzzyMatch",
          "declaration": {
            "name": "fuzzyMatch",
            "module": "dist/includes/vscode-select/helpers.js"
          }
        },
        {
          "kind": "js",
          "name": "filterOptionsByPattern",
          "declaration": {
            "name": "filterOptionsByPattern",
            "module": "dist/includes/vscode-select/helpers.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/vscode-select/styles.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "dist/includes/vscode-select/styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/vscode-select/template-elements.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "chevronDownIcon",
          "default": "html `\r\n  <span class=\"icon\">\r\n    <svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      viewBox=\"0 0 16 16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"currentColor\"\r\n    >\r\n      <path\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n        d=\"M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z\"\r\n      />\r\n    </svg>\r\n  </span>\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "chevronDownIcon",
          "declaration": {
            "name": "chevronDownIcon",
            "module": "dist/includes/vscode-select/template-elements.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/vscode-select/types.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "dist/includes/vscode-select/vscode-select-base.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeSelectBase",
          "cssProperties": [
            {
              "description": "workaround for dropdown z-index issues",
              "name": "--dropdown-z-index"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "\"fuzzy\"|\"contains\"|\"startsWith\"|\"startsWithPerTerm\""
              },
              "attribute": "filter"
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "_filteredOptions"
            },
            {
              "kind": "field",
              "name": "_currentOptions"
            },
            {
              "kind": "method",
              "name": "_addOptionsFromSlottedElements"
            },
            {
              "kind": "method",
              "name": "_toggleDropdown",
              "parameters": [
                {
                  "name": "visible"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent"
            },
            {
              "kind": "method",
              "name": "_onFaceClick"
            },
            {
              "kind": "method",
              "name": "_onClickOutside",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onMouseMove"
            },
            {
              "kind": "method",
              "name": "_toggleComboboxDropdown"
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonClick"
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonKeyDown",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onOptionMouseOver",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onEnterKeyDown"
            },
            {
              "kind": "method",
              "name": "_onSpaceKeyDown"
            },
            {
              "kind": "method",
              "name": "_scrollActiveElementToTop"
            },
            {
              "kind": "method",
              "name": "_adjustOptionListScrollPos",
              "parameters": [
                {
                  "name": "direction"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onArrowUpKeyDown"
            },
            {
              "kind": "method",
              "name": "_onArrowDownKeyDown"
            },
            {
              "kind": "method",
              "name": "_onComponentKeyDown",
              "parameters": [
                {
                  "name": "event"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onComponentFocus"
            },
            {
              "kind": "method",
              "name": "_onComponentBlur"
            },
            {
              "kind": "method",
              "name": "_onSlotChange"
            },
            {
              "kind": "method",
              "name": "_onComboboxInputFocus",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onComboboxInputInput",
              "parameters": [
                {
                  "name": "ev"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderOptions"
            },
            {
              "kind": "method",
              "name": "_renderDescription"
            },
            {
              "kind": "method",
              "name": "_renderSelectFace"
            },
            {
              "kind": "method",
              "name": "_renderComboboxFace"
            },
            {
              "kind": "method",
              "name": "_renderDropdownControls"
            },
            {
              "kind": "method",
              "name": "_renderDropdown"
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string"
              },
              "default": "'false'"
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dataCloak",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_activeIndex",
              "type": {
                "text": "number"
              },
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_currentDescription",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_filter",
              "type": {
                "text": "string"
              },
              "default": "'fuzzy'"
            },
            {
              "kind": "field",
              "name": "_filterPattern",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_selectedIndex",
              "type": {
                "text": "number"
              },
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_selectedIndexes",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_showDropdown",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_listScrollTop",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_multiple",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isHoverForbidden",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_onClickOutsideBound"
            },
            {
              "kind": "field",
              "name": "_onMouseMoveBound"
            }
          ],
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "\"fuzzy\"|\"contains\"|\"startsWith\"|\"startsWithPerTerm\""
              },
              "fieldName": "filter"
            },
            {
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "fieldName": "options"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/dist/includes/VscElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSelectBase",
          "declaration": {
            "name": "VscodeSelectBase",
            "module": "dist/includes/vscode-select/vscode-select-base.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/form-button-widget/base.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/includes/form-button-widget/base.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/form-button-widget/checkbox.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/includes/form-button-widget/checkbox.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/form-button-widget/FormButtonWidgetBase.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "FormButtonWidgetBase",
          "members": [
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_prevTabindex",
              "type": {
                "text": "number"
              },
              "privacy": "private",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_uid",
              "privacy": "protected",
              "default": "`id_${new Date().valueOf()}_${Math.floor(\r\n    Math.random() * 9999\r\n  )}`"
            },
            {
              "kind": "method",
              "name": "_handleClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_handleKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_handleFocus",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_handleFocusBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_handleBlur",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "_handleBlurBound",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex"
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FormButtonWidgetBase",
          "declaration": {
            "name": "FormButtonWidgetBase",
            "module": "src/includes/form-button-widget/FormButtonWidgetBase.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/form-button-widget/radio.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/includes/form-button-widget/radio.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/vscode-select/helpers.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "startsWithPerTermMatch",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "subject",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "startsWithMatch",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "subject",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "containsMatch",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "subject",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "fuzzyMatch",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "subject",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "filterOptionsByPattern",
          "return": {
            "type": {
              "text": "InternalOption[]"
            }
          },
          "parameters": [
            {
              "name": "list",
              "type": {
                "text": "InternalOption[]"
              }
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "method",
              "type": {
                "text": "SearchMethod"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "startsWithPerTermMatch",
          "declaration": {
            "name": "startsWithPerTermMatch",
            "module": "src/includes/vscode-select/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "startsWithMatch",
          "declaration": {
            "name": "startsWithMatch",
            "module": "src/includes/vscode-select/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "containsMatch",
          "declaration": {
            "name": "containsMatch",
            "module": "src/includes/vscode-select/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "fuzzyMatch",
          "declaration": {
            "name": "fuzzyMatch",
            "module": "src/includes/vscode-select/helpers.ts"
          }
        },
        {
          "kind": "js",
          "name": "filterOptionsByPattern",
          "declaration": {
            "name": "filterOptionsByPattern",
            "module": "src/includes/vscode-select/helpers.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/vscode-select/styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/includes/vscode-select/styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/vscode-select/template-elements.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "chevronDownIcon",
          "default": "html`\r\n  <span class=\"icon\">\r\n    <svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      viewBox=\"0 0 16 16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"currentColor\"\r\n    >\r\n      <path\r\n        fill-rule=\"evenodd\"\r\n        clip-rule=\"evenodd\"\r\n        d=\"M7.976 10.072l4.357-4.357.62.618L8.284 11h-.618L3 6.333l.619-.618 4.357 4.357z\"\r\n      />\r\n    </svg>\r\n  </span>\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "chevronDownIcon",
          "declaration": {
            "name": "chevronDownIcon",
            "module": "src/includes/vscode-select/template-elements.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/vscode-select/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/includes/vscode-select/vscode-select-base.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VscodeSelectBase",
          "cssProperties": [
            {
              "description": "workaround for dropdown z-index issues",
              "name": "--dropdown-z-index"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "attribute": "aria-expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "combobox"
            },
            {
              "kind": "field",
              "name": "dataCloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "data-cloak",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "attribute": "filter"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "focused",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "attribute": "options"
            },
            {
              "kind": "field",
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "tabindex",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "_activeIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_currentDescription",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_filter",
              "type": {
                "text": "SearchMethod"
              },
              "privacy": "protected",
              "default": "'fuzzy'"
            },
            {
              "kind": "field",
              "name": "_filteredOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_filterPattern",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_selectedIndex",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "-1"
            },
            {
              "kind": "field",
              "name": "_selectedIndexes",
              "type": {
                "text": "number[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_showDropdown",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_options",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_value",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "_values",
              "type": {
                "text": "string[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_listScrollTop",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "_mainSlot",
              "type": {
                "text": "HTMLSlotElement"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "_listElement",
              "type": {
                "text": "HTMLUListElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_multiple",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_isHoverForbidden",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "_currentOptions",
              "type": {
                "text": "InternalOption[]"
              },
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_addOptionsFromSlottedElements",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "OptionListStat"
                }
              }
            },
            {
              "kind": "method",
              "name": "_toggleDropdown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "visible",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_dispatchChangeEvent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onFaceClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onClickOutside",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "_onClickOutsideBound",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_onMouseMove",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_onMouseMoveBound",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_toggleComboboxDropdown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonClick",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxButtonKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onOptionMouseOver",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onEnterKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onSpaceKeyDown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_scrollActiveElementToTop",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_adjustOptionListScrollPos",
              "privacy": "private",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'down' | 'up'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onArrowUpKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onArrowDownKeyDown",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onComponentKeyDown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onComponentFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onComponentBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_onSlotChange",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "_onComboboxInputFocus",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_onComboboxInputInput",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "ev",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_renderOptions",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | TemplateResult[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDescription",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_renderSelectFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderComboboxFace",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdownControls",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "_renderDropdown",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "vsc-change",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "filter",
              "description": "Filter method",
              "type": {
                "text": "string"
              },
              "fieldName": "filter",
              "attribute": "filter"
            },
            {
              "name": "options",
              "type": {
                "text": "Option[]"
              },
              "fieldName": "options",
              "attribute": "options"
            },
            {
              "name": "aria-expanded",
              "type": {
                "text": "string"
              },
              "default": "'false'",
              "fieldName": "ariaExpanded"
            },
            {
              "name": "combobox",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "combobox"
            },
            {
              "name": "data-cloak",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "dataCloak"
            },
            {
              "name": "focused",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "focused"
            },
            {
              "name": "tabindex",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "tabindex"
            }
          ],
          "superclass": {
            "name": "VscElement",
            "module": "/src/includes/VscElement"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VscodeSelectBase",
          "declaration": {
            "name": "VscodeSelectBase",
            "module": "src/includes/vscode-select/vscode-select-base.ts"
          }
        }
      ]
    }
  ]
}
